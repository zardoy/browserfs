var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __pow = Math.pow;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/core/browserfs.ts
var browserfs_exports = {};
__export(browserfs_exports, {
  BFSRequire: () => BFSRequire,
  EmscriptenFS: () => BFSEmscriptenFS,
  Errors: () => api_error_exports,
  FileSystem: () => backends_default,
  configure: () => configure,
  configureAsync: () => configureAsync,
  getFileSystem: () => getFileSystem,
  initialize: () => initialize,
  install: () => install,
  registerFileSystem: () => registerFileSystem,
  setImmediate: () => setImmediate_default
});
module.exports = __toCommonJS(browserfs_exports);

// node-modules-polyfills:buffer
var buffer_exports = {};
__export(buffer_exports, {
  Buffer: () => Buffer2,
  INSPECT_MAX_BYTES: () => INSPECT_MAX_BYTES,
  SlowBuffer: () => SlowBuffer,
  isBuffer: () => isBuffer,
  kMaxLength: () => _kMaxLength
});
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var inited = false;
function init() {
  inited = true;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
}
function toByteArray(b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  placeHolders = b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
  arr = new Arr(len * 3 / 4 - placeHolders);
  l = placeHolders > 0 ? len - 4 : len;
  var L = 0;
  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 255;
    arr[L++] = tmp >> 8 & 255;
    arr[L++] = tmp & 255;
  }
  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 255;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 255;
    arr[L++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function fromByteArray(uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var output = "";
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 63];
    output += "==";
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 63];
    output += lookup[tmp << 2 & 63];
    output += "=";
  }
  parts.push(output);
  return parts.join("");
}
function read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
  }
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
  }
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
}
function write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
  }
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
  }
  buffer[offset + i - d] |= s * 128;
}
var toString = {}.toString;
var isArray = Array.isArray || function(arr) {
  return toString.call(arr) == "[object Array]";
};
var INSPECT_MAX_BYTES = 50;
Buffer2.TYPED_ARRAY_SUPPORT = globalThis.TYPED_ARRAY_SUPPORT !== void 0 ? globalThis.TYPED_ARRAY_SUPPORT : true;
var _kMaxLength = kMaxLength();
function kMaxLength() {
  return Buffer2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError("Invalid typed array length");
  }
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    that = new Uint8Array(length);
    that.__proto__ = Buffer2.prototype;
  } else {
    if (that === null) {
      that = new Buffer2(length);
    }
    that.length = length;
  }
  return that;
}
function Buffer2(arg, encodingOrOffset, length) {
  if (!Buffer2.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer2)) {
    return new Buffer2(arg, encodingOrOffset, length);
  }
  if (typeof arg === "number") {
    if (typeof encodingOrOffset === "string") {
      throw new Error(
        "If encoding is specified then the first argument must be a string"
      );
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}
Buffer2.poolSize = 8192;
Buffer2._augment = function(arr) {
  arr.__proto__ = Buffer2.prototype;
  return arr;
};
function from(that, value, encodingOrOffset, length) {
  if (typeof value === "number") {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }
  if (typeof value === "string") {
    return fromString(that, value, encodingOrOffset);
  }
  return fromObject(that, value);
}
Buffer2.from = function(value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};
if (Buffer2.TYPED_ARRAY_SUPPORT) {
  Buffer2.prototype.__proto__ = Uint8Array.prototype;
  Buffer2.__proto__ = Uint8Array;
}
function assertSize(size) {
  if (typeof size !== "number") {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}
function alloc(that, size, fill2, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill2 !== void 0) {
    return typeof encoding === "string" ? createBuffer(that, size).fill(fill2, encoding) : createBuffer(that, size).fill(fill2);
  }
  return createBuffer(that, size);
}
Buffer2.alloc = function(size, fill2, encoding) {
  return alloc(null, size, fill2, encoding);
};
function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer2.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}
Buffer2.allocUnsafe = function(size) {
  return allocUnsafe(null, size);
};
Buffer2.allocUnsafeSlow = function(size) {
  return allocUnsafe(null, size);
};
function fromString(that, string, encoding) {
  if (typeof encoding !== "string" || encoding === "") {
    encoding = "utf8";
  }
  if (!Buffer2.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }
  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);
  if (actual !== length) {
    that = that.slice(0, actual);
  }
  return that;
}
function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}
function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength;
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError("'offset' is out of bounds");
  }
  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError("'length' is out of bounds");
  }
  if (byteOffset === void 0 && length === void 0) {
    array = new Uint8Array(array);
  } else if (length === void 0) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    that = array;
    that.__proto__ = Buffer2.prototype;
  } else {
    that = fromArrayLike(that, array);
  }
  return that;
}
function fromObject(that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);
    if (that.length === 0) {
      return that;
    }
    obj.copy(that, 0, 0, len);
    return that;
  }
  if (obj) {
    if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
      if (typeof obj.length !== "number" || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }
    if (obj.type === "Buffer" && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }
  throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
}
function checked(length) {
  if (length >= kMaxLength()) {
    throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
  }
  return length | 0;
}
function SlowBuffer(length) {
  if (+length != length) {
    length = 0;
  }
  return Buffer2.alloc(+length);
}
Buffer2.isBuffer = isBuffer;
function internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}
Buffer2.compare = function compare(a, b) {
  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
    throw new TypeError("Arguments must be Buffers");
  }
  if (a === b)
    return 0;
  var x = a.length;
  var y = b.length;
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }
  if (x < y)
    return -1;
  if (y < x)
    return 1;
  return 0;
};
Buffer2.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case "hex":
    case "utf8":
    case "utf-8":
    case "ascii":
    case "latin1":
    case "binary":
    case "base64":
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
      return true;
    default:
      return false;
  }
};
Buffer2.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }
  if (list.length === 0) {
    return Buffer2.alloc(0);
  }
  var i;
  if (length === void 0) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }
  var buffer = Buffer2.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};
function byteLength(string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== "string") {
    string = "" + string;
  }
  var len = string.length;
  if (len === 0)
    return 0;
  var loweredCase = false;
  for (; ; ) {
    switch (encoding) {
      case "ascii":
      case "latin1":
      case "binary":
        return len;
      case "utf8":
      case "utf-8":
      case void 0:
        return utf8ToBytes(string).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return len * 2;
      case "hex":
        return len >>> 1;
      case "base64":
        return base64ToBytes(string).length;
      default:
        if (loweredCase)
          return utf8ToBytes(string).length;
        encoding = ("" + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer2.byteLength = byteLength;
function slowToString(encoding, start, end) {
  var loweredCase = false;
  if (start === void 0 || start < 0) {
    start = 0;
  }
  if (start > this.length) {
    return "";
  }
  if (end === void 0 || end > this.length) {
    end = this.length;
  }
  if (end <= 0) {
    return "";
  }
  end >>>= 0;
  start >>>= 0;
  if (end <= start) {
    return "";
  }
  if (!encoding)
    encoding = "utf8";
  while (true) {
    switch (encoding) {
      case "hex":
        return hexSlice(this, start, end);
      case "utf8":
      case "utf-8":
        return utf8Slice(this, start, end);
      case "ascii":
        return asciiSlice(this, start, end);
      case "latin1":
      case "binary":
        return latin1Slice(this, start, end);
      case "base64":
        return base64Slice(this, start, end);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return utf16leSlice(this, start, end);
      default:
        if (loweredCase)
          throw new TypeError("Unknown encoding: " + encoding);
        encoding = (encoding + "").toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer2.prototype._isBuffer = true;
function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}
Buffer2.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError("Buffer size must be a multiple of 16-bits");
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};
Buffer2.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError("Buffer size must be a multiple of 32-bits");
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};
Buffer2.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError("Buffer size must be a multiple of 64-bits");
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};
Buffer2.prototype.toString = function toString2() {
  var length = this.length | 0;
  if (length === 0)
    return "";
  if (arguments.length === 0)
    return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};
Buffer2.prototype.equals = function equals(b) {
  if (!internalIsBuffer(b))
    throw new TypeError("Argument must be a Buffer");
  if (this === b)
    return true;
  return Buffer2.compare(this, b) === 0;
};
Buffer2.prototype.inspect = function inspect() {
  var str = "";
  var max = INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
    if (this.length > max)
      str += " ... ";
  }
  return "<Buffer " + str + ">";
};
Buffer2.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError("Argument must be a Buffer");
  }
  if (start === void 0) {
    start = 0;
  }
  if (end === void 0) {
    end = target ? target.length : 0;
  }
  if (thisStart === void 0) {
    thisStart = 0;
  }
  if (thisEnd === void 0) {
    thisEnd = this.length;
  }
  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError("out of range index");
  }
  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }
  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target)
    return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);
  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }
  if (x < y)
    return -1;
  if (y < x)
    return 1;
  return 0;
};
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  if (buffer.length === 0)
    return -1;
  if (typeof byteOffset === "string") {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 2147483647) {
    byteOffset = 2147483647;
  } else if (byteOffset < -2147483648) {
    byteOffset = -2147483648;
  }
  byteOffset = +byteOffset;
  if (isNaN(byteOffset)) {
    byteOffset = dir ? 0 : buffer.length - 1;
  }
  if (byteOffset < 0)
    byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir)
      return -1;
    else
      byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir)
      byteOffset = 0;
    else
      return -1;
  }
  if (typeof val === "string") {
    val = Buffer2.from(val, encoding);
  }
  if (internalIsBuffer(val)) {
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === "number") {
    val = val & 255;
    if (Buffer2.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }
  throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;
  if (encoding !== void 0) {
    encoding = String(encoding).toLowerCase();
    if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }
  function read2(buf, i2) {
    if (indexSize === 1) {
      return buf[i2];
    } else {
      return buf.readUInt16BE(i2 * indexSize);
    }
  }
  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read2(arr, i) === read2(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1)
          foundIndex = i;
        if (i - foundIndex + 1 === valLength)
          return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1)
          i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength)
      byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read2(arr, i + j) !== read2(val, j)) {
          found = false;
          break;
        }
      }
      if (found)
        return i;
    }
  }
  return -1;
}
Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }
  var strLen = string.length;
  if (strLen % 2 !== 0)
    throw new TypeError("Invalid hex string");
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed))
      return i;
    buf[offset + i] = parsed;
  }
  return i;
}
function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer2.prototype.write = function write2(string, offset, length, encoding) {
  if (offset === void 0) {
    encoding = "utf8";
    length = this.length;
    offset = 0;
  } else if (length === void 0 && typeof offset === "string") {
    encoding = offset;
    length = this.length;
    offset = 0;
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === void 0)
        encoding = "utf8";
    } else {
      encoding = length;
      length = void 0;
    }
  } else {
    throw new Error(
      "Buffer.write(string, encoding, offset[, length]) is no longer supported"
    );
  }
  var remaining = this.length - offset;
  if (length === void 0 || length > remaining)
    length = remaining;
  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError("Attempt to write outside buffer bounds");
  }
  if (!encoding)
    encoding = "utf8";
  var loweredCase = false;
  for (; ; ) {
    switch (encoding) {
      case "hex":
        return hexWrite(this, string, offset, length);
      case "utf8":
      case "utf-8":
        return utf8Write(this, string, offset, length);
      case "ascii":
        return asciiWrite(this, string, offset, length);
      case "latin1":
      case "binary":
        return latin1Write(this, string, offset, length);
      case "base64":
        return base64Write(this, string, offset, length);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return ucs2Write(this, string, offset, length);
      default:
        if (loweredCase)
          throw new TypeError("Unknown encoding: " + encoding);
        encoding = ("" + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};
Buffer2.prototype.toJSON = function toJSON() {
  return {
    type: "Buffer",
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};
function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray(buf);
  } else {
    return fromByteArray(buf.slice(start, end));
  }
}
function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 128) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 192) === 128) {
            tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
            if (tempCodePoint > 127) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
            tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
            if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
            tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
            if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
              codePoint = tempCodePoint;
            }
          }
      }
    }
    if (codePoint === null) {
      codePoint = 65533;
      bytesPerSequence = 1;
    } else if (codePoint > 65535) {
      codePoint -= 65536;
      res.push(codePoint >>> 10 & 1023 | 55296);
      codePoint = 56320 | codePoint & 1023;
    }
    res.push(codePoint);
    i += bytesPerSequence;
  }
  return decodeCodePointsArray(res);
}
var MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints);
  }
  var res = "";
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    );
  }
  return res;
}
function asciiSlice(buf, start, end) {
  var ret = "";
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 127);
  }
  return ret;
}
function latin1Slice(buf, start, end) {
  var ret = "";
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}
function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0)
    start = 0;
  if (!end || end < 0 || end > len)
    end = len;
  var out = "";
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}
function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = "";
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}
Buffer2.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === void 0 ? len : ~~end;
  if (start < 0) {
    start += len;
    if (start < 0)
      start = 0;
  } else if (start > len) {
    start = len;
  }
  if (end < 0) {
    end += len;
    if (end < 0)
      end = 0;
  } else if (end > len) {
    end = len;
  }
  if (end < start)
    end = start;
  var newBuf;
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer2.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer2(sliceLen, void 0);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }
  return newBuf;
};
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0)
    throw new RangeError("offset is not uint");
  if (offset + ext > length)
    throw new RangeError("Trying to access beyond buffer length");
}
Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
  offset = offset | 0;
  byteLength2 = byteLength2 | 0;
  if (!noAssert)
    checkOffset(offset, byteLength2, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength2 && (mul *= 256)) {
    val += this[offset + i] * mul;
  }
  return val;
};
Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
  offset = offset | 0;
  byteLength2 = byteLength2 | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength2, this.length);
  }
  var val = this[offset + --byteLength2];
  var mul = 1;
  while (byteLength2 > 0 && (mul *= 256)) {
    val += this[offset + --byteLength2] * mul;
  }
  return val;
};
Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length);
  return this[offset];
};
Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};
Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};
Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length);
  return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
  offset = offset | 0;
  byteLength2 = byteLength2 | 0;
  if (!noAssert)
    checkOffset(offset, byteLength2, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength2 && (mul *= 256)) {
    val += this[offset + i] * mul;
  }
  mul *= 128;
  if (val >= mul)
    val -= Math.pow(2, 8 * byteLength2);
  return val;
};
Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
  offset = offset | 0;
  byteLength2 = byteLength2 | 0;
  if (!noAssert)
    checkOffset(offset, byteLength2, this.length);
  var i = byteLength2;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 256)) {
    val += this[offset + --i] * mul;
  }
  mul *= 128;
  if (val >= mul)
    val -= Math.pow(2, 8 * byteLength2);
  return val;
};
Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length);
  if (!(this[offset] & 128))
    return this[offset];
  return (255 - this[offset] + 1) * -1;
};
Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 32768 ? val | 4294901760 : val;
};
Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 32768 ? val | 4294901760 : val;
};
Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4);
};
Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4);
};
Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8);
};
Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf))
    throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min)
    throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length)
    throw new RangeError("Index out of range");
}
Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength2 = byteLength2 | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
    checkInt(this, value, offset, byteLength2, maxBytes, 0);
  }
  var mul = 1;
  var i = 0;
  this[offset] = value & 255;
  while (++i < byteLength2 && (mul *= 256)) {
    this[offset + i] = value / mul & 255;
  }
  return offset + byteLength2;
};
Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength2 = byteLength2 | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
    checkInt(this, value, offset, byteLength2, maxBytes, 0);
  }
  var i = byteLength2 - 1;
  var mul = 1;
  this[offset + i] = value & 255;
  while (--i >= 0 && (mul *= 256)) {
    this[offset + i] = value / mul & 255;
  }
  return offset + byteLength2;
};
Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert)
    checkInt(this, value, offset, 1, 255, 0);
  if (!Buffer2.TYPED_ARRAY_SUPPORT)
    value = Math.floor(value);
  this[offset] = value & 255;
  return offset + 1;
};
function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0)
    value = 65535 + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}
Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert)
    checkInt(this, value, offset, 2, 65535, 0);
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};
Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert)
    checkInt(this, value, offset, 2, 65535, 0);
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};
function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0)
    value = 4294967295 + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
  }
}
Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert)
    checkInt(this, value, offset, 4, 4294967295, 0);
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};
Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert)
    checkInt(this, value, offset, 4, 4294967295, 0);
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};
Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength2 - 1);
    checkInt(this, value, offset, byteLength2, limit - 1, -limit);
  }
  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 255;
  while (++i < byteLength2 && (mul *= 256)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 255;
  }
  return offset + byteLength2;
};
Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength2 - 1);
    checkInt(this, value, offset, byteLength2, limit - 1, -limit);
  }
  var i = byteLength2 - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 255;
  while (--i >= 0 && (mul *= 256)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 255;
  }
  return offset + byteLength2;
};
Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert)
    checkInt(this, value, offset, 1, 127, -128);
  if (!Buffer2.TYPED_ARRAY_SUPPORT)
    value = Math.floor(value);
  if (value < 0)
    value = 255 + value + 1;
  this[offset] = value & 255;
  return offset + 1;
};
Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert)
    checkInt(this, value, offset, 2, 32767, -32768);
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};
Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert)
    checkInt(this, value, offset, 2, 32767, -32768);
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};
Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert)
    checkInt(this, value, offset, 4, 2147483647, -2147483648);
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};
Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert)
    checkInt(this, value, offset, 4, 2147483647, -2147483648);
  if (value < 0)
    value = 4294967295 + value + 1;
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length)
    throw new RangeError("Index out of range");
  if (offset < 0)
    throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }
  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}
Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};
Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }
  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}
Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};
Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};
Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start)
    start = 0;
  if (!end && end !== 0)
    end = this.length;
  if (targetStart >= target.length)
    targetStart = target.length;
  if (!targetStart)
    targetStart = 0;
  if (end > 0 && end < start)
    end = start;
  if (end === start)
    return 0;
  if (target.length === 0 || this.length === 0)
    return 0;
  if (targetStart < 0) {
    throw new RangeError("targetStart out of bounds");
  }
  if (start < 0 || start >= this.length)
    throw new RangeError("sourceStart out of bounds");
  if (end < 0)
    throw new RangeError("sourceEnd out of bounds");
  if (end > this.length)
    end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }
  var len = end - start;
  var i;
  if (this === target && start < targetStart && targetStart < end) {
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1e3 || !Buffer2.TYPED_ARRAY_SUPPORT) {
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    );
  }
  return len;
};
Buffer2.prototype.fill = function fill(val, start, end, encoding) {
  if (typeof val === "string") {
    if (typeof start === "string") {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === "string") {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== void 0 && typeof encoding !== "string") {
      throw new TypeError("encoding must be a string");
    }
    if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
      throw new TypeError("Unknown encoding: " + encoding);
    }
  } else if (typeof val === "number") {
    val = val & 255;
  }
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError("Out of range index");
  }
  if (end <= start) {
    return this;
  }
  start = start >>> 0;
  end = end === void 0 ? this.length : end >>> 0;
  if (!val)
    val = 0;
  var i;
  if (typeof val === "number") {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer2(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }
  return this;
};
var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
function base64clean(str) {
  str = stringtrim(str).replace(INVALID_BASE64_RE, "");
  if (str.length < 2)
    return "";
  while (str.length % 4 !== 0) {
    str = str + "=";
  }
  return str;
}
function stringtrim(str) {
  if (str.trim)
    return str.trim();
  return str.replace(/^\s+|\s+$/g, "");
}
function toHex(n) {
  if (n < 16)
    return "0" + n.toString(16);
  return n.toString(16);
}
function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];
  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);
    if (codePoint > 55295 && codePoint < 57344) {
      if (!leadSurrogate) {
        if (codePoint > 56319) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          continue;
        } else if (i + 1 === length) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          continue;
        }
        leadSurrogate = codePoint;
        continue;
      }
      if (codePoint < 56320) {
        if ((units -= 3) > -1)
          bytes.push(239, 191, 189);
        leadSurrogate = codePoint;
        continue;
      }
      codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
    } else if (leadSurrogate) {
      if ((units -= 3) > -1)
        bytes.push(239, 191, 189);
    }
    leadSurrogate = null;
    if (codePoint < 128) {
      if ((units -= 1) < 0)
        break;
      bytes.push(codePoint);
    } else if (codePoint < 2048) {
      if ((units -= 2) < 0)
        break;
      bytes.push(
        codePoint >> 6 | 192,
        codePoint & 63 | 128
      );
    } else if (codePoint < 65536) {
      if ((units -= 3) < 0)
        break;
      bytes.push(
        codePoint >> 12 | 224,
        codePoint >> 6 & 63 | 128,
        codePoint & 63 | 128
      );
    } else if (codePoint < 1114112) {
      if ((units -= 4) < 0)
        break;
      bytes.push(
        codePoint >> 18 | 240,
        codePoint >> 12 & 63 | 128,
        codePoint >> 6 & 63 | 128,
        codePoint & 63 | 128
      );
    } else {
      throw new Error("Invalid code point");
    }
  }
  return bytes;
}
function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    byteArray.push(str.charCodeAt(i) & 255);
  }
  return byteArray;
}
function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0)
      break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }
  return byteArray;
}
function base64ToBytes(str) {
  return toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length)
      break;
    dst[i + offset] = src[i];
  }
  return i;
}
function isnan(val) {
  return val !== val;
}
function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}
function isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
}
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isFastBuffer(obj.slice(0, 0));
}

// src/core/api_error.ts
var api_error_exports = {};
__export(api_error_exports, {
  ApiError: () => ApiError,
  ErrorCode: () => ErrorCode,
  ErrorStrings: () => ErrorStrings
});
var ErrorCode = /* @__PURE__ */ ((ErrorCode2) => {
  ErrorCode2[ErrorCode2["EPERM"] = 1] = "EPERM";
  ErrorCode2[ErrorCode2["ENOENT"] = 2] = "ENOENT";
  ErrorCode2[ErrorCode2["EIO"] = 5] = "EIO";
  ErrorCode2[ErrorCode2["EBADF"] = 9] = "EBADF";
  ErrorCode2[ErrorCode2["EACCES"] = 13] = "EACCES";
  ErrorCode2[ErrorCode2["EBUSY"] = 16] = "EBUSY";
  ErrorCode2[ErrorCode2["EEXIST"] = 17] = "EEXIST";
  ErrorCode2[ErrorCode2["ENOTDIR"] = 20] = "ENOTDIR";
  ErrorCode2[ErrorCode2["EISDIR"] = 21] = "EISDIR";
  ErrorCode2[ErrorCode2["EINVAL"] = 22] = "EINVAL";
  ErrorCode2[ErrorCode2["EFBIG"] = 27] = "EFBIG";
  ErrorCode2[ErrorCode2["ENOSPC"] = 28] = "ENOSPC";
  ErrorCode2[ErrorCode2["EROFS"] = 30] = "EROFS";
  ErrorCode2[ErrorCode2["ENOTEMPTY"] = 39] = "ENOTEMPTY";
  ErrorCode2[ErrorCode2["ENOTSUP"] = 95] = "ENOTSUP";
  return ErrorCode2;
})(ErrorCode || {});
var ErrorStrings = {};
ErrorStrings[1 /* EPERM */] = "Operation not permitted.";
ErrorStrings[2 /* ENOENT */] = "No such file or directory.";
ErrorStrings[5 /* EIO */] = "Input/output error.";
ErrorStrings[9 /* EBADF */] = "Bad file descriptor.";
ErrorStrings[13 /* EACCES */] = "Permission denied.";
ErrorStrings[16 /* EBUSY */] = "Resource busy or locked.";
ErrorStrings[17 /* EEXIST */] = "File exists.";
ErrorStrings[20 /* ENOTDIR */] = "File is not a directory.";
ErrorStrings[21 /* EISDIR */] = "File is a directory.";
ErrorStrings[22 /* EINVAL */] = "Invalid argument.";
ErrorStrings[27 /* EFBIG */] = "File is too big.";
ErrorStrings[28 /* ENOSPC */] = "No space left on disk.";
ErrorStrings[30 /* EROFS */] = "Cannot modify a read-only file system.";
ErrorStrings[39 /* ENOTEMPTY */] = "Directory is not empty.";
ErrorStrings[95 /* ENOTSUP */] = "Operation is not supported.";
var ApiError = class extends Error {
  /**
   * Represents a BrowserFS error. Passed back to applications after a failed
   * call to the BrowserFS API.
   *
   * Error codes mirror those returned by regular Unix file operations, which is
   * what Node returns.
   * @constructor ApiError
   * @param type The type of the error.
   * @param [message] A descriptive error message.
   */
  constructor(type, message = ErrorStrings[type], path) {
    super(message);
    // Unsupported.
    this.syscall = "";
    this.errno = type;
    this.code = ErrorCode[type];
    this.path = path;
    this.message = `Error: ${this.code}: ${message}${this.path ? `, '${this.path}'` : ""}`;
  }
  static fromJSON(json) {
    const err2 = new ApiError(json.errno, json.message, json.path);
    err2.code = json.code;
    err2.stack = json.stack;
    return err2;
  }
  /**
   * Creates an ApiError object from a buffer.
   */
  static fromBuffer(buffer, i = 0) {
    return ApiError.fromJSON(JSON.parse(buffer.toString("utf8", i + 4, i + 4 + buffer.readUInt32LE(i))));
  }
  static FileError(code, p) {
    return new ApiError(code, ErrorStrings[code], p);
  }
  static EACCES(path) {
    return this.FileError(13 /* EACCES */, path);
  }
  static ENOENT(path) {
    return this.FileError(2 /* ENOENT */, path);
  }
  static EEXIST(path) {
    return this.FileError(17 /* EEXIST */, path);
  }
  static EISDIR(path) {
    return this.FileError(21 /* EISDIR */, path);
  }
  static ENOTDIR(path) {
    return this.FileError(20 /* ENOTDIR */, path);
  }
  static EPERM(path) {
    return this.FileError(1 /* EPERM */, path);
  }
  static ENOTEMPTY(path) {
    return this.FileError(39 /* ENOTEMPTY */, path);
  }
  /**
   * @return A friendly error message.
   */
  toString() {
    return this.message;
  }
  toJSON() {
    return {
      errno: this.errno,
      code: this.code,
      path: this.path,
      stack: this.stack,
      message: this.message
    };
  }
  /**
   * Writes the API error into a buffer.
   */
  writeToBuffer(buffer = Buffer2.alloc(this.bufferSize()), i = 0) {
    const bytesWritten = buffer.write(JSON.stringify(this.toJSON()), i + 4);
    buffer.writeUInt32LE(bytesWritten, i);
    return buffer;
  }
  /**
   * The size of the API error in buffer-form in bytes.
   */
  bufferSize() {
    return 4 + Buffer2.byteLength(JSON.stringify(this.toJSON()));
  }
};

// src/core/file_flag.ts
var _FileFlag = class {
  /**
   * Get an object representing the given file flag.
   * @param modeStr The string representing the flag
   * @return The FileFlag object representing the flag
   * @throw when the flag string is invalid
   */
  static getFileFlag(flagStr) {
    if (!_FileFlag.flagCache.has(flagStr)) {
      _FileFlag.flagCache.set(flagStr, new _FileFlag(flagStr));
    }
    return _FileFlag.flagCache.get(flagStr);
  }
  /**
   * This should never be called directly.
   * @param modeStr The string representing the mode
   * @throw when the mode string is invalid
   */
  constructor(flagStr) {
    this.flagStr = flagStr;
    if (_FileFlag.validFlagStrs.indexOf(flagStr) < 0) {
      throw new ApiError(22 /* EINVAL */, "Invalid flag: " + flagStr);
    }
  }
  /**
   * Get the underlying flag string for this flag.
   */
  getFlagString() {
    return this.flagStr;
  }
  /**
   * Get the equivalent mode (0b0xxx: read, write, execute)
   * Note: Execute will always be 0
   */
  getMode() {
    let mode = 0;
    mode <<= 1;
    mode += +this.isReadable();
    mode <<= 1;
    mode += +this.isWriteable();
    mode <<= 1;
    return mode;
  }
  /**
   * Returns true if the file is readable.
   */
  isReadable() {
    return this.flagStr.indexOf("r") !== -1 || this.flagStr.indexOf("+") !== -1;
  }
  /**
   * Returns true if the file is writeable.
   */
  isWriteable() {
    return this.flagStr.indexOf("w") !== -1 || this.flagStr.indexOf("a") !== -1 || this.flagStr.indexOf("+") !== -1;
  }
  /**
   * Returns true if the file mode should truncate.
   */
  isTruncating() {
    return this.flagStr.indexOf("w") !== -1;
  }
  /**
   * Returns true if the file is appendable.
   */
  isAppendable() {
    return this.flagStr.indexOf("a") !== -1;
  }
  /**
   * Returns true if the file is open in synchronous mode.
   */
  isSynchronous() {
    return this.flagStr.indexOf("s") !== -1;
  }
  /**
   * Returns true if the file is open in exclusive mode.
   */
  isExclusive() {
    return this.flagStr.indexOf("x") !== -1;
  }
  /**
   * Returns one of the static fields on this object that indicates the
   * appropriate response to the path existing.
   */
  pathExistsAction() {
    if (this.isExclusive()) {
      return 1 /* THROW_EXCEPTION */;
    } else if (this.isTruncating()) {
      return 2 /* TRUNCATE_FILE */;
    } else {
      return 0 /* NOP */;
    }
  }
  /**
   * Returns one of the static fields on this object that indicates the
   * appropriate response to the path not existing.
   */
  pathNotExistsAction() {
    if ((this.isWriteable() || this.isAppendable()) && this.flagStr !== "r+") {
      return 3 /* CREATE_FILE */;
    } else {
      return 1 /* THROW_EXCEPTION */;
    }
  }
};
var FileFlag = _FileFlag;
// Contains cached FileMode instances.
FileFlag.flagCache = /* @__PURE__ */ new Map();
// Array of valid mode strings.
FileFlag.validFlagStrs = ["r", "r+", "rs", "rs+", "w", "wx", "w+", "wx+", "a", "ax", "a+", "ax+"];

// node-modules-polyfills:path
var path_exports = {};
__export(path_exports, {
  basename: () => basename,
  default: () => path_default,
  delimiter: () => delimiter,
  dirname: () => dirname,
  extname: () => extname,
  isAbsolute: () => isAbsolute,
  join: () => join,
  normalize: () => normalize,
  relative: () => relative,
  resolve: () => resolve,
  sep: () => sep
});
function normalizeArray(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === ".") {
      parts.splice(i, 1);
    } else if (last === "..") {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift("..");
    }
  }
  return parts;
}
var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};
function resolve() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = i >= 0 ? arguments[i] : "/";
    if (typeof path !== "string") {
      throw new TypeError("Arguments to path.resolve must be strings");
    } else if (!path) {
      continue;
    }
    resolvedPath = path + "/" + resolvedPath;
    resolvedAbsolute = path.charAt(0) === "/";
  }
  resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
    return !!p;
  }), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
}
function normalize(path) {
  var isPathAbsolute = isAbsolute(path), trailingSlash = substr(path, -1) === "/";
  path = normalizeArray(filter(path.split("/"), function(p) {
    return !!p;
  }), !isPathAbsolute).join("/");
  if (!path && !isPathAbsolute) {
    path = ".";
  }
  if (path && trailingSlash) {
    path += "/";
  }
  return (isPathAbsolute ? "/" : "") + path;
}
function isAbsolute(path) {
  return path.charAt(0) === "/";
}
function join() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return normalize(filter(paths, function(p, index) {
    if (typeof p !== "string") {
      throw new TypeError("Arguments to path.join must be strings");
    }
    return p;
  }).join("/"));
}
function relative(from2, to) {
  from2 = resolve(from2).substr(1);
  to = resolve(to).substr(1);
  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== "")
        break;
    }
    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== "")
        break;
    }
    if (start > end)
      return [];
    return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from2.split("/"));
  var toParts = trim(to.split("/"));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
}
var sep = "/";
var delimiter = ":";
function dirname(path) {
  var result = splitPath(path), root = result[0], dir = result[1];
  if (!root && !dir) {
    return ".";
  }
  if (dir) {
    dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
}
function basename(path, ext) {
  var f = splitPath(path)[2];
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
}
function extname(path) {
  return splitPath(path)[3];
}
var path_default = {
  extname,
  basename,
  dirname,
  sep,
  delimiter,
  relative,
  join,
  isAbsolute,
  normalize,
  resolve
};
function filter(xs, f) {
  if (xs.filter)
    return xs.filter(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (f(xs[i], i, xs))
      res.push(xs[i]);
  }
  return res;
}
var substr = "ab".substr(-1) === "b" ? function(str, start, len) {
  return str.substr(start, len);
} : function(str, start, len) {
  if (start < 0)
    start = str.length + start;
  return str.substr(start, len);
};

// src/core/cred.ts
var _Cred = class {
  constructor(uid, gid, suid, sgid, euid, egid) {
    this.uid = uid;
    this.gid = gid;
    this.suid = suid;
    this.sgid = sgid;
    this.euid = euid;
    this.egid = egid;
  }
};
var Cred = _Cred;
Cred.Root = new _Cred(0, 0, 0, 0, 0, 0);

// src/core/stats.ts
var Stats = class {
  /**
   * Provides information about a particular entry in the file system.
   * @param itemType Type of the item (FILE, DIRECTORY, SYMLINK, or SOCKET)
   * @param size Size of the item in bytes. For directories/symlinks,
   *   this is normally the size of the struct that represents the item.
   * @param mode Unix-style file mode (e.g. 0o644)
   * @param atimeMs time of last access, in milliseconds since epoch
   * @param mtimeMs time of last modification, in milliseconds since epoch
   * @param ctimeMs time of last time file status was changed, in milliseconds since epoch
   * @param uid the id of the user that owns the file
   * @param gid the id of the group that owns the file
   * @param birthtimeMs time of file creation, in milliseconds since epoch
   */
  constructor(itemType, size, mode, atimeMs, mtimeMs, ctimeMs, uid, gid, birthtimeMs) {
    /**
     * UNSUPPORTED ATTRIBUTES
     * I assume no one is going to need these details, although we could fake
     * appropriate values if need be.
     */
    // ID of device containing file
    this.dev = 0;
    // inode number
    this.ino = 0;
    // device ID (if special file)
    this.rdev = 0;
    // number of hard links
    this.nlink = 1;
    // blocksize for file system I/O
    this.blksize = 4096;
    // user ID of owner
    this.uid = 0;
    // group ID of owner
    this.gid = 0;
    // XXX: Some file systems stash data on stats objects.
    this.fileData = null;
    this.size = size;
    let currentTime = 0;
    if (typeof atimeMs !== "number") {
      currentTime = Date.now();
      atimeMs = currentTime;
    }
    if (typeof mtimeMs !== "number") {
      if (!currentTime) {
        currentTime = Date.now();
      }
      mtimeMs = currentTime;
    }
    if (typeof ctimeMs !== "number") {
      if (!currentTime) {
        currentTime = Date.now();
      }
      ctimeMs = currentTime;
    }
    if (typeof birthtimeMs !== "number") {
      if (!currentTime) {
        currentTime = Date.now();
      }
      birthtimeMs = currentTime;
    }
    if (typeof uid !== "number") {
      uid = 0;
    }
    if (typeof gid !== "number") {
      gid = 0;
    }
    this.atimeMs = atimeMs;
    this.ctimeMs = ctimeMs;
    this.mtimeMs = mtimeMs;
    this.birthtimeMs = birthtimeMs;
    if (!mode) {
      switch (itemType) {
        case 32768 /* FILE */:
          this.mode = 420;
          break;
        case 16384 /* DIRECTORY */:
        default:
          this.mode = 511;
      }
    } else {
      this.mode = mode;
    }
    this.blocks = Math.ceil(size / 512);
    if (this.mode < 4096) {
      this.mode |= itemType;
    }
  }
  static fromBuffer(buffer) {
    const size = buffer.readUInt32LE(0), mode = buffer.readUInt32LE(4), atime = buffer.readDoubleLE(8), mtime = buffer.readDoubleLE(16), ctime = buffer.readDoubleLE(24), uid = buffer.readUInt32LE(32), gid = buffer.readUInt32LE(36);
    return new Stats(mode & 61440, size, mode & 4095, atime, mtime, ctime, uid, gid);
  }
  /**
   * Clones the stats object.
   */
  static clone(s) {
    return new Stats(s.mode & 61440, s.size, s.mode & 4095, s.atimeMs, s.mtimeMs, s.ctimeMs, s.uid, s.gid, s.birthtimeMs);
  }
  get atime() {
    return new Date(this.atimeMs);
  }
  get mtime() {
    return new Date(this.mtimeMs);
  }
  get ctime() {
    return new Date(this.ctimeMs);
  }
  get birthtime() {
    return new Date(this.birthtimeMs);
  }
  toBuffer() {
    const buffer = Buffer2.alloc(32);
    buffer.writeUInt32LE(this.size, 0);
    buffer.writeUInt32LE(this.mode, 4);
    buffer.writeDoubleLE(this.atime.getTime(), 8);
    buffer.writeDoubleLE(this.mtime.getTime(), 16);
    buffer.writeDoubleLE(this.ctime.getTime(), 24);
    buffer.writeUInt32LE(this.uid, 32);
    buffer.writeUInt32LE(this.gid, 36);
    return buffer;
  }
  /**
   * @return [Boolean] True if this item is a file.
   */
  isFile() {
    return (this.mode & 61440) === 32768 /* FILE */;
  }
  /**
   * @return [Boolean] True if this item is a directory.
   */
  isDirectory() {
    return (this.mode & 61440) === 16384 /* DIRECTORY */;
  }
  /**
   * @return [Boolean] True if this item is a symbolic link (only valid through lstat)
   */
  isSymbolicLink() {
    return (this.mode & 61440) === 40960 /* SYMLINK */;
  }
  /**
   * Checks if a given user/group has access to this item
   * @param mode The request access as 4 bits (unused, read, write, execute)
   * @param uid The requesting UID
   * @param gid The requesting GID
   * @returns [Boolean] True if the request has access, false if the request does not
   */
  hasAccess(mode, cred) {
    if (cred.euid === 0 || cred.egid === 0) {
      return true;
    }
    const perms = this.mode & 4095;
    let uMode = 15, gMode = 15, wMode = 15;
    if (cred.euid == this.uid) {
      const uPerms = (3840 & perms) >> 8;
      uMode = (mode ^ uPerms) & mode;
    }
    if (cred.egid == this.gid) {
      const gPerms = (240 & perms) >> 4;
      gMode = (mode ^ gPerms) & mode;
    }
    const wPerms = 15 & perms;
    wMode = (mode ^ wPerms) & mode;
    const result = uMode & gMode & wMode;
    return !result;
  }
  /**
   * Convert the current stats object into a cred object
   */
  getCred(uid = this.uid, gid = this.gid) {
    return new Cred(uid, gid, this.uid, this.gid, uid, gid);
  }
  /**
   * Change the mode of the file. We use this helper function to prevent messing
   * up the type of the file, which is encoded in mode.
   */
  chmod(mode) {
    this.mode = this.mode & 61440 | mode;
  }
  /**
   * Change the owner user/group of the file.
   * This function makes sure it is a valid UID/GID (that is, a 32 unsigned int)
   */
  chown(uid, gid) {
    if (!isNaN(+uid) && 0 <= +uid && +uid < __pow(2, 32)) {
      this.uid = uid;
    }
    if (!isNaN(+gid) && 0 <= +gid && +gid < __pow(2, 32)) {
      this.gid = gid;
    }
  }
  // We don't support the following types of files.
  isSocket() {
    return false;
  }
  isBlockDevice() {
    return false;
  }
  isCharacterDevice() {
    return false;
  }
  isFIFO() {
    return false;
  }
};

// src/generic/setImmediate.ts
var bfsSetImmediate;
if (typeof setImmediate !== "undefined") {
  bfsSetImmediate = setImmediate;
} else {
  const gScope = globalThis;
  const timeouts = [];
  const messageName = "zero-timeout-message";
  const canUsePostMessage = function() {
    if (typeof gScope.importScripts !== "undefined" || !gScope.postMessage) {
      return false;
    }
    let postMessageIsAsync = true;
    const oldOnMessage = gScope.onmessage;
    gScope.onmessage = function() {
      postMessageIsAsync = false;
    };
    gScope.postMessage("", "*");
    gScope.onmessage = oldOnMessage;
    return postMessageIsAsync;
  };
  if (canUsePostMessage()) {
    bfsSetImmediate = function(fn) {
      timeouts.push(fn);
      gScope.postMessage(messageName, "*");
    };
    const handleMessage = function(event) {
      if (event.source === self && event.data === messageName) {
        if (event.stopPropagation) {
          event.stopPropagation();
        } else {
          event.cancelBubble = true;
        }
        if (timeouts.length > 0) {
          const fn = timeouts.shift();
          return fn();
        }
      }
    };
    if (gScope.addEventListener) {
      gScope.addEventListener("message", handleMessage, true);
    } else {
      gScope.attachEvent("onmessage", handleMessage);
    }
  } else if (gScope.MessageChannel) {
    const channel = new gScope.MessageChannel();
    channel.port1.onmessage = (event) => {
      if (timeouts.length > 0) {
        return timeouts.shift()();
      }
    };
    bfsSetImmediate = (fn) => {
      timeouts.push(fn);
      channel.port2.postMessage("");
    };
  } else {
    bfsSetImmediate = function(fn) {
      return setTimeout(fn, 0);
    };
  }
}
var setImmediate_default = bfsSetImmediate;

// src/core/FS.ts
var wrapCbHook = function(cb, numArgs) {
  return cb;
};
function wrapCb(cb, numArgs) {
  if (typeof cb !== "function") {
    throw new Error("Callback must be a function.");
  }
  const hookedCb = wrapCbHook(cb, numArgs);
  switch (numArgs) {
    case 1:
      return function(arg1) {
        setImmediate_default(function() {
          return hookedCb(arg1);
        });
      };
    case 2:
      return function(arg1, arg2) {
        setImmediate_default(function() {
          return hookedCb(arg1, arg2);
        });
      };
    case 3:
      return function(arg1, arg2, arg3) {
        setImmediate_default(function() {
          return hookedCb(arg1, arg2, arg3);
        });
      };
    default:
      throw new Error("Invalid invocation of wrapCb.");
  }
}
function assertRoot(fs2) {
  if (fs2) {
    return fs2;
  }
  throw new ApiError(5 /* EIO */, `Initialize BrowserFS with a file system using BrowserFS.initialize(filesystem)`);
}
function normalizeMode(mode, def) {
  switch (typeof mode) {
    case "number":
      return mode;
    case "string":
      const trueMode = parseInt(mode, 8);
      if (!isNaN(trueMode)) {
        return trueMode;
      }
      return def;
    default:
      return def;
  }
}
function normalizeTime(time) {
  if (time instanceof Date) {
    return time;
  } else if (typeof time === "number") {
    return new Date(time * 1e3);
  } else {
    throw new ApiError(22 /* EINVAL */, `Invalid time.`);
  }
}
function normalizePath(p) {
  if (p.indexOf("\0") >= 0) {
    throw new ApiError(22 /* EINVAL */, "Path must be a string without null bytes.");
  } else if (p === "") {
    throw new ApiError(22 /* EINVAL */, "Path must not be empty.");
  }
  return resolve(p);
}
function normalizeOptions(options, defEnc, defFlag, defMode) {
  switch (options === null ? "null" : typeof options) {
    case "object":
      return {
        encoding: typeof options["encoding"] !== "undefined" ? options["encoding"] : defEnc,
        flag: typeof options["flag"] !== "undefined" ? options["flag"] : defFlag,
        mode: normalizeMode(options["mode"], defMode)
      };
    case "string":
      return {
        encoding: options,
        flag: defFlag,
        mode: defMode
      };
    case "null":
    case "undefined":
    case "function":
      return {
        encoding: defEnc,
        flag: defFlag,
        mode: defMode
      };
    default:
      throw new TypeError(`"options" must be a string or an object, got ${typeof options} instead.`);
  }
}
function nopCb() {
}
var FS = class {
  constructor() {
    /* tslint:enable:variable-name */
    this.F_OK = 0;
    this.R_OK = 4;
    this.W_OK = 2;
    this.X_OK = 1;
    this.root = null;
    this.fdMap = {};
    this.nextFd = 100;
  }
  /**
   * Initializes the FS Modules with the given filesystem
   * @param rootFS the root filesystem of the FS
   * @param cred the credentials used for interacting with the FS
   * @returns
   */
  initialize(rootFS, cred) {
    if (!rootFS.constructor.isAvailable()) {
      throw new ApiError(22 /* EINVAL */, "Tried to instantiate BrowserFS with an unavailable file system.");
    }
    this.cred = cred;
    return this.root = rootFS;
  }
  /**
   * converts Date or number to a fractional UNIX timestamp
   * Grabbed from NodeJS sources (lib/fs.js)
   */
  _toUnixTimestamp(time) {
    if (typeof time === "number") {
      return time;
    } else if (time instanceof Date) {
      return time.getTime() / 1e3;
    }
    throw new Error("Cannot parse time: " + time);
  }
  /**
   * **NONSTANDARD**: Grab the FileSystem instance that backs this API.
   * @return [BrowserFS.FileSystem | null] Returns null if the file system has
   *   not been initialized.
   */
  getRootFS() {
    if (this.root) {
      return this.root;
    } else {
      return null;
    }
  }
  // FILE OR DIRECTORY METHODS
  /**
   * Asynchronous rename. No arguments other than a possible exception are given
   * to the completion callback.
   * @param oldPath
   * @param newPath
   * @param callback
   */
  rename(oldPath, newPath, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      assertRoot(this.root).rename(normalizePath(oldPath), normalizePath(newPath), this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous rename.
   * @param oldPath
   * @param newPath
   */
  renameSync(oldPath, newPath) {
    assertRoot(this.root).renameSync(normalizePath(oldPath), normalizePath(newPath), this.cred);
  }
  /**
   * Test whether or not the given path exists by checking with the file system.
   * Then call the callback argument with either true or false.
   * @example Sample invocation
   *   fs.exists('/etc/passwd', function (exists) {
   *     util.debug(exists ? "it's there" : "no passwd!");
   *   });
   * @param path
   * @param callback
   */
  exists(path, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      return assertRoot(this.root).exists(normalizePath(path), this.cred, newCb);
    } catch (e) {
      return newCb(false);
    }
  }
  /**
   * Test whether or not the given path exists by checking with the file system.
   * @param path
   * @return [boolean]
   */
  existsSync(path) {
    try {
      return assertRoot(this.root).existsSync(normalizePath(path), this.cred);
    } catch (e) {
      return false;
    }
  }
  /**
   * Asynchronous `stat`.
   * @param path
   * @param callback
   */
  stat(path, cb = nopCb) {
    const newCb = wrapCb(cb, 2);
    try {
      return assertRoot(this.root).stat(normalizePath(path), false, this.cred, newCb);
    } catch (e) {
      return newCb(e);
    }
  }
  /**
   * Synchronous `stat`.
   * @param path
   * @return [BrowserFS.node.fs.Stats]
   */
  statSync(path) {
    return assertRoot(this.root).statSync(normalizePath(path), false, this.cred);
  }
  /**
   * Asynchronous `lstat`.
   * `lstat()` is identical to `stat()`, except that if path is a symbolic link,
   * then the link itself is stat-ed, not the file that it refers to.
   * @param path
   * @param callback
   */
  lstat(path, cb = nopCb) {
    const newCb = wrapCb(cb, 2);
    try {
      return assertRoot(this.root).stat(normalizePath(path), true, this.cred, newCb);
    } catch (e) {
      return newCb(e);
    }
  }
  /**
   * Synchronous `lstat`.
   * `lstat()` is identical to `stat()`, except that if path is a symbolic link,
   * then the link itself is stat-ed, not the file that it refers to.
   * @param path
   * @return [BrowserFS.node.fs.Stats]
   */
  lstatSync(path) {
    return assertRoot(this.root).statSync(normalizePath(path), true, this.cred);
  }
  truncate(path, arg2 = 0, cb = nopCb) {
    let len = 0;
    if (typeof arg2 === "function") {
      cb = arg2;
    } else if (typeof arg2 === "number") {
      len = arg2;
    }
    const newCb = wrapCb(cb, 1);
    try {
      if (len < 0) {
        throw new ApiError(22 /* EINVAL */);
      }
      return assertRoot(this.root).truncate(normalizePath(path), len, this.cred, newCb);
    } catch (e) {
      return newCb(e);
    }
  }
  /**
   * Synchronous `truncate`.
   * @param path
   * @param len
   */
  truncateSync(path, len = 0) {
    if (len < 0) {
      throw new ApiError(22 /* EINVAL */);
    }
    return assertRoot(this.root).truncateSync(normalizePath(path), len, this.cred);
  }
  /**
   * Asynchronous `unlink`.
   * @param path
   * @param callback
   */
  unlink(path, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      return assertRoot(this.root).unlink(normalizePath(path), this.cred, newCb);
    } catch (e) {
      return newCb(e);
    }
  }
  /**
   * Synchronous `unlink`.
   * @param path
   */
  unlinkSync(path) {
    return assertRoot(this.root).unlinkSync(normalizePath(path), this.cred);
  }
  open(path, flag, arg2, cb = nopCb) {
    const mode = normalizeMode(arg2, 420);
    cb = typeof arg2 === "function" ? arg2 : cb;
    const newCb = wrapCb(cb, 2);
    try {
      assertRoot(this.root).open(normalizePath(path), FileFlag.getFileFlag(flag), mode, this.cred, (e, file) => {
        if (file) {
          newCb(e, this.getFdForFile(file));
        } else {
          newCb(e);
        }
      });
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous file open.
   * @see http://www.manpagez.com/man/2/open/
   * @param path
   * @param flags
   * @param mode defaults to `0644`
   * @return [BrowserFS.File]
   */
  openSync(path, flag, mode = 420) {
    return this.getFdForFile(assertRoot(this.root).openSync(normalizePath(path), FileFlag.getFileFlag(flag), normalizeMode(mode, 420), this.cred));
  }
  readFile(filename, arg2 = {}, cb = nopCb) {
    const options = normalizeOptions(arg2, null, "r", null);
    cb = typeof arg2 === "function" ? arg2 : cb;
    const newCb = wrapCb(cb, 2);
    try {
      const flag = FileFlag.getFileFlag(options["flag"]);
      if (!flag.isReadable()) {
        return newCb(new ApiError(22 /* EINVAL */, "Flag passed to readFile must allow for reading."));
      }
      return assertRoot(this.root).readFile(normalizePath(filename), options.encoding, flag, this.cred, newCb);
    } catch (e) {
      return newCb(e);
    }
  }
  readFileSync(filename, arg2 = {}) {
    const options = normalizeOptions(arg2, null, "r", null);
    const flag = FileFlag.getFileFlag(options.flag);
    if (!flag.isReadable()) {
      throw new ApiError(22 /* EINVAL */, "Flag passed to readFile must allow for reading.");
    }
    return assertRoot(this.root).readFileSync(normalizePath(filename), options.encoding, flag, this.cred);
  }
  writeFile(filename, data, arg3 = {}, cb = nopCb) {
    const options = normalizeOptions(arg3, "utf8", "w", 420);
    cb = typeof arg3 === "function" ? arg3 : cb;
    const newCb = wrapCb(cb, 1);
    try {
      const flag = FileFlag.getFileFlag(options.flag);
      if (!flag.isWriteable()) {
        return newCb(new ApiError(22 /* EINVAL */, "Flag passed to writeFile must allow for writing."));
      }
      return assertRoot(this.root).writeFile(normalizePath(filename), data, options.encoding, flag, options.mode, this.cred, newCb);
    } catch (e) {
      return newCb(e);
    }
  }
  writeFileSync(filename, data, arg3) {
    const options = normalizeOptions(arg3, "utf8", "w", 420);
    const flag = FileFlag.getFileFlag(options.flag);
    if (!flag.isWriteable()) {
      throw new ApiError(22 /* EINVAL */, "Flag passed to writeFile must allow for writing.");
    }
    return assertRoot(this.root).writeFileSync(normalizePath(filename), data, options.encoding, flag, options.mode, this.cred);
  }
  appendFile(filename, data, arg3, cb = nopCb) {
    const options = normalizeOptions(arg3, "utf8", "a", 420);
    cb = typeof arg3 === "function" ? arg3 : cb;
    const newCb = wrapCb(cb, 1);
    try {
      const flag = FileFlag.getFileFlag(options.flag);
      if (!flag.isAppendable()) {
        return newCb(new ApiError(22 /* EINVAL */, "Flag passed to appendFile must allow for appending."));
      }
      assertRoot(this.root).appendFile(normalizePath(filename), data, options.encoding, flag, options.mode, this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  appendFileSync(filename, data, arg3) {
    const options = normalizeOptions(arg3, "utf8", "a", 420);
    const flag = FileFlag.getFileFlag(options.flag);
    if (!flag.isAppendable()) {
      throw new ApiError(22 /* EINVAL */, "Flag passed to appendFile must allow for appending.");
    }
    return assertRoot(this.root).appendFileSync(normalizePath(filename), data, options.encoding, flag, options.mode, this.cred);
  }
  // FILE DESCRIPTOR METHODS
  /**
   * Asynchronous `fstat`.
   * `fstat()` is identical to `stat()`, except that the file to be stat-ed is
   * specified by the file descriptor `fd`.
   * @param fd
   * @param callback
   */
  fstat(fd, cb = nopCb) {
    const newCb = wrapCb(cb, 2);
    try {
      const file = this.fd2file(fd);
      file.stat(newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `fstat`.
   * `fstat()` is identical to `stat()`, except that the file to be stat-ed is
   * specified by the file descriptor `fd`.
   * @param fd
   * @return [BrowserFS.node.fs.Stats]
   */
  fstatSync(fd) {
    return this.fd2file(fd).statSync();
  }
  /**
   * Asynchronous close.
   * @param fd
   * @param callback
   */
  close(fd, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      this.fd2file(fd).close((e) => {
        if (!e) {
          this.closeFd(fd);
        }
        newCb(e);
      });
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous close.
   * @param fd
   */
  closeSync(fd) {
    this.fd2file(fd).closeSync();
    this.closeFd(fd);
  }
  ftruncate(fd, arg2, cb = nopCb) {
    const length = typeof arg2 === "number" ? arg2 : 0;
    cb = typeof arg2 === "function" ? arg2 : cb;
    const newCb = wrapCb(cb, 1);
    try {
      const file = this.fd2file(fd);
      if (length < 0) {
        throw new ApiError(22 /* EINVAL */);
      }
      file.truncate(length, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous ftruncate.
   * @param fd
   * @param len
   */
  ftruncateSync(fd, len = 0) {
    const file = this.fd2file(fd);
    if (len < 0) {
      throw new ApiError(22 /* EINVAL */);
    }
    file.truncateSync(len);
  }
  /**
   * Asynchronous fsync.
   * @param fd
   * @param callback
   */
  fsync(fd, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      this.fd2file(fd).sync(newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous fsync.
   * @param fd
   */
  fsyncSync(fd) {
    this.fd2file(fd).syncSync();
  }
  /**
   * Asynchronous fdatasync.
   * @param fd
   * @param callback
   */
  fdatasync(fd, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      this.fd2file(fd).datasync(newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous fdatasync.
   * @param fd
   */
  fdatasyncSync(fd) {
    this.fd2file(fd).datasyncSync();
  }
  write(fd, arg2, arg3, arg4, arg5, cb = nopCb) {
    let buffer, offset, length, position = null;
    if (typeof arg2 === "string") {
      let encoding = "utf8";
      switch (typeof arg3) {
        case "function":
          cb = arg3;
          break;
        case "number":
          position = arg3;
          encoding = typeof arg4 === "string" ? arg4 : "utf8";
          cb = typeof arg5 === "function" ? arg5 : cb;
          break;
        default:
          cb = typeof arg4 === "function" ? arg4 : typeof arg5 === "function" ? arg5 : cb;
          return cb(new ApiError(22 /* EINVAL */, "Invalid arguments."));
      }
      buffer = Buffer2.from(arg2, encoding);
      offset = 0;
      length = buffer.length;
    } else {
      buffer = arg2;
      offset = arg3;
      length = arg4;
      position = typeof arg5 === "number" ? arg5 : null;
      cb = typeof arg5 === "function" ? arg5 : cb;
    }
    const newCb = wrapCb(cb, 3);
    try {
      const file = this.fd2file(fd);
      if (position === void 0 || position === null) {
        position = file.getPos();
      }
      file.write(buffer, offset, length, position, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  writeSync(fd, arg2, arg3, arg4, arg5) {
    let buffer, offset = 0, length, position;
    if (typeof arg2 === "string") {
      position = typeof arg3 === "number" ? arg3 : null;
      const encoding = typeof arg4 === "string" ? arg4 : "utf8";
      offset = 0;
      buffer = Buffer2.from(arg2, encoding);
      length = buffer.length;
    } else {
      buffer = arg2;
      offset = arg3;
      length = arg4;
      position = typeof arg5 === "number" ? arg5 : null;
    }
    const file = this.fd2file(fd);
    if (position === void 0 || position === null) {
      position = file.getPos();
    }
    return file.writeSync(buffer, offset, length, position);
  }
  read(fd, arg2, arg3, arg4, arg5, cb = nopCb) {
    let position, offset, length, buffer, newCb;
    if (typeof arg2 === "number") {
      length = arg2;
      position = arg3;
      const encoding = arg4;
      cb = typeof arg5 === "function" ? arg5 : cb;
      offset = 0;
      buffer = Buffer2.alloc(length);
      newCb = wrapCb((err2, bytesRead, buf) => {
        if (err2) {
          return cb(err2);
        }
        cb(err2, buf.toString(encoding), bytesRead);
      }, 3);
    } else {
      buffer = arg2;
      offset = arg3;
      length = arg4;
      position = arg5;
      newCb = wrapCb(cb, 3);
    }
    try {
      const file = this.fd2file(fd);
      if (position === void 0 || position === null) {
        position = file.getPos();
      }
      file.read(buffer, offset, length, position, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  readSync(fd, arg2, arg3, arg4, arg5) {
    let shenanigans = false;
    let buffer, offset, length, position, encoding = "utf8";
    if (typeof arg2 === "number") {
      length = arg2;
      position = arg3;
      encoding = arg4;
      offset = 0;
      buffer = Buffer2.alloc(length);
      shenanigans = true;
    } else {
      buffer = arg2;
      offset = arg3;
      length = arg4;
      position = arg5;
    }
    const file = this.fd2file(fd);
    if (position === void 0 || position === null) {
      position = file.getPos();
    }
    const rv = file.readSync(buffer, offset, length, position);
    if (!shenanigans) {
      return rv;
    } else {
      return [buffer.toString(encoding), rv];
    }
  }
  /**
   * Asynchronous `fchown`.
   * @param fd
   * @param uid
   * @param gid
   * @param callback
   */
  fchown(fd, uid, gid, callback = nopCb) {
    const newCb = wrapCb(callback, 1);
    try {
      this.fd2file(fd).chown(uid, gid, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `fchown`.
   * @param fd
   * @param uid
   * @param gid
   */
  fchownSync(fd, uid, gid) {
    this.fd2file(fd).chownSync(uid, gid);
  }
  /**
   * Asynchronous `fchmod`.
   * @param fd
   * @param mode
   * @param callback
   */
  fchmod(fd, mode, cb) {
    const newCb = wrapCb(cb, 1);
    try {
      const numMode = typeof mode === "string" ? parseInt(mode, 8) : mode;
      this.fd2file(fd).chmod(numMode, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `fchmod`.
   * @param fd
   * @param mode
   */
  fchmodSync(fd, mode) {
    const numMode = typeof mode === "string" ? parseInt(mode, 8) : mode;
    this.fd2file(fd).chmodSync(numMode);
  }
  /**
   * Change the file timestamps of a file referenced by the supplied file
   * descriptor.
   * @param fd
   * @param atime
   * @param mtime
   * @param callback
   */
  futimes(fd, atime, mtime, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      const file = this.fd2file(fd);
      if (typeof atime === "number") {
        atime = new Date(atime * 1e3);
      }
      if (typeof mtime === "number") {
        mtime = new Date(mtime * 1e3);
      }
      file.utimes(atime, mtime, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Change the file timestamps of a file referenced by the supplied file
   * descriptor.
   * @param fd
   * @param atime
   * @param mtime
   */
  futimesSync(fd, atime, mtime) {
    this.fd2file(fd).utimesSync(normalizeTime(atime), normalizeTime(mtime));
  }
  // DIRECTORY-ONLY METHODS
  /**
   * Asynchronous `rmdir`.
   * @param path
   * @param callback
   */
  rmdir(path, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      path = normalizePath(path);
      assertRoot(this.root).rmdir(path, this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `rmdir`.
   * @param path
   */
  rmdirSync(path) {
    path = normalizePath(path);
    return assertRoot(this.root).rmdirSync(path, this.cred);
  }
  /**
   * Asynchronous `mkdir`.
   * @param path
   * @param mode defaults to `0777`
   * @param callback
   */
  mkdir(path, mode, cb = nopCb) {
    if (typeof mode === "function") {
      cb = mode;
      mode = 511;
    }
    const newCb = wrapCb(cb, 1);
    try {
      path = normalizePath(path);
      assertRoot(this.root).mkdir(path, mode, this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `mkdir`.
   * @param path
   * @param mode defaults to `0777`
   */
  mkdirSync(path, mode) {
    assertRoot(this.root).mkdirSync(normalizePath(path), normalizeMode(mode, 511), this.cred);
  }
  /**
   * Asynchronous `readdir`. Reads the contents of a directory.
   * The callback gets two arguments `(err, files)` where `files` is an array of
   * the names of the files in the directory excluding `'.'` and `'..'`.
   * @param path
   * @param callback
   */
  readdir(path, cb = nopCb) {
    const newCb = wrapCb(cb, 2);
    try {
      path = normalizePath(path);
      assertRoot(this.root).readdir(path, this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `readdir`. Reads the contents of a directory.
   * @param path
   * @return [String[]]
   */
  readdirSync(path) {
    path = normalizePath(path);
    return assertRoot(this.root).readdirSync(path, this.cred);
  }
  // SYMLINK METHODS
  /**
   * Asynchronous `link`.
   * @param srcpath
   * @param dstpath
   * @param callback
   */
  link(srcpath, dstpath, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      srcpath = normalizePath(srcpath);
      dstpath = normalizePath(dstpath);
      assertRoot(this.root).link(srcpath, dstpath, this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `link`.
   * @param srcpath
   * @param dstpath
   */
  linkSync(srcpath, dstpath) {
    srcpath = normalizePath(srcpath);
    dstpath = normalizePath(dstpath);
    return assertRoot(this.root).linkSync(srcpath, dstpath, this.cred);
  }
  symlink(srcpath, dstpath, arg3, cb = nopCb) {
    const type = typeof arg3 === "string" ? arg3 : "file";
    cb = typeof arg3 === "function" ? arg3 : cb;
    const newCb = wrapCb(cb, 1);
    try {
      if (type !== "file" && type !== "dir") {
        return newCb(new ApiError(22 /* EINVAL */, "Invalid type: " + type));
      }
      srcpath = normalizePath(srcpath);
      dstpath = normalizePath(dstpath);
      assertRoot(this.root).symlink(srcpath, dstpath, type, this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `symlink`.
   * @param srcpath
   * @param dstpath
   * @param type can be either `'dir'` or `'file'` (default is `'file'`)
   */
  symlinkSync(srcpath, dstpath, type) {
    if (!type) {
      type = "file";
    } else if (type !== "file" && type !== "dir") {
      throw new ApiError(22 /* EINVAL */, "Invalid type: " + type);
    }
    srcpath = normalizePath(srcpath);
    dstpath = normalizePath(dstpath);
    return assertRoot(this.root).symlinkSync(srcpath, dstpath, type, this.cred);
  }
  /**
   * Asynchronous readlink.
   * @param path
   * @param callback
   */
  readlink(path, cb = nopCb) {
    const newCb = wrapCb(cb, 2);
    try {
      path = normalizePath(path);
      assertRoot(this.root).readlink(path, this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous readlink.
   * @param path
   * @return [String]
   */
  readlinkSync(path) {
    path = normalizePath(path);
    return assertRoot(this.root).readlinkSync(path, this.cred);
  }
  // PROPERTY OPERATIONS
  /**
   * Asynchronous `chown`.
   * @param path
   * @param uid
   * @param gid
   * @param callback
   */
  chown(path, uid, gid, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      path = normalizePath(path);
      assertRoot(this.root).chown(path, false, uid, gid, this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `chown`.
   * @param path
   * @param uid
   * @param gid
   */
  chownSync(path, uid, gid) {
    path = normalizePath(path);
    assertRoot(this.root).chownSync(path, false, uid, gid, this.cred);
  }
  /**
   * Asynchronous `lchown`.
   * @param path
   * @param uid
   * @param gid
   * @param callback
   */
  lchown(path, uid, gid, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      path = normalizePath(path);
      assertRoot(this.root).chown(path, true, uid, gid, this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `lchown`.
   * @param path
   * @param uid
   * @param gid
   */
  lchownSync(path, uid, gid) {
    path = normalizePath(path);
    assertRoot(this.root).chownSync(path, true, uid, gid, this.cred);
  }
  /**
   * Asynchronous `chmod`.
   * @param path
   * @param mode
   * @param callback
   */
  chmod(path, mode, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      const numMode = normalizeMode(mode, -1);
      if (numMode < 0) {
        throw new ApiError(22 /* EINVAL */, `Invalid mode.`);
      }
      assertRoot(this.root).chmod(normalizePath(path), false, numMode, this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `chmod`.
   * @param path
   * @param mode
   */
  chmodSync(path, mode) {
    const numMode = normalizeMode(mode, -1);
    if (numMode < 0) {
      throw new ApiError(22 /* EINVAL */, `Invalid mode.`);
    }
    path = normalizePath(path);
    assertRoot(this.root).chmodSync(path, false, numMode, this.cred);
  }
  /**
   * Asynchronous `lchmod`.
   * @param path
   * @param mode
   * @param callback
   */
  lchmod(path, mode, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      const numMode = normalizeMode(mode, -1);
      if (numMode < 0) {
        throw new ApiError(22 /* EINVAL */, `Invalid mode.`);
      }
      assertRoot(this.root).chmod(normalizePath(path), true, numMode, this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `lchmod`.
   * @param path
   * @param mode
   */
  lchmodSync(path, mode) {
    const numMode = normalizeMode(mode, -1);
    if (numMode < 1) {
      throw new ApiError(22 /* EINVAL */, `Invalid mode.`);
    }
    assertRoot(this.root).chmodSync(normalizePath(path), true, numMode, this.cred);
  }
  /**
   * Change file timestamps of the file referenced by the supplied path.
   * @param path
   * @param atime
   * @param mtime
   * @param callback
   */
  utimes(path, atime, mtime, cb = nopCb) {
    const newCb = wrapCb(cb, 1);
    try {
      assertRoot(this.root).utimes(normalizePath(path), normalizeTime(atime), normalizeTime(mtime), this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Change file timestamps of the file referenced by the supplied path.
   * @param path
   * @param atime
   * @param mtime
   */
  utimesSync(path, atime, mtime) {
    assertRoot(this.root).utimesSync(normalizePath(path), normalizeTime(atime), normalizeTime(mtime), this.cred);
  }
  realpath(path, arg2, cb = nopCb) {
    const cache = typeof arg2 === "object" ? arg2 : {};
    cb = typeof arg2 === "function" ? arg2 : nopCb;
    const newCb = wrapCb(cb, 2);
    try {
      path = normalizePath(path);
      assertRoot(this.root).realpath(path, cache, this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `realpath`.
   * @param path
   * @param cache An object literal of mapped paths that can be used to
   *   force a specific path resolution or avoid additional `fs.stat` calls for
   *   known real paths.
   * @return [String]
   */
  realpathSync(path, cache = {}) {
    path = normalizePath(path);
    return assertRoot(this.root).realpathSync(path, cache, this.cred);
  }
  watchFile(filename, arg2, listener = nopCb) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  unwatchFile(filename, listener = nopCb) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  watch(filename, arg2, listener = nopCb) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  access(path, arg2, callback = nopCb) {
    const mode = typeof arg2 === "number" ? arg2 : 4 /* READ */;
    callback = typeof arg2 === "function" ? arg2 : nopCb;
    const newCb = wrapCb(callback, 2);
    try {
      path = normalizePath(path);
      assertRoot(this.root).access(path, mode, this.cred, newCb);
    } catch (e) {
      newCb(e);
    }
  }
  /**
   * Synchronous `access`.
   * @param path
   * @param mode
   */
  accessSync(path, mode = 384) {
    path = normalizePath(path);
    return assertRoot(this.root).accessSync(path, mode, this.cred);
  }
  createReadStream(path, options) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  createWriteStream(path, options) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  /**
   * For unit testing. Passes all incoming callbacks to cbWrapper for wrapping.
   */
  wrapCallbacks(cbWrapper) {
    wrapCbHook = cbWrapper;
  }
  getFdForFile(file) {
    const fd = this.nextFd++;
    this.fdMap[fd] = file;
    return fd;
  }
  fd2file(fd) {
    const rv = this.fdMap[fd];
    if (rv) {
      return rv;
    } else {
      throw new ApiError(9 /* EBADF */, "Invalid file descriptor.");
    }
  }
  closeFd(fd) {
    delete this.fdMap[fd];
  }
};
/* tslint:disable:variable-name */
// Exported fs.Stats.
FS.Stats = Stats;

// src/core/node_fs.ts
var fs = new FS();
var _fsMock = {};
for (const key of Object.getOwnPropertyNames(FS.prototype)) {
  if (typeof fs[key] === "function") {
    _fsMock[key] = function(...args) {
      return fs[key].apply(fs, args);
    };
  } else {
    _fsMock[key] = fs[key];
  }
}
_fsMock.changeFSModule = function(newFs) {
  fs = newFs;
};
_fsMock.getFSModule = function() {
  return fs;
};
_fsMock.FS = FS;
_fsMock.Stats = FS.Stats;
var node_fs_default = _fsMock;

// src/core/util.ts
var util_exports = {};
__export(util_exports, {
  arrayBuffer2Buffer: () => arrayBuffer2Buffer,
  buffer2ArrayBuffer: () => buffer2ArrayBuffer,
  buffer2Uint8array: () => buffer2Uint8array,
  bufferValidator: () => bufferValidator,
  checkOptions: () => checkOptions,
  copyingSlice: () => copyingSlice,
  deprecationMessage: () => deprecationMessage,
  emptyBuffer: () => emptyBuffer,
  fail: () => fail,
  isIE: () => isIE,
  isWebWorker: () => isWebWorker,
  mkdirpSync: () => mkdirpSync,
  uint8Array2Buffer: () => uint8Array2Buffer
});

// src/core/levenshtein.ts
function _min(d0, d1, d2, bx, ay) {
  return d0 < d1 || d2 < d1 ? d0 > d2 ? d2 + 1 : d0 + 1 : bx === ay ? d1 : d1 + 1;
}
function levenshtein(a, b) {
  if (a === b) {
    return 0;
  }
  if (a.length > b.length) {
    const tmp = a;
    a = b;
    b = tmp;
  }
  let la = a.length;
  let lb = b.length;
  while (la > 0 && a.charCodeAt(la - 1) === b.charCodeAt(lb - 1)) {
    la--;
    lb--;
  }
  let offset = 0;
  while (offset < la && a.charCodeAt(offset) === b.charCodeAt(offset)) {
    offset++;
  }
  la -= offset;
  lb -= offset;
  if (la === 0 || lb === 1) {
    return lb;
  }
  const vector = new Array(la << 1);
  for (let y = 0; y < la; ) {
    vector[la + y] = a.charCodeAt(offset + y);
    vector[y] = ++y;
  }
  let x;
  let d0;
  let d1;
  let d2;
  let d3;
  for (x = 0; x + 3 < lb; ) {
    const bx0 = b.charCodeAt(offset + (d0 = x));
    const bx1 = b.charCodeAt(offset + (d1 = x + 1));
    const bx2 = b.charCodeAt(offset + (d2 = x + 2));
    const bx3 = b.charCodeAt(offset + (d3 = x + 3));
    let dd2 = x += 4;
    for (let y = 0; y < la; ) {
      const ay = vector[la + y];
      const dy = vector[y];
      d0 = _min(dy, d0, d1, bx0, ay);
      d1 = _min(d0, d1, d2, bx1, ay);
      d2 = _min(d1, d2, d3, bx2, ay);
      dd2 = _min(d2, d3, dd2, bx3, ay);
      vector[y++] = dd2;
      d3 = d2;
      d2 = d1;
      d1 = d0;
      d0 = dy;
    }
  }
  let dd = 0;
  for (; x < lb; ) {
    const bx0 = b.charCodeAt(offset + (d0 = x));
    dd = ++x;
    for (let y = 0; y < la; y++) {
      const dy = vector[y];
      vector[y] = dd = dy < d0 || dd < d0 ? dy > dd ? dd + 1 : dy + 1 : bx0 === vector[la + y] ? d0 : d0 + 1;
      d0 = dy;
    }
  }
  return dd;
}

// src/core/util.ts
function deprecationMessage(print, fsName, opts) {
  if (print) {
    console.warn(
      `[${fsName}] Direct file system constructor usage is deprecated for this file system, and will be removed in the next major version. Please use the '${fsName}.Create(${JSON.stringify(
        opts
      )}, callback)' method instead. See https://github.com/jvilk/BrowserFS/issues/176 for more details.`
    );
  }
}
var isIE = typeof navigator !== "undefined" && !!(/(msie) ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || navigator.userAgent.indexOf("Trident") !== -1);
var isWebWorker = typeof window === "undefined";
function fail() {
  throw new Error("BFS has reached an impossible code path; please file a bug.");
}
function mkdirpSync(p, mode, cred, fs2) {
  if (!fs2.existsSync(p, cred)) {
    mkdirpSync(dirname(p), mode, cred, fs2);
    fs2.mkdirSync(p, mode, cred);
  }
}
function buffer2ArrayBuffer(buff) {
  const u8 = buffer2Uint8array(buff), u8offset = u8.byteOffset, u8Len = u8.byteLength;
  if (u8offset === 0 && u8Len === u8.buffer.byteLength) {
    return u8.buffer;
  } else {
    return u8.buffer.slice(u8offset, u8offset + u8Len);
  }
}
function buffer2Uint8array(buff) {
  if (buff instanceof Uint8Array) {
    return buff;
  } else {
    return new Uint8Array(buff);
  }
}
function uint8Array2Buffer(u8) {
  if (u8 instanceof Buffer2) {
    return u8;
  } else if (u8.byteOffset === 0 && u8.byteLength === u8.buffer.byteLength) {
    return arrayBuffer2Buffer(u8.buffer);
  } else {
    return Buffer2.from(u8.buffer, u8.byteOffset, u8.byteLength);
  }
}
function arrayBuffer2Buffer(ab) {
  return Buffer2.from(ab);
}
function copyingSlice(buff, start = 0, end = buff.length) {
  if (start < 0 || end < 0 || end > buff.length || start > end) {
    throw new TypeError(`Invalid slice bounds on buffer of length ${buff.length}: [${start}, ${end}]`);
  }
  if (buff.length === 0) {
    return emptyBuffer();
  } else {
    const u8 = buffer2Uint8array(buff), s0 = buff[0], newS0 = (s0 + 1) % 255;
    buff[0] = newS0;
    if (u8[0] === newS0) {
      u8[0] = s0;
      return uint8Array2Buffer(u8.slice(start, end));
    } else {
      buff[0] = s0;
      return uint8Array2Buffer(u8.subarray(start, end));
    }
  }
}
var emptyBuff = null;
function emptyBuffer() {
  if (emptyBuff) {
    return emptyBuff;
  }
  return emptyBuff = Buffer2.alloc(0);
}
function bufferValidator(v, cb) {
  if (Buffer2.isBuffer(v)) {
    cb();
  } else {
    cb(new ApiError(22 /* EINVAL */, `option must be a Buffer.`));
  }
}
function checkOptions(fsType, opts, cb) {
  const optsInfo = fsType.Options;
  const fsName = fsType.Name;
  let pendingValidators = 0;
  let callbackCalled = false;
  let loopEnded = false;
  function validatorCallback(e) {
    if (!callbackCalled) {
      if (e) {
        callbackCalled = true;
        cb(e);
      }
      pendingValidators--;
      if (pendingValidators === 0 && loopEnded) {
        cb();
      }
    }
  }
  for (const optName in optsInfo) {
    if (Object.prototype.hasOwnProperty.call(optsInfo, optName)) {
      const opt = optsInfo[optName];
      const providedValue = opts && opts[optName];
      if (providedValue === void 0 || providedValue === null) {
        if (!opt.optional) {
          const incorrectOptions = Object.keys(opts).filter((o) => !(o in optsInfo)).map((a) => {
            return { str: a, distance: levenshtein(optName, a) };
          }).filter((o) => o.distance < 5).sort((a, b) => a.distance - b.distance);
          if (callbackCalled) {
            return;
          }
          callbackCalled = true;
          return cb(
            new ApiError(
              22 /* EINVAL */,
              `[${fsName}] Required option '${optName}' not provided.${incorrectOptions.length > 0 ? ` You provided unrecognized option '${incorrectOptions[0].str}'; perhaps you meant to type '${optName}'.` : ""}
Option description: ${opt.description}`
            )
          );
        }
      } else {
        let typeMatches = false;
        if (Array.isArray(opt.type)) {
          typeMatches = opt.type.indexOf(typeof providedValue) !== -1;
        } else {
          typeMatches = typeof providedValue === opt.type;
        }
        if (!typeMatches) {
          if (callbackCalled) {
            return;
          }
          callbackCalled = true;
          return cb(
            new ApiError(
              22 /* EINVAL */,
              `[${fsName}] Value provided for option ${optName} is not the proper type. Expected ${Array.isArray(opt.type) ? `one of {${opt.type.join(", ")}}` : opt.type}, but received ${typeof providedValue}
Option description: ${opt.description}`
            )
          );
        } else if (opt.validator) {
          pendingValidators++;
          opt.validator(providedValue, validatorCallback);
        }
      }
    }
  }
  loopEnded = true;
  if (pendingValidators === 0 && !callbackCalled) {
    cb();
  }
}

// src/generic/emscripten_fs.ts
var BFSEmscriptenStreamOps = class {
  constructor(fs2) {
    this.fs = fs2;
    this.nodefs = fs2.getNodeFS();
    this.FS = fs2.getFS();
    this.PATH = fs2.getPATH();
    this.ERRNO_CODES = fs2.getERRNO_CODES();
  }
  open(stream) {
    const path = this.fs.realPath(stream.node);
    const FS2 = this.FS;
    try {
      if (FS2.isFile(stream.node.mode)) {
        stream.nfd = this.nodefs.openSync(path, this.fs.flagsToPermissionString(stream.flags));
      }
    } catch (e) {
      if (!e.code) {
        throw e;
      }
      throw new FS2.ErrnoError(this.ERRNO_CODES[e.code]);
    }
  }
  close(stream) {
    const FS2 = this.FS;
    try {
      if (FS2.isFile(stream.node.mode) && stream.nfd) {
        this.nodefs.closeSync(stream.nfd);
      }
    } catch (e) {
      if (!e.code) {
        throw e;
      }
      throw new FS2.ErrnoError(this.ERRNO_CODES[e.code]);
    }
  }
  read(stream, buffer, offset, length, position) {
    try {
      return this.nodefs.readSync(stream.nfd, uint8Array2Buffer(buffer), offset, length, position);
    } catch (e) {
      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
    }
  }
  write(stream, buffer, offset, length, position) {
    try {
      return this.nodefs.writeSync(stream.nfd, uint8Array2Buffer(buffer), offset, length, position);
    } catch (e) {
      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
    }
  }
  llseek(stream, offset, whence) {
    let position = offset;
    if (whence === 1) {
      position += stream.position;
    } else if (whence === 2) {
      if (this.FS.isFile(stream.node.mode)) {
        try {
          const stat = this.nodefs.fstatSync(stream.nfd);
          position += stat.size;
        } catch (e) {
          throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
        }
      }
    }
    if (position < 0) {
      throw new this.FS.ErrnoError(this.ERRNO_CODES.EINVAL);
    }
    stream.position = position;
    return position;
  }
};
var BFSEmscriptenNodeOps = class {
  constructor(fs2) {
    this.fs = fs2;
    this.nodefs = fs2.getNodeFS();
    this.FS = fs2.getFS();
    this.PATH = fs2.getPATH();
    this.ERRNO_CODES = fs2.getERRNO_CODES();
  }
  getattr(node) {
    const path = this.fs.realPath(node);
    let stat;
    try {
      stat = this.nodefs.lstatSync(path);
    } catch (e) {
      if (!e.code) {
        throw e;
      }
      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
    }
    return {
      dev: stat.dev,
      ino: stat.ino,
      mode: stat.mode,
      nlink: stat.nlink,
      uid: stat.uid,
      gid: stat.gid,
      rdev: stat.rdev,
      size: stat.size,
      atime: stat.atime,
      mtime: stat.mtime,
      ctime: stat.ctime,
      blksize: stat.blksize,
      blocks: stat.blocks
    };
  }
  setattr(node, attr) {
    const path = this.fs.realPath(node);
    try {
      if (attr.mode !== void 0) {
        this.nodefs.chmodSync(path, attr.mode);
        node.mode = attr.mode;
      }
      if (attr.timestamp !== void 0) {
        const date = new Date(attr.timestamp);
        this.nodefs.utimesSync(path, date, date);
      }
    } catch (e) {
      if (!e.code) {
        throw e;
      }
      if (e.code !== "ENOTSUP") {
        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
      }
    }
    if (attr.size !== void 0) {
      try {
        this.nodefs.truncateSync(path, attr.size);
      } catch (e) {
        if (!e.code) {
          throw e;
        }
        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
      }
    }
  }
  lookup(parent, name) {
    const path = this.PATH.join2(this.fs.realPath(parent), name);
    const mode = this.fs.getMode(path);
    return this.fs.createNode(parent, name, mode);
  }
  mknod(parent, name, mode, dev) {
    const node = this.fs.createNode(parent, name, mode, dev);
    const path = this.fs.realPath(node);
    try {
      if (this.FS.isDir(node.mode)) {
        this.nodefs.mkdirSync(path, node.mode);
      } else {
        this.nodefs.writeFileSync(path, "", { mode: node.mode });
      }
    } catch (e) {
      if (!e.code) {
        throw e;
      }
      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
    }
    return node;
  }
  rename(oldNode, newDir, newName) {
    const oldPath = this.fs.realPath(oldNode);
    const newPath = this.PATH.join2(this.fs.realPath(newDir), newName);
    try {
      this.nodefs.renameSync(oldPath, newPath);
      oldNode.name = newName;
      oldNode.parent = newDir;
    } catch (e) {
      if (!e.code) {
        throw e;
      }
      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
    }
  }
  unlink(parent, name) {
    const path = this.PATH.join2(this.fs.realPath(parent), name);
    try {
      this.nodefs.unlinkSync(path);
    } catch (e) {
      if (!e.code) {
        throw e;
      }
      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
    }
  }
  rmdir(parent, name) {
    const path = this.PATH.join2(this.fs.realPath(parent), name);
    try {
      this.nodefs.rmdirSync(path);
    } catch (e) {
      if (!e.code) {
        throw e;
      }
      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
    }
  }
  readdir(node) {
    const path = this.fs.realPath(node);
    try {
      const contents = this.nodefs.readdirSync(path);
      contents.push(".", "..");
      return contents;
    } catch (e) {
      if (!e.code) {
        throw e;
      }
      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
    }
  }
  symlink(parent, newName, oldPath) {
    const newPath = this.PATH.join2(this.fs.realPath(parent), newName);
    try {
      this.nodefs.symlinkSync(oldPath, newPath);
    } catch (e) {
      if (!e.code) {
        throw e;
      }
      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
    }
  }
  readlink(node) {
    const path = this.fs.realPath(node);
    try {
      return this.nodefs.readlinkSync(path);
    } catch (e) {
      if (!e.code) {
        throw e;
      }
      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
    }
  }
};
var BFSEmscriptenFS = class {
  constructor(_FS = self["FS"], _PATH = self["PATH"], _ERRNO_CODES = self["ERRNO_CODES"], nodefs = node_fs_default) {
    // This maps the integer permission modes from http://linux.die.net/man/3/open
    // to node.js-specific file open permission strings at http://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback
    this.flagsToPermissionStringMap = {
      0: "r",
      1: "r+",
      2: "r+",
      64: "r",
      65: "r+",
      66: "r+",
      129: "rx+",
      193: "rx+",
      514: "w+",
      577: "w",
      578: "w+",
      705: "wx",
      706: "wx+",
      1024: "a",
      1025: "a",
      1026: "a+",
      1089: "a",
      1090: "a+",
      1153: "ax",
      1154: "ax+",
      1217: "ax",
      1218: "ax+",
      4096: "rs",
      4098: "rs+"
    };
    this.nodefs = nodefs;
    this.FS = _FS;
    this.PATH = _PATH;
    this.ERRNO_CODES = _ERRNO_CODES;
    this.node_ops = new BFSEmscriptenNodeOps(this);
    this.stream_ops = new BFSEmscriptenStreamOps(this);
  }
  mount(m) {
    return this.createNode(null, "/", this.getMode(m.opts.root), 0);
  }
  createNode(parent, name, mode, dev) {
    const FS2 = this.FS;
    if (!FS2.isDir(mode) && !FS2.isFile(mode) && !FS2.isLink(mode)) {
      throw new FS2.ErrnoError(this.ERRNO_CODES.EINVAL);
    }
    const node = FS2.createNode(parent, name, mode);
    node.node_ops = this.node_ops;
    node.stream_ops = this.stream_ops;
    return node;
  }
  getMode(path) {
    let stat;
    try {
      stat = this.nodefs.lstatSync(path);
    } catch (e) {
      if (!e.code) {
        throw e;
      }
      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
    }
    return stat.mode;
  }
  realPath(node) {
    const parts = [];
    while (node.parent !== node) {
      parts.push(node.name);
      node = node.parent;
    }
    parts.push(node.mount.opts.root);
    parts.reverse();
    return this.PATH.join.apply(null, parts);
  }
  flagsToPermissionString(flags) {
    let parsedFlags = typeof flags === "string" ? parseInt(flags, 10) : flags;
    parsedFlags &= 8191;
    if (parsedFlags in this.flagsToPermissionStringMap) {
      return this.flagsToPermissionStringMap[parsedFlags];
    } else {
      return flags;
    }
  }
  getNodeFS() {
    return this.nodefs;
  }
  getFS() {
    return this.FS;
  }
  getPATH() {
    return this.PATH;
  }
  getERRNO_CODES() {
    return this.ERRNO_CODES;
  }
};

// src/core/file_system.ts
var BaseFileSystem = class {
  supportsLinks() {
    return false;
  }
  diskSpace(p, cb) {
    cb(0, 0);
  }
  /**
   * Opens the file at path p with the given flag. The file must exist.
   * @param p The path to open.
   * @param flag The flag to use when opening the file.
   */
  openFile(p, flag, cred, cb) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  /**
   * Create the file at path p with the given mode. Then, open it with the given
   * flag.
   */
  createFile(p, flag, mode, cred, cb) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  open(p, flag, mode, cred, cb) {
    const mustBeFile = (e, stats) => {
      if (e) {
        switch (flag.pathNotExistsAction()) {
          case 3 /* CREATE_FILE */:
            return this.stat(dirname(p), false, cred, (e2, parentStats) => {
              if (e2) {
                cb(e2);
              } else if (parentStats && !parentStats.isDirectory()) {
                cb(ApiError.ENOTDIR(dirname(p)));
              } else {
                this.createFile(p, flag, mode, cred, cb);
              }
            });
          case 1 /* THROW_EXCEPTION */:
            return cb(ApiError.ENOENT(p));
          default:
            return cb(new ApiError(22 /* EINVAL */, "Invalid FileFlag object."));
        }
      } else {
        switch (flag.pathExistsAction()) {
          case 1 /* THROW_EXCEPTION */:
            return cb(ApiError.EEXIST(p));
          case 2 /* TRUNCATE_FILE */:
            return this.openFile(p, flag, cred, (e2, fd) => {
              if (e2) {
                cb(e2);
              } else if (fd) {
                fd.truncate(0, () => {
                  fd.sync(() => {
                    cb(null, fd);
                  });
                });
              } else {
                fail();
              }
            });
          case 0 /* NOP */:
            return this.openFile(p, flag, cred, cb);
          default:
            return cb(new ApiError(22 /* EINVAL */, "Invalid FileFlag object."));
        }
      }
    };
    this.stat(p, false, cred, mustBeFile);
  }
  access(p, mode, cred, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  accessSync(p, mode, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  rename(oldPath, newPath, cred, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  renameSync(oldPath, newPath, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  stat(p, isLstat, cred, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  statSync(p, isLstat, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  /**
   * Opens the file at path p with the given flag. The file must exist.
   * @param p The path to open.
   * @param flag The flag to use when opening the file.
   * @return A File object corresponding to the opened file.
   */
  openFileSync(p, flag, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  /**
   * Create the file at path p with the given mode. Then, open it with the given
   * flag.
   */
  createFileSync(p, flag, mode, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  openSync(p, flag, mode, cred) {
    let stats;
    try {
      stats = this.statSync(p, false, cred);
    } catch (e) {
      switch (flag.pathNotExistsAction()) {
        case 3 /* CREATE_FILE */:
          const parentStats = this.statSync(dirname(p), false, cred);
          if (!parentStats.isDirectory()) {
            throw ApiError.ENOTDIR(dirname(p));
          }
          return this.createFileSync(p, flag, mode, cred);
        case 1 /* THROW_EXCEPTION */:
          throw ApiError.ENOENT(p);
        default:
          throw new ApiError(22 /* EINVAL */, "Invalid FileFlag object.");
      }
    }
    if (!stats.hasAccess(mode, cred)) {
      throw ApiError.EACCES(p);
    }
    switch (flag.pathExistsAction()) {
      case 1 /* THROW_EXCEPTION */:
        throw ApiError.EEXIST(p);
      case 2 /* TRUNCATE_FILE */:
        this.unlinkSync(p, cred);
        return this.createFileSync(p, flag, stats.mode, cred);
      case 0 /* NOP */:
        return this.openFileSync(p, flag, cred);
      default:
        throw new ApiError(22 /* EINVAL */, "Invalid FileFlag object.");
    }
  }
  unlink(p, cred, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  unlinkSync(p, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  rmdir(p, cred, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  rmdirSync(p, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  mkdir(p, mode, cred, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  mkdirSync(p, mode, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  readdir(p, cred, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  readdirSync(p, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  exists(p, cred, cb) {
    this.stat(p, null, cred, function(err2) {
      cb(!err2);
    });
  }
  existsSync(p, cred) {
    try {
      this.statSync(p, true, cred);
      return true;
    } catch (e) {
      return false;
    }
  }
  realpath(p, cache, cred, cb) {
    if (this.supportsLinks()) {
      const splitPath2 = p.split(sep);
      for (let i = 0; i < splitPath2.length; i++) {
        const addPaths = splitPath2.slice(0, i + 1);
        splitPath2[i] = join.apply(null, addPaths);
      }
    } else {
      this.exists(p, cred, function(doesExist) {
        if (doesExist) {
          cb(null, p);
        } else {
          cb(ApiError.ENOENT(p));
        }
      });
    }
  }
  realpathSync(p, cache, cred) {
    if (this.supportsLinks()) {
      const splitPath2 = p.split(sep);
      for (let i = 0; i < splitPath2.length; i++) {
        const addPaths = splitPath2.slice(0, i + 1);
        splitPath2[i] = join.apply(path_exports, addPaths);
      }
      return splitPath2.join(sep);
    } else {
      if (this.existsSync(p, cred)) {
        return p;
      } else {
        throw ApiError.ENOENT(p);
      }
    }
  }
  truncate(p, len, cred, cb) {
    this.open(p, FileFlag.getFileFlag("r+"), 420, cred, function(er, fd) {
      if (er) {
        return cb(er);
      }
      fd.truncate(len, function(er2) {
        fd.close(function(er22) {
          cb(er2 || er22);
        });
      });
    });
  }
  truncateSync(p, len, cred) {
    const fd = this.openSync(p, FileFlag.getFileFlag("r+"), 420, cred);
    try {
      fd.truncateSync(len);
    } finally {
      fd.closeSync();
    }
  }
  readFile(fname, encoding, flag, cred, cb) {
    const oldCb = cb;
    this.open(fname, flag, 420, cred, (err2, fd) => {
      if (err2) {
        return cb(err2);
      }
      cb = function(err3, arg) {
        fd.close(function(err22) {
          if (!err3) {
            err3 = err22;
          }
          return oldCb(err3, arg);
        });
      };
      fd.stat((err3, stat) => {
        if (err3) {
          return cb(err3);
        }
        const buf = Buffer2.alloc(stat.size);
        fd.read(buf, 0, stat.size, 0, (err4) => {
          if (err4) {
            return cb(err4);
          } else if (encoding === null) {
            return cb(err4, buf);
          }
          try {
            cb(null, buf.toString(encoding));
          } catch (e) {
            cb(e);
          }
        });
      });
    });
  }
  readFileSync(fname, encoding, flag, cred) {
    const fd = this.openSync(fname, flag, 420, cred);
    try {
      const stat = fd.statSync();
      const buf = Buffer2.alloc(stat.size);
      fd.readSync(buf, 0, stat.size, 0);
      fd.closeSync();
      if (encoding === null) {
        return buf;
      }
      return buf.toString(encoding);
    } finally {
      fd.closeSync();
    }
  }
  writeFile(fname, data, encoding, flag, mode, cred, cb) {
    const oldCb = cb;
    this.open(fname, flag, 420, cred, function(err2, fd) {
      if (err2) {
        return cb(err2);
      }
      cb = function(err3) {
        fd.close(function(err22) {
          oldCb(err3 ? err3 : err22);
        });
      };
      try {
        if (typeof data === "string") {
          data = Buffer2.from(data, encoding);
        }
      } catch (e) {
        return cb(e);
      }
      fd.write(data, 0, data.length, 0, cb);
    });
  }
  writeFileSync(fname, data, encoding, flag, mode, cred) {
    const fd = this.openSync(fname, flag, mode, cred);
    try {
      if (typeof data === "string") {
        data = Buffer2.from(data, encoding);
      }
      fd.writeSync(data, 0, data.length, 0);
    } finally {
      fd.closeSync();
    }
  }
  appendFile(fname, data, encoding, flag, mode, cred, cb) {
    const oldCb = cb;
    this.open(fname, flag, mode, cred, function(err2, fd) {
      if (err2) {
        return cb(err2);
      }
      cb = function(err3) {
        fd.close(function(err22) {
          oldCb(err3 ? err3 : err22);
        });
      };
      if (typeof data === "string") {
        data = Buffer2.from(data, encoding);
      }
      fd.write(data, 0, data.length, null, cb);
    });
  }
  appendFileSync(fname, data, encoding, flag, mode, cred) {
    const fd = this.openSync(fname, flag, mode, cred);
    try {
      if (typeof data === "string") {
        data = Buffer2.from(data, encoding);
      }
      fd.writeSync(data, 0, data.length, null);
    } finally {
      fd.closeSync();
    }
  }
  chmod(p, isLchmod, mode, cred, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  chmodSync(p, isLchmod, mode, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  chown(p, isLchown, new_uid, new_gid, cred, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  chownSync(p, isLchown, new_uid, new_gid, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  utimes(p, atime, mtime, cred, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  utimesSync(p, atime, mtime, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  link(srcpath, dstpath, cred, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  linkSync(srcpath, dstpath, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  symlink(srcpath, dstpath, type, cred, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  symlinkSync(srcpath, dstpath, type, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  readlink(p, cred, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  readlinkSync(p, cred) {
    throw new ApiError(95 /* ENOTSUP */);
  }
};
var SynchronousFileSystem = class extends BaseFileSystem {
  supportsSynch() {
    return true;
  }
  access(p, mode, cred, cb) {
    try {
      this.accessSync(p, mode, cred);
      cb();
    } catch (e) {
      cb(e);
    }
  }
  rename(oldPath, newPath, cred, cb) {
    try {
      this.renameSync(oldPath, newPath, cred);
      cb();
    } catch (e) {
      cb(e);
    }
  }
  stat(p, isLstat, cred, cb) {
    try {
      cb(null, this.statSync(p, isLstat, cred));
    } catch (e) {
      cb(e);
    }
  }
  open(p, flags, mode, cred, cb) {
    try {
      cb(null, this.openSync(p, flags, mode, cred));
    } catch (e) {
      cb(e);
    }
  }
  unlink(p, cred, cb) {
    try {
      this.unlinkSync(p, cred);
      cb();
    } catch (e) {
      cb(e);
    }
  }
  rmdir(p, cred, cb) {
    try {
      this.rmdirSync(p, cred);
      cb();
    } catch (e) {
      cb(e);
    }
  }
  mkdir(p, mode, cred, cb) {
    try {
      this.mkdirSync(p, mode, cred);
      cb();
    } catch (e) {
      cb(e);
    }
  }
  readdir(p, cred, cb) {
    try {
      cb(null, this.readdirSync(p, cred));
    } catch (e) {
      cb(e);
    }
  }
  chmod(p, isLchmod, mode, cred, cb) {
    try {
      this.chmodSync(p, isLchmod, mode, cred);
      cb();
    } catch (e) {
      cb(e);
    }
  }
  chown(p, isLchown, new_uid, new_gid, cred, cb) {
    try {
      this.chownSync(p, isLchown, new_uid, new_gid, cred);
      cb();
    } catch (e) {
      cb(e);
    }
  }
  utimes(p, atime, mtime, cred, cb) {
    try {
      this.utimesSync(p, atime, mtime, cred);
      cb();
    } catch (e) {
      cb(e);
    }
  }
  link(srcpath, dstpath, cred, cb) {
    try {
      this.linkSync(srcpath, dstpath, cred);
      cb();
    } catch (e) {
      cb(e);
    }
  }
  symlink(srcpath, dstpath, type, cred, cb) {
    try {
      this.symlinkSync(srcpath, dstpath, type, cred);
      cb();
    } catch (e) {
      cb(e);
    }
  }
  readlink(p, cred, cb) {
    try {
      cb(null, this.readlinkSync(p, cred));
    } catch (e) {
      cb(e);
    }
  }
};

// src/core/file.ts
var BaseFile = class {
  sync(cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  syncSync() {
    throw new ApiError(95 /* ENOTSUP */);
  }
  datasync(cb) {
    this.sync(cb);
  }
  datasyncSync() {
    return this.syncSync();
  }
  chown(uid, gid, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  chownSync(uid, gid) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  chmod(mode, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  chmodSync(mode) {
    throw new ApiError(95 /* ENOTSUP */);
  }
  utimes(atime, mtime, cb) {
    cb(new ApiError(95 /* ENOTSUP */));
  }
  utimesSync(atime, mtime) {
    throw new ApiError(95 /* ENOTSUP */);
  }
};

// src/generic/preload_file.ts
var PreloadFile = class extends BaseFile {
  /**
   * Creates a file with the given path and, optionally, the given contents. Note
   * that, if contents is specified, it will be mutated by the file!
   * @param _fs The file system that created the file.
   * @param _path
   * @param _mode The mode that the file was opened using.
   *   Dictates permissions and where the file pointer starts.
   * @param _stat The stats object for the given file.
   *   PreloadFile will mutate this object. Note that this object must contain
   *   the appropriate mode that the file was opened as.
   * @param contents A buffer containing the entire
   *   contents of the file. PreloadFile will mutate this buffer. If not
   *   specified, we assume it is a new file.
   */
  constructor(_fs, _path, _flag, _stat, contents) {
    super();
    this._pos = 0;
    this._dirty = false;
    this._fs = _fs;
    this._path = _path;
    this._flag = _flag;
    this._stat = _stat;
    this._buffer = contents ? contents : emptyBuffer();
    if (this._stat.size !== this._buffer.length && this._flag.isReadable()) {
      throw new Error(`Invalid buffer: Buffer is ${this._buffer.length} long, yet Stats object specifies that file is ${this._stat.size} long.`);
    }
  }
  /**
   * NONSTANDARD: Get the underlying buffer for this file. !!DO NOT MUTATE!! Will mess up dirty tracking.
   */
  getBuffer() {
    return this._buffer;
  }
  /**
   * NONSTANDARD: Get underlying stats for this file. !!DO NOT MUTATE!!
   */
  getStats() {
    return this._stat;
  }
  getFlag() {
    return this._flag;
  }
  /**
   * Get the path to this file.
   * @return [String] The path to the file.
   */
  getPath() {
    return this._path;
  }
  /**
   * Get the current file position.
   *
   * We emulate the following bug mentioned in the Node documentation:
   * > On Linux, positional writes don't work when the file is opened in append
   *   mode. The kernel ignores the position argument and always appends the data
   *   to the end of the file.
   * @return [Number] The current file position.
   */
  getPos() {
    if (this._flag.isAppendable()) {
      return this._stat.size;
    }
    return this._pos;
  }
  /**
   * Advance the current file position by the indicated number of positions.
   * @param [Number] delta
   */
  advancePos(delta) {
    return this._pos += delta;
  }
  /**
   * Set the file position.
   * @param [Number] newPos
   */
  setPos(newPos) {
    return this._pos = newPos;
  }
  /**
   * **Core**: Asynchronous sync. Must be implemented by subclasses of this
   * class.
   * @param [Function(BrowserFS.ApiError)] cb
   */
  sync(cb) {
    try {
      this.syncSync();
      cb();
    } catch (e) {
      cb(e);
    }
  }
  /**
   * **Core**: Synchronous sync.
   */
  syncSync() {
    throw new ApiError(95 /* ENOTSUP */);
  }
  /**
   * **Core**: Asynchronous close. Must be implemented by subclasses of this
   * class.
   * @param [Function(BrowserFS.ApiError)] cb
   */
  close(cb) {
    try {
      this.closeSync();
      cb();
    } catch (e) {
      cb(e);
    }
  }
  /**
   * **Core**: Synchronous close.
   */
  closeSync() {
    throw new ApiError(95 /* ENOTSUP */);
  }
  /**
   * Asynchronous `stat`.
   * @param [Function(BrowserFS.ApiError, BrowserFS.node.fs.Stats)] cb
   */
  stat(cb) {
    try {
      cb(null, Stats.clone(this._stat));
    } catch (e) {
      cb(e);
    }
  }
  /**
   * Synchronous `stat`.
   */
  statSync() {
    return Stats.clone(this._stat);
  }
  /**
   * Asynchronous truncate.
   * @param [Number] len
   * @param [Function(BrowserFS.ApiError)] cb
   */
  truncate(len, cb) {
    try {
      this.truncateSync(len);
      if (this._flag.isSynchronous() && !node_fs_default.getRootFS().supportsSynch()) {
        this.sync(cb);
      }
      cb();
    } catch (e) {
      return cb(e);
    }
  }
  /**
   * Synchronous truncate.
   * @param [Number] len
   */
  truncateSync(len) {
    this._dirty = true;
    if (!this._flag.isWriteable()) {
      throw new ApiError(1 /* EPERM */, "File not opened with a writeable mode.");
    }
    this._stat.mtimeMs = Date.now();
    if (len > this._buffer.length) {
      const buf = Buffer2.alloc(len - this._buffer.length, 0);
      this.writeSync(buf, 0, buf.length, this._buffer.length);
      if (this._flag.isSynchronous() && node_fs_default.getRootFS().supportsSynch()) {
        this.syncSync();
      }
      return;
    }
    this._stat.size = len;
    const newBuff = Buffer2.alloc(len);
    this._buffer.copy(newBuff, 0, 0, len);
    this._buffer = newBuff;
    if (this._flag.isSynchronous() && node_fs_default.getRootFS().supportsSynch()) {
      this.syncSync();
    }
  }
  /**
   * Write buffer to the file.
   * Note that it is unsafe to use fs.write multiple times on the same file
   * without waiting for the callback.
   * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to
   *  the file.
   * @param [Number] offset Offset in the buffer to start reading data from.
   * @param [Number] length The amount of bytes to write to the file.
   * @param [Number] position Offset from the beginning of the file where this
   *   data should be written. If position is null, the data will be written at
   *   the current position.
   * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)]
   *   cb The number specifies the number of bytes written into the file.
   */
  write(buffer, offset, length, position, cb) {
    try {
      cb(null, this.writeSync(buffer, offset, length, position), buffer);
    } catch (e) {
      cb(e);
    }
  }
  /**
   * Write buffer to the file.
   * Note that it is unsafe to use fs.writeSync multiple times on the same file
   * without waiting for the callback.
   * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to
   *  the file.
   * @param [Number] offset Offset in the buffer to start reading data from.
   * @param [Number] length The amount of bytes to write to the file.
   * @param [Number] position Offset from the beginning of the file where this
   *   data should be written. If position is null, the data will be written at
   *   the current position.
   * @return [Number]
   */
  writeSync(buffer, offset, length, position) {
    this._dirty = true;
    if (position === void 0 || position === null) {
      position = this.getPos();
    }
    if (!this._flag.isWriteable()) {
      throw new ApiError(1 /* EPERM */, "File not opened with a writeable mode.");
    }
    const endFp = position + length;
    if (endFp > this._stat.size) {
      this._stat.size = endFp;
      if (endFp > this._buffer.length) {
        const newBuff = Buffer2.alloc(endFp);
        this._buffer.copy(newBuff);
        this._buffer = newBuff;
      }
    }
    const len = buffer.copy(this._buffer, position, offset, offset + length);
    this._stat.mtimeMs = Date.now();
    if (this._flag.isSynchronous()) {
      this.syncSync();
      return len;
    }
    this.setPos(position + len);
    return len;
  }
  /**
   * Read data from the file.
   * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be
   *   written to.
   * @param [Number] offset The offset within the buffer where writing will
   *   start.
   * @param [Number] length An integer specifying the number of bytes to read.
   * @param [Number] position An integer specifying where to begin reading from
   *   in the file. If position is null, data will be read from the current file
   *   position.
   * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)] cb The
   *   number is the number of bytes read
   */
  read(buffer, offset, length, position, cb) {
    try {
      cb(null, this.readSync(buffer, offset, length, position), buffer);
    } catch (e) {
      cb(e);
    }
  }
  /**
   * Read data from the file.
   * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be
   *   written to.
   * @param [Number] offset The offset within the buffer where writing will
   *   start.
   * @param [Number] length An integer specifying the number of bytes to read.
   * @param [Number] position An integer specifying where to begin reading from
   *   in the file. If position is null, data will be read from the current file
   *   position.
   * @return [Number]
   */
  readSync(buffer, offset, length, position) {
    if (!this._flag.isReadable()) {
      throw new ApiError(1 /* EPERM */, "File not opened with a readable mode.");
    }
    if (position === void 0 || position === null) {
      position = this.getPos();
    }
    const endRead = position + length;
    if (endRead > this._stat.size) {
      length = this._stat.size - position;
    }
    const rv = this._buffer.copy(buffer, offset, position, position + length);
    this._stat.atimeMs = Date.now();
    this._pos = position + length;
    return rv;
  }
  /**
   * Asynchronous `fchmod`.
   * @param [Number|String] mode
   * @param [Function(BrowserFS.ApiError)] cb
   */
  chmod(mode, cb) {
    try {
      this.chmodSync(mode);
      cb();
    } catch (e) {
      cb(e);
    }
  }
  /**
   * Synchronous `fchmod`.
   * @param [Number] mode
   */
  chmodSync(mode) {
    if (!this._fs.supportsProps()) {
      throw new ApiError(95 /* ENOTSUP */);
    }
    this._dirty = true;
    this._stat.chmod(mode);
    this.syncSync();
  }
  /**
   * Asynchronous `fchown`.
   * @param [Number] uid
   * @param [Number] gid
   * @param [Function(BrowserFS.ApiError)] cb
   */
  chown(uid, gid, cb) {
    try {
      this.chownSync(uid, gid);
      cb();
    } catch (e) {
      cb(e);
    }
  }
  /**
   * Synchronous `fchown`.
   * @param [Number] uid
   * @param [Number] gid
   */
  chownSync(uid, gid) {
    if (!this._fs.supportsProps()) {
      throw new ApiError(95 /* ENOTSUP */);
    }
    this._dirty = true;
    this._stat.chown(uid, gid);
    this.syncSync();
  }
  isDirty() {
    return this._dirty;
  }
  /**
   * Resets the dirty bit. Should only be called after a sync has completed successfully.
   */
  resetDirty() {
    this._dirty = false;
  }
};
var NoSyncFile = class extends PreloadFile {
  constructor(_fs, _path, _flag, _stat, contents) {
    super(_fs, _path, _flag, _stat, contents);
  }
  /**
   * Asynchronous sync. Doesn't do anything, simply calls the cb.
   * @param [Function(BrowserFS.ApiError)] cb
   */
  sync(cb) {
    cb();
  }
  /**
   * Synchronous sync. Doesn't do anything.
   */
  syncSync() {
  }
  /**
   * Asynchronous close. Doesn't do anything, simply calls the cb.
   * @param [Function(BrowserFS.ApiError)] cb
   */
  close(cb) {
    cb();
  }
  /**
   * Synchronous close. Doesn't do anything.
   */
  closeSync() {
  }
};

// src/backend/AsyncMirror.ts
var MirrorFile = class extends PreloadFile {
  constructor(fs2, path, flag, stat, data) {
    super(fs2, path, flag, stat, data);
  }
  syncSync() {
    if (this.isDirty()) {
      this._fs._syncSync(this);
      this.resetDirty();
    }
  }
  closeSync() {
    this.syncSync();
  }
};
var _AsyncMirror = class extends SynchronousFileSystem {
  /**
   * **Deprecated; use AsyncMirror.Create() method instead.**
   *
   * Mirrors the synchronous file system into the asynchronous file system.
   *
   * **IMPORTANT**: You must call `initialize` on the file system before it can be used.
   * @param sync The synchronous file system to mirror the asynchronous file system to.
   * @param async The asynchronous file system to mirror.
   */
  constructor(sync, async) {
    super();
    /**
     * Queue of pending asynchronous operations.
     */
    this._queue = [];
    this._queueRunning = false;
    this._isInitialized = false;
    this._initializeCallbacks = [];
    this._sync = sync;
    this._async = async;
  }
  /**
   * Constructs and initializes an AsyncMirror file system with the given options.
   */
  static Create(opts, cb) {
    try {
      const fs2 = new _AsyncMirror(opts.sync, opts.async);
      fs2._initialize((e) => {
        if (e) {
          cb(e);
        } else {
          cb(null, fs2);
        }
      });
    } catch (e) {
      cb(e);
    }
  }
  /**
   * Asynchronously constructs and initializes an AsyncMirror file system with the given options.
   */
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  static isAvailable() {
    return true;
  }
  getName() {
    return _AsyncMirror.Name;
  }
  _syncSync(fd) {
    const stats = fd.getStats();
    this._sync.writeFileSync(fd.getPath(), fd.getBuffer(), null, FileFlag.getFileFlag("w"), stats.mode, stats.getCred(0, 0));
    this.enqueueOp({
      apiMethod: "writeFile",
      arguments: [fd.getPath(), fd.getBuffer(), null, fd.getFlag(), stats.mode, stats.getCred(0, 0)]
    });
  }
  isReadOnly() {
    return false;
  }
  supportsSynch() {
    return true;
  }
  supportsLinks() {
    return false;
  }
  supportsProps() {
    return this._sync.supportsProps() && this._async.supportsProps();
  }
  renameSync(oldPath, newPath, cred) {
    this._sync.renameSync(oldPath, newPath, cred);
    this.enqueueOp({
      apiMethod: "rename",
      arguments: [oldPath, newPath, cred]
    });
  }
  statSync(p, isLstat, cred) {
    return this._sync.statSync(p, isLstat, cred);
  }
  openSync(p, flag, mode, cred) {
    const fd = this._sync.openSync(p, flag, mode, cred);
    fd.closeSync();
    return new MirrorFile(this, p, flag, this._sync.statSync(p, false, cred), this._sync.readFileSync(p, null, FileFlag.getFileFlag("r"), cred));
  }
  unlinkSync(p, cred) {
    this._sync.unlinkSync(p, cred);
    this.enqueueOp({
      apiMethod: "unlink",
      arguments: [p, cred]
    });
  }
  rmdirSync(p, cred) {
    this._sync.rmdirSync(p, cred);
    this.enqueueOp({
      apiMethod: "rmdir",
      arguments: [p, cred]
    });
  }
  mkdirSync(p, mode, cred) {
    this._sync.mkdirSync(p, mode, cred);
    this.enqueueOp({
      apiMethod: "mkdir",
      arguments: [p, mode, cred]
    });
  }
  readdirSync(p, cred) {
    return this._sync.readdirSync(p, cred);
  }
  existsSync(p, cred) {
    return this._sync.existsSync(p, cred);
  }
  chmodSync(p, isLchmod, mode, cred) {
    this._sync.chmodSync(p, isLchmod, mode, cred);
    this.enqueueOp({
      apiMethod: "chmod",
      arguments: [p, isLchmod, mode, cred]
    });
  }
  chownSync(p, isLchown, new_uid, new_gid, cred) {
    this._sync.chownSync(p, isLchown, new_uid, new_gid, cred);
    this.enqueueOp({
      apiMethod: "chown",
      arguments: [p, isLchown, new_uid, new_gid, cred]
    });
  }
  utimesSync(p, atime, mtime, cred) {
    this._sync.utimesSync(p, atime, mtime, cred);
    this.enqueueOp({
      apiMethod: "utimes",
      arguments: [p, atime, mtime, cred]
    });
  }
  /**
   * Called once to load up files from async storage into sync storage.
   */
  _initialize(userCb) {
    const callbacks = this._initializeCallbacks;
    const end = (e) => {
      this._isInitialized = !e;
      this._initializeCallbacks = [];
      callbacks.forEach((cb) => cb(e));
    };
    if (!this._isInitialized) {
      if (callbacks.push(userCb) === 1) {
        const copyDirectory = (p, mode, cb) => {
          if (p !== "/") {
            this._async.stat(p, true, Cred.Root, (err2, stats) => {
              if (err2) {
                cb(err2);
              }
              this._sync.mkdirSync(p, stats.mode, stats.getCred());
            });
          }
          this._async.readdir(p, Cred.Root, (err2, files) => {
            let i = 0;
            function copyNextFile(err3) {
              if (err3) {
                cb(err3);
              } else if (i < files.length) {
                copyItem(join(p, files[i]), copyNextFile);
                i++;
              } else {
                cb();
              }
            }
            if (err2) {
              cb(err2);
            } else {
              copyNextFile();
            }
          });
        }, copyFile = (p, mode, cb) => {
          this._async.readFile(p, null, FileFlag.getFileFlag("r"), Cred.Root, (err2, data) => {
            if (err2) {
              cb(err2);
            } else {
              try {
                this._sync.writeFileSync(p, data, null, FileFlag.getFileFlag("w"), mode, Cred.Root);
              } catch (e) {
                err2 = e;
              } finally {
                cb(err2);
              }
            }
          });
        }, copyItem = (p, cb) => {
          this._async.stat(p, false, Cred.Root, (err2, stats) => {
            if (err2) {
              cb(err2);
            } else if (stats.isDirectory()) {
              copyDirectory(p, stats.mode, cb);
            } else {
              copyFile(p, stats.mode, cb);
            }
          });
        };
        copyDirectory("/", 0, end);
      }
    } else {
      userCb();
    }
  }
  enqueueOp(op) {
    this._queue.push(op);
    if (!this._queueRunning) {
      this._queueRunning = true;
      const doNextOp = (err2) => {
        if (err2) {
          throw new Error(`WARNING: File system has desynchronized. Received following error: ${err2}
$`);
        }
        if (this._queue.length > 0) {
          const op2 = this._queue.shift(), args = op2.arguments;
          args.push(doNextOp);
          this._async[op2.apiMethod].apply(this._async, args);
        } else {
          this._queueRunning = false;
        }
      };
      doNextOp();
    }
  }
};
var AsyncMirror = _AsyncMirror;
AsyncMirror.Name = "AsyncMirror";
AsyncMirror.Options = {
  sync: {
    type: "object",
    description: "The synchronous file system to mirror the asynchronous file system to.",
    validator: (v, cb) => {
      if (v && typeof v["supportsSynch"] === "function" && v.supportsSynch()) {
        cb();
      } else {
        cb(new ApiError(22 /* EINVAL */, `'sync' option must be a file system that supports synchronous operations`));
      }
    }
  },
  async: {
    type: "object",
    description: "The asynchronous file system to mirror."
  }
};

// src/generic/dropbox_bridge_actual.ts
var Dropbox = globalThis.Dropbox ? globalThis.Dropbox.Dropbox : void 0;

// src/backend/Dropbox.ts
function FixPath(p) {
  if (p === "/") {
    return "";
  } else {
    return p;
  }
}
function ExtractTheFuckingError(e) {
  const obj = e.error;
  if (obj[".tag"]) {
    return obj;
  } else if (obj["error"]) {
    const obj2 = obj.error;
    if (obj2[".tag"]) {
      return obj2;
    } else if (obj2["reason"] && obj2["reason"][".tag"]) {
      return obj2.reason;
    } else {
      return obj2;
    }
  } else if (typeof obj === "string") {
    try {
      const obj2 = JSON.parse(obj);
      if (obj2["error"] && obj2["error"]["reason"] && obj2["error"]["reason"][".tag"]) {
        return obj2.error.reason;
      }
    } catch (e2) {
    }
  }
  return obj;
}
function GetErrorMessage(err2) {
  if (err2["user_message"]) {
    return err2.user_message.text;
  } else if (err2["error_summary"]) {
    return err2.error_summary;
  } else if (typeof err2.error === "string") {
    return err2.error;
  } else if (typeof err2.error === "object") {
    return GetErrorMessage(err2.error);
  } else {
    throw new Error(`Dropbox's servers gave us a garbage error message: ${JSON.stringify(err2)}`);
  }
}
function LookupErrorToError(err2, p, msg) {
  switch (err2[".tag"]) {
    case "malformed_path":
      return new ApiError(9 /* EBADF */, msg, p);
    case "not_found":
      return ApiError.ENOENT(p);
    case "not_file":
      return ApiError.EISDIR(p);
    case "not_folder":
      return ApiError.ENOTDIR(p);
    case "restricted_content":
      return ApiError.EPERM(p);
    case "other":
    default:
      return new ApiError(5 /* EIO */, msg, p);
  }
}
function WriteErrorToError(err2, p, msg) {
  switch (err2[".tag"]) {
    case "malformed_path":
    case "disallowed_name":
      return new ApiError(9 /* EBADF */, msg, p);
    case "conflict":
    case "no_write_permission":
    case "team_folder":
      return ApiError.EPERM(p);
    case "insufficient_space":
      return new ApiError(28 /* ENOSPC */, msg);
    case "other":
    default:
      return new ApiError(5 /* EIO */, msg, p);
  }
}
function FilesDeleteWrapped(client, p, cb) {
  const arg = {
    path: FixPath(p)
  };
  client.filesDeleteV2(arg).then(() => {
    cb();
  }).catch((e) => {
    const err2 = ExtractTheFuckingError(e);
    switch (err2[".tag"]) {
      case "path_lookup":
        cb(LookupErrorToError(err2.path_lookup, p, GetErrorMessage(e)));
        break;
      case "path_write":
        cb(WriteErrorToError(err2.path_write, p, GetErrorMessage(e)));
        break;
      case "too_many_write_operations":
        setTimeout(() => FilesDeleteWrapped(client, p, cb), 500 + 300 * Math.random());
        break;
      case "other":
      default:
        cb(new ApiError(5 /* EIO */, GetErrorMessage(e), p));
        break;
    }
  });
}
var DropboxFile = class extends PreloadFile {
  constructor(_fs, _path, _flag, _stat, contents) {
    super(_fs, _path, _flag, _stat, contents);
  }
  sync(cb) {
    this._fs._syncFile(this.getPath(), this.getBuffer(), cb);
  }
  close(cb) {
    this.sync(cb);
  }
};
var _DropboxFileSystem = class extends BaseFileSystem {
  constructor(client) {
    super();
    this._client = client;
  }
  /**
   * Creates a new DropboxFileSystem instance with the given options.
   * Must be given an *authenticated* Dropbox client from 2.x JS SDK.
   */
  static Create(opts, cb) {
    cb(null, new _DropboxFileSystem(opts.client));
  }
  /**
   * Asynchronously creates a new DropboxFileSystem instance with the given options.
   * Must be given an *authenticated* Dropbox client from 2.x JS SDK.
   */
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  static isAvailable() {
    return typeof Dropbox !== "undefined";
  }
  getName() {
    return _DropboxFileSystem.Name;
  }
  isReadOnly() {
    return false;
  }
  // Dropbox doesn't support symlinks, properties, or synchronous calls
  // TODO: does it???
  supportsSymlinks() {
    return false;
  }
  supportsProps() {
    return false;
  }
  supportsSynch() {
    return false;
  }
  /**
   * Deletes *everything* in the file system. Mainly intended for unit testing!
   * @param mainCb Called when operation completes.
   */
  empty(mainCb) {
    this.readdir("/", Cred.Root, (e, paths) => {
      if (paths) {
        const next = (e2) => {
          if (paths.length === 0) {
            mainCb();
          } else {
            FilesDeleteWrapped(this._client, paths.shift(), next);
          }
        };
        next();
      } else {
        mainCb(e);
      }
    });
  }
  rename(oldPath, newPath, cred, cb) {
    this.stat(newPath, false, cred, (e, stats) => {
      const rename = () => {
        const relocationArg = {
          from_path: FixPath(oldPath),
          to_path: FixPath(newPath)
        };
        this._client.filesMoveV2(relocationArg).then(() => cb()).catch(function(e2) {
          const err2 = ExtractTheFuckingError(e2);
          switch (err2[".tag"]) {
            case "from_lookup":
              cb(LookupErrorToError(err2.from_lookup, oldPath, GetErrorMessage(e2)));
              break;
            case "from_write":
              cb(WriteErrorToError(err2.from_write, oldPath, GetErrorMessage(e2)));
              break;
            case "to":
              cb(WriteErrorToError(err2.to, newPath, GetErrorMessage(e2)));
              break;
            case "cant_copy_shared_folder":
            case "cant_nest_shared_folder":
              cb(new ApiError(1 /* EPERM */, GetErrorMessage(e2), oldPath));
              break;
            case "cant_move_folder_into_itself":
            case "duplicated_or_nested_paths":
              cb(new ApiError(9 /* EBADF */, GetErrorMessage(e2), oldPath));
              break;
            case "too_many_files":
              cb(new ApiError(28 /* ENOSPC */, GetErrorMessage(e2), oldPath));
              break;
            case "other":
            default:
              cb(new ApiError(5 /* EIO */, GetErrorMessage(e2), oldPath));
              break;
          }
        });
      };
      if (e) {
        rename();
      } else if (oldPath === newPath) {
        if (e) {
          cb(ApiError.ENOENT(newPath));
        } else {
          cb();
        }
      } else if (stats && stats.isDirectory()) {
        cb(ApiError.EISDIR(newPath));
      } else {
        this.unlink(newPath, cred, (e2) => {
          if (e2) {
            cb(e2);
          } else {
            rename();
          }
        });
      }
    });
  }
  stat(path, isLstat, cred, cb) {
    if (path === "/") {
      setImmediate_default(function() {
        cb(null, new Stats(16384 /* DIRECTORY */, 4096));
      });
      return;
    }
    const arg = {
      path: FixPath(path)
    };
    this._client.filesGetMetadata(arg).then((ref) => {
      switch (ref[".tag"]) {
        case "file":
          const fileMetadata = ref;
          cb(null, new Stats(32768 /* FILE */, fileMetadata.size));
          break;
        case "folder":
          cb(null, new Stats(16384 /* DIRECTORY */, 4096));
          break;
        case "deleted":
          cb(ApiError.ENOENT(path));
          break;
        default:
          break;
      }
    }).catch((e) => {
      const err2 = ExtractTheFuckingError(e);
      switch (err2[".tag"]) {
        case "path":
          cb(LookupErrorToError(err2.path, path, GetErrorMessage(e)));
          break;
        default:
          cb(new ApiError(5 /* EIO */, GetErrorMessage(e), path));
          break;
      }
    });
  }
  openFile(path, flags, cred, cb) {
    const downloadArg = {
      path: FixPath(path)
    };
    this._client.filesDownload(downloadArg).then((res) => {
      const b = res.fileBlob;
      const fr = new FileReader();
      fr.onload = () => {
        const ab = fr.result;
        cb(null, new DropboxFile(this, path, flags, new Stats(32768 /* FILE */, ab.byteLength), arrayBuffer2Buffer(ab)));
      };
      fr.readAsArrayBuffer(b);
    }).catch((e) => {
      const err2 = ExtractTheFuckingError(e);
      switch (err2[".tag"]) {
        case "path":
          const dpError = err2;
          cb(LookupErrorToError(dpError.path, path, GetErrorMessage(e)));
          break;
        case "other":
        default:
          cb(new ApiError(5 /* EIO */, GetErrorMessage(e), path));
          break;
      }
    });
  }
  createFile(p, flags, mode, cred, cb) {
    const fileData = Buffer2.alloc(0);
    const blob = new Blob([buffer2ArrayBuffer(fileData)], { type: "octet/stream" });
    const commitInfo = {
      contents: blob,
      path: FixPath(p)
    };
    this._client.filesUpload(commitInfo).then((metadata) => {
      cb(null, new DropboxFile(this, p, flags, new Stats(32768 /* FILE */, 0), fileData));
    }).catch((e) => {
      const err2 = ExtractTheFuckingError(e);
      switch (err2[".tag"]) {
        case "path":
          const upError = err2;
          cb(WriteErrorToError(upError.path.reason, p, GetErrorMessage(e)));
          break;
        case "too_many_write_operations":
          setTimeout(() => this.createFile(p, flags, mode, cred, cb), 500 + 300 * Math.random());
          break;
        case "other":
        default:
          cb(new ApiError(5 /* EIO */, GetErrorMessage(e), p));
          break;
      }
    });
  }
  /**
   * Delete a file
   */
  unlink(path, cred, cb) {
    this.stat(path, false, cred, (e, stat) => {
      if (stat) {
        if (stat.isDirectory()) {
          cb(ApiError.EISDIR(path));
        } else {
          FilesDeleteWrapped(this._client, path, cb);
        }
      } else {
        cb(e);
      }
    });
  }
  /**
   * Delete a directory
   */
  rmdir(path, cred, cb) {
    this.readdir(path, cred, (e, paths) => {
      if (paths) {
        if (paths.length > 0) {
          cb(ApiError.ENOTEMPTY(path));
        } else {
          FilesDeleteWrapped(this._client, path, cb);
        }
      } else {
        cb(e);
      }
    });
  }
  /**
   * Create a directory
   */
  mkdir(p, mode, cred, cb) {
    const parent = dirname(p);
    this.stat(parent, false, cred, (e, stats) => {
      if (e) {
        cb(e);
      } else if (stats && !stats.isDirectory()) {
        cb(ApiError.ENOTDIR(parent));
      } else {
        const arg = {
          path: FixPath(p)
        };
        this._client.filesCreateFolderV2(arg).then(() => cb()).catch((e2) => {
          const err2 = ExtractTheFuckingError(e2);
          if (err2[".tag"] === "too_many_write_operations") {
            setTimeout(() => this.mkdir(p, mode, cred, cb), 500 + 300 * Math.random());
          } else {
            cb(WriteErrorToError(ExtractTheFuckingError(e2).path, p, GetErrorMessage(e2)));
          }
        });
      }
    });
  }
  /**
   * Get the names of the files in a directory
   */
  readdir(path, cred, cb) {
    const arg = {
      path: FixPath(path)
    };
    this._client.filesListFolder(arg).then((res) => {
      ContinueReadingDir(this._client, path, res, [], cb);
    }).catch((e) => {
      ProcessListFolderError(e, path, cb);
    });
  }
  /**
   * (Internal) Syncs file to Dropbox.
   */
  _syncFile(p, d, cb) {
    const blob = new Blob([buffer2ArrayBuffer(d)], { type: "octet/stream" });
    const arg = {
      contents: blob,
      path: FixPath(p),
      mode: {
        ".tag": "overwrite"
      }
    };
    this._client.filesUpload(arg).then(() => {
      cb();
    }).catch((e) => {
      const err2 = ExtractTheFuckingError(e);
      switch (err2[".tag"]) {
        case "path":
          const upError = err2;
          cb(WriteErrorToError(upError.path.reason, p, GetErrorMessage(e)));
          break;
        case "too_many_write_operations":
          setTimeout(() => this._syncFile(p, d, cb), 500 + 300 * Math.random());
          break;
        case "other":
        default:
          cb(new ApiError(5 /* EIO */, GetErrorMessage(e), p));
          break;
      }
    });
  }
};
var DropboxFileSystem = _DropboxFileSystem;
DropboxFileSystem.Name = "DropboxV2";
DropboxFileSystem.Options = {
  client: {
    type: "object",
    description: "An *authenticated* Dropbox client. Must be from the 2.5.x JS SDK."
  }
};
function ProcessListFolderError(e, path, cb) {
  const err2 = ExtractTheFuckingError(e);
  switch (err2[".tag"]) {
    case "path":
      const pathError = err2;
      cb(LookupErrorToError(pathError.path, path, GetErrorMessage(e)));
      break;
    case "other":
    default:
      cb(new ApiError(5 /* EIO */, GetErrorMessage(e), path));
      break;
  }
}
function ContinueReadingDir(client, path, res, previousEntries, cb) {
  const newEntries = res.entries.map((e) => e.path_display).filter((p) => !!p);
  const entries = previousEntries.concat(newEntries);
  if (!res.has_more) {
    cb(null, entries);
  } else {
    const arg = {
      cursor: res.cursor
    };
    client.filesListFolderContinue(arg).then((res2) => {
      ContinueReadingDir(client, path, res2, entries, cb);
    }).catch((e) => {
      ProcessListFolderError(e, path, cb);
    });
  }
}

// src/backend/Emscripten.ts
function convertError(e, path = "") {
  const errno = e.errno;
  let parent = e.node;
  const paths = [];
  while (parent) {
    paths.unshift(parent.name);
    if (parent === parent.parent) {
      break;
    }
    parent = parent.parent;
  }
  return new ApiError(errno, ErrorStrings[errno], paths.length > 0 ? "/" + paths.join("/") : path);
}
var EmscriptenFile = class extends BaseFile {
  constructor(_fs, _FS, _path, _stream) {
    super();
    this._fs = _fs;
    this._FS = _FS;
    this._path = _path;
    this._stream = _stream;
  }
  getPos() {
    return void 0;
  }
  close(cb) {
    let err2 = null;
    try {
      this.closeSync();
    } catch (e) {
      err2 = e;
    } finally {
      cb(err2);
    }
  }
  closeSync() {
    try {
      this._FS.close(this._stream);
    } catch (e) {
      throw convertError(e, this._path);
    }
  }
  stat(cb) {
    try {
      cb(null, this.statSync());
    } catch (e) {
      cb(e);
    }
  }
  statSync() {
    try {
      return this._fs.statSync(this._path, false, Cred.Root);
    } catch (e) {
      throw convertError(e, this._path);
    }
  }
  truncate(len, cb) {
    let err2 = null;
    try {
      this.truncateSync(len);
    } catch (e) {
      err2 = e;
    } finally {
      cb(err2);
    }
  }
  truncateSync(len) {
    try {
      this._FS.ftruncate(this._stream.fd, len);
    } catch (e) {
      throw convertError(e, this._path);
    }
  }
  write(buffer, offset, length, position, cb) {
    try {
      cb(null, this.writeSync(buffer, offset, length, position), buffer);
    } catch (e) {
      cb(e);
    }
  }
  writeSync(buffer, offset, length, position) {
    try {
      const u8 = buffer2Uint8array(buffer);
      const emPosition = position === null ? void 0 : position;
      return this._FS.write(this._stream, u8, offset, length, emPosition);
    } catch (e) {
      throw convertError(e, this._path);
    }
  }
  read(buffer, offset, length, position, cb) {
    try {
      cb(null, this.readSync(buffer, offset, length, position), buffer);
    } catch (e) {
      cb(e);
    }
  }
  readSync(buffer, offset, length, position) {
    try {
      const u8 = buffer2Uint8array(buffer);
      const emPosition = position === null ? void 0 : position;
      return this._FS.read(this._stream, u8, offset, length, emPosition);
    } catch (e) {
      throw convertError(e, this._path);
    }
  }
  sync(cb) {
    cb();
  }
  syncSync() {
  }
  chown(uid, gid, cb) {
    let err2 = null;
    try {
      this.chownSync(uid, gid);
    } catch (e) {
      err2 = e;
    } finally {
      cb(err2);
    }
  }
  chownSync(uid, gid) {
    try {
      this._FS.fchown(this._stream.fd, uid, gid);
    } catch (e) {
      throw convertError(e, this._path);
    }
  }
  chmod(mode, cb) {
    let err2 = null;
    try {
      this.chmodSync(mode);
    } catch (e) {
      err2 = e;
    } finally {
      cb(err2);
    }
  }
  chmodSync(mode) {
    try {
      this._FS.fchmod(this._stream.fd, mode);
    } catch (e) {
      throw convertError(e, this._path);
    }
  }
  utimes(atime, mtime, cb) {
    let err2 = null;
    try {
      this.utimesSync(atime, mtime);
    } catch (e) {
      err2 = e;
    } finally {
      cb(err2);
    }
  }
  utimesSync(atime, mtime) {
    this._fs.utimesSync(this._path, atime, mtime, Cred.Root);
  }
};
var _EmscriptenFileSystem = class extends SynchronousFileSystem {
  constructor(_FS) {
    super();
    this._FS = _FS;
  }
  /**
   * Create an EmscriptenFileSystem instance with the given options.
   */
  static Create(opts, cb) {
    cb(null, new _EmscriptenFileSystem(opts.FS));
  }
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  static isAvailable() {
    return true;
  }
  getName() {
    return this._FS.DB_NAME();
  }
  isReadOnly() {
    return false;
  }
  supportsLinks() {
    return true;
  }
  supportsProps() {
    return true;
  }
  supportsSynch() {
    return true;
  }
  renameSync(oldPath, newPath, cred) {
    try {
      this._FS.rename(oldPath, newPath);
    } catch (e) {
      if (e.errno === 2 /* ENOENT */) {
        throw convertError(e, this.existsSync(oldPath, cred) ? newPath : oldPath);
      } else {
        throw convertError(e);
      }
    }
  }
  statSync(p, isLstat, cred) {
    try {
      const stats = isLstat ? this._FS.lstat(p) : this._FS.stat(p);
      const itemType = this.modeToFileType(stats.mode);
      return new Stats(itemType, stats.size, stats.mode, stats.atime.getTime(), stats.mtime.getTime(), stats.ctime.getTime());
    } catch (e) {
      throw convertError(e, p);
    }
  }
  openSync(p, flag, mode, cred) {
    try {
      const stream = this._FS.open(p, flag.getFlagString(), mode);
      return new EmscriptenFile(this, this._FS, p, stream);
    } catch (e) {
      throw convertError(e, p);
    }
  }
  unlinkSync(p, cred) {
    try {
      this._FS.unlink(p);
    } catch (e) {
      throw convertError(e, p);
    }
  }
  rmdirSync(p, cred) {
    try {
      this._FS.rmdir(p);
    } catch (e) {
      throw convertError(e, p);
    }
  }
  mkdirSync(p, mode, cred) {
    try {
      this._FS.mkdir(p, mode);
    } catch (e) {
      throw convertError(e, p);
    }
  }
  readdirSync(p, cred) {
    try {
      return this._FS.readdir(p).filter((p2) => p2 !== "." && p2 !== "..");
    } catch (e) {
      throw convertError(e, p);
    }
  }
  truncateSync(p, len, cred) {
    try {
      this._FS.truncate(p, len);
    } catch (e) {
      throw convertError(e, p);
    }
  }
  readFileSync(p, encoding, flag, cred) {
    try {
      const data = this._FS.readFile(p, { flags: flag.getFlagString() });
      const buff = uint8Array2Buffer(data);
      if (encoding) {
        return buff.toString(encoding);
      } else {
        return buff;
      }
    } catch (e) {
      throw convertError(e, p);
    }
  }
  writeFileSync(p, data, encoding, flag, mode, cred) {
    try {
      if (encoding) {
        data = Buffer2.from(data, encoding);
      }
      const u8 = buffer2Uint8array(data);
      this._FS.writeFile(p, u8, { flags: flag.getFlagString(), encoding: "binary" });
      this._FS.chmod(p, mode);
    } catch (e) {
      throw convertError(e, p);
    }
  }
  chmodSync(p, isLchmod, mode, cred) {
    try {
      isLchmod ? this._FS.lchmod(p, mode) : this._FS.chmod(p, mode);
    } catch (e) {
      throw convertError(e, p);
    }
  }
  chownSync(p, isLchown, new_uid, new_gid, cred) {
    try {
      isLchown ? this._FS.lchown(p, new_uid, new_gid) : this._FS.chown(p, new_uid, new_gid);
    } catch (e) {
      throw convertError(e, p);
    }
  }
  symlinkSync(srcpath, dstpath, type, cred) {
    try {
      this._FS.symlink(srcpath, dstpath);
    } catch (e) {
      throw convertError(e);
    }
  }
  readlinkSync(p, cred) {
    try {
      return this._FS.readlink(p);
    } catch (e) {
      throw convertError(e, p);
    }
  }
  utimesSync(p, atime, mtime, cred) {
    try {
      this._FS.utime(p, atime.getTime(), mtime.getTime());
    } catch (e) {
      throw convertError(e, p);
    }
  }
  modeToFileType(mode) {
    if (this._FS.isDir(mode)) {
      return 16384 /* DIRECTORY */;
    } else if (this._FS.isFile(mode)) {
      return 32768 /* FILE */;
    } else if (this._FS.isLink(mode)) {
      return 40960 /* SYMLINK */;
    } else {
      throw ApiError.EPERM(`Invalid mode: ${mode}`);
    }
  }
};
var EmscriptenFileSystem = _EmscriptenFileSystem;
EmscriptenFileSystem.Name = "EmscriptenFileSystem";
EmscriptenFileSystem.Options = {
  FS: {
    type: "object",
    description: "The Emscripten file system to use (the `FS` variable)"
  }
};

// src/backend/FileSystemAccess.ts
var handleError = (cb, path = "") => (error) => {
  if (error.name === "NotFoundError") {
    return cb(ApiError.ENOENT(path));
  }
  cb(error);
};
var keysToArray = (directoryKeys, cb, path) => {
  const keys2 = [];
  const iterateKeys = () => {
    directoryKeys.next().then(({ done: done2, value }) => {
      if (done2) {
        return cb(null, keys2);
      }
      keys2.push(value);
      iterateKeys();
    }).catch(handleError(cb, path));
  };
  iterateKeys();
};
var FileSystemAccessFile = class extends PreloadFile {
  constructor(_fs, _path, _flag, _stat, contents) {
    super(_fs, _path, _flag, _stat, contents);
  }
  sync(cb) {
    if (this.isDirty()) {
      this._fs._sync(this.getPath(), this.getBuffer(), this.getStats(), Cred.Root, (e) => {
        if (!e) {
          this.resetDirty();
        }
        cb(e);
      });
    } else {
      cb();
    }
  }
  close(cb) {
    this.sync(cb);
  }
};
var _FileSystemAccessFileSystem = class extends BaseFileSystem {
  constructor(handle) {
    super();
    this._handles = { "/": handle };
  }
  static Create({ handle }, cb) {
    cb(null, new _FileSystemAccessFileSystem(handle));
  }
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  static isAvailable() {
    return typeof FileSystemHandle === "function";
  }
  getName() {
    return _FileSystemAccessFileSystem.Name;
  }
  isReadOnly() {
    return false;
  }
  supportsSymlinks() {
    return false;
  }
  supportsProps() {
    return false;
  }
  supportsSynch() {
    return false;
  }
  _sync(p, data, stats, cred, cb) {
    this.stat(p, false, cred, (err2, currentStats) => {
      if (stats.mtime !== currentStats.mtime) {
        this.writeFile(p, data, null, FileFlag.getFileFlag("w"), currentStats.mode, cred, cb);
      } else {
        cb(err2);
      }
    });
  }
  rename(oldPath, newPath, cred, cb) {
    this.getHandle(oldPath, (sourceError, handle) => {
      if (sourceError) {
        return cb(sourceError);
      }
      if (handle instanceof FileSystemDirectoryHandle) {
        this.readdir(oldPath, cred, (readDirError, files = []) => {
          if (readDirError) {
            return cb(readDirError);
          }
          this.mkdir(newPath, "wx", cred, (mkdirError) => {
            if (mkdirError) {
              return cb(mkdirError);
            }
            if (files.length === 0) {
              this.unlink(oldPath, cred, cb);
            } else {
              files.forEach((file) => this.rename(join(oldPath, file), join(newPath, file), cred, () => this.unlink(oldPath, cred, cb)));
            }
          });
        });
      }
      if (handle instanceof FileSystemFileHandle) {
        handle.getFile().then(
          (oldFile) => this.getHandle(dirname(newPath), (destError, destFolder) => {
            if (destError) {
              return cb(destError);
            }
            if (destFolder instanceof FileSystemDirectoryHandle) {
              destFolder.getFileHandle(basename(newPath), { create: true }).then(
                (newFile) => newFile.createWritable().then(
                  (writable) => oldFile.arrayBuffer().then(
                    (buffer) => writable.write(buffer).then(() => {
                      writable.close();
                      this.unlink(oldPath, cred, cb);
                    }).catch(handleError(cb, newPath))
                  ).catch(handleError(cb, oldPath))
                ).catch(handleError(cb, newPath))
              ).catch(handleError(cb, newPath));
            }
          })
        ).catch(handleError(cb, oldPath));
      }
    });
  }
  writeFile(fname, data, encoding, flag, mode, cred, cb, createFile) {
    this.getHandle(dirname(fname), (error, handle) => {
      if (error) {
        return cb(error);
      }
      if (handle instanceof FileSystemDirectoryHandle) {
        handle.getFileHandle(basename(fname), { create: true }).then(
          (file) => file.createWritable().then(
            (writable) => writable.write(data).then(() => {
              writable.close().catch(handleError(cb, fname));
              cb(null, createFile ? this.newFile(fname, flag, data) : void 0);
            }).catch(handleError(cb, fname))
          ).catch(handleError(cb, fname))
        ).catch(handleError(cb, fname));
      }
    });
  }
  createFile(p, flag, mode, cred, cb) {
    this.writeFile(p, emptyBuffer(), null, flag, mode, cred, cb, true);
  }
  stat(path, isLstat, cred, cb) {
    this.getHandle(path, (error, handle) => {
      if (error) {
        return cb(error);
      }
      if (!handle) {
        return cb(ApiError.FileError(22 /* EINVAL */, path));
      }
      if (handle instanceof FileSystemDirectoryHandle) {
        return cb(null, new Stats(16384 /* DIRECTORY */, 4096));
      }
      if (handle instanceof FileSystemFileHandle) {
        handle.getFile().then(({ lastModified, size }) => cb(null, new Stats(32768 /* FILE */, size, void 0, void 0, lastModified))).catch(handleError(cb, path));
      }
    });
  }
  exists(p, cred, cb) {
    this.getHandle(p, (error) => cb(error === null));
  }
  openFile(path, flags, cred, cb) {
    this.getHandle(path, (error, handle) => {
      if (error) {
        return cb(error);
      }
      if (handle instanceof FileSystemFileHandle) {
        handle.getFile().then(
          (file) => file.arrayBuffer().then((buffer) => cb(null, this.newFile(path, flags, buffer, file.size, file.lastModified))).catch(handleError(cb, path))
        ).catch(handleError(cb, path));
      }
    });
  }
  unlink(path, cred, cb) {
    this.getHandle(dirname(path), (error, handle) => {
      if (error) {
        return cb(error);
      }
      if (handle instanceof FileSystemDirectoryHandle) {
        handle.removeEntry(basename(path), { recursive: true }).then(() => cb(null)).catch(handleError(cb, path));
      }
    });
  }
  rmdir(path, cred, cb) {
    this.unlink(path, cred, cb);
  }
  mkdir(p, mode, cred, cb) {
    const overwrite = mode && mode.flag && mode.flag.includes("w") && !mode.flag.includes("x");
    this.getHandle(p, (_existingError, existingHandle) => {
      if (existingHandle && !overwrite) {
        return cb(ApiError.EEXIST(p));
      }
      this.getHandle(dirname(p), (error, handle) => {
        if (error) {
          return cb(error);
        }
        if (handle instanceof FileSystemDirectoryHandle) {
          handle.getDirectoryHandle(basename(p), { create: true }).then(() => cb(null)).catch(handleError(cb, p));
        }
      });
    });
  }
  readdir(path, cred, cb) {
    this.getHandle(path, (readError, handle) => {
      if (readError) {
        return cb(readError);
      }
      if (handle instanceof FileSystemDirectoryHandle) {
        keysToArray(handle.keys(), cb, path);
      }
    });
  }
  newFile(path, flag, data, size, lastModified) {
    return new FileSystemAccessFile(this, path, flag, new Stats(32768 /* FILE */, size || 0, void 0, void 0, lastModified || (/* @__PURE__ */ new Date()).getTime()), Buffer2.from(data));
  }
  getHandle(path, cb) {
    if (path === "/") {
      return cb(null, this._handles["/"]);
    }
    let walkedPath = "/";
    const [, ...pathParts] = path.split("/");
    const getHandleParts = ([pathPart, ...remainingPathParts]) => {
      const walkingPath = join(walkedPath, pathPart);
      const continueWalk = (handle2) => {
        walkedPath = walkingPath;
        this._handles[walkedPath] = handle2;
        if (remainingPathParts.length === 0) {
          return cb(null, this._handles[path]);
        }
        getHandleParts(remainingPathParts);
      };
      const handle = this._handles[walkedPath];
      handle.getDirectoryHandle(pathPart).then(continueWalk).catch((error) => {
        if (error.name === "TypeMismatchError") {
          handle.getFileHandle(pathPart).then(continueWalk).catch(handleError(cb, walkingPath));
        } else if (error.message === "Name is not allowed.") {
          cb(new ApiError(2 /* ENOENT */, error.message, walkingPath));
        } else {
          handleError(cb, walkingPath)(error);
        }
      });
    };
    getHandleParts(pathParts);
  }
};
var FileSystemAccessFileSystem = _FileSystemAccessFileSystem;
FileSystemAccessFileSystem.Name = "FileSystemAccess";
FileSystemAccessFileSystem.Options = {};

// src/backend/FolderAdapter.ts
var _FolderAdapter = class extends BaseFileSystem {
  constructor(folder, wrapped) {
    super();
    this._folder = folder;
    this._wrapped = wrapped;
  }
  /**
   * Creates a FolderAdapter instance with the given options.
   */
  static Create(opts, cb) {
    const fa = new _FolderAdapter(opts.folder, opts.wrapped);
    fa._initialize(function(e) {
      if (e) {
        cb(e);
      } else {
        cb(null, fa);
      }
    });
  }
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  static isAvailable() {
    return true;
  }
  getName() {
    return this._wrapped.getName();
  }
  isReadOnly() {
    return this._wrapped.isReadOnly();
  }
  supportsProps() {
    return this._wrapped.supportsProps();
  }
  supportsSynch() {
    return this._wrapped.supportsSynch();
  }
  supportsLinks() {
    return false;
  }
  /**
   * Initialize the file system. Ensures that the wrapped file system
   * has the given folder.
   */
  _initialize(cb) {
    this._wrapped.exists(this._folder, Cred.Root, (exists) => {
      if (exists) {
        cb();
      } else if (this._wrapped.isReadOnly()) {
        cb(ApiError.ENOENT(this._folder));
      } else {
        this._wrapped.mkdir(this._folder, 511, Cred.Root, cb);
      }
    });
  }
};
var FolderAdapter = _FolderAdapter;
FolderAdapter.Name = "FolderAdapter";
FolderAdapter.Options = {
  folder: {
    type: "string",
    description: "The folder to use as the root directory"
  },
  wrapped: {
    type: "object",
    description: "The file system to wrap"
  }
};
function translateError(folder, e) {
  if (e !== null && typeof e === "object") {
    const err2 = e;
    let p = err2.path;
    if (p) {
      p = "/" + relative(folder, p);
      err2.message = err2.message.replace(err2.path, p);
      err2.path = p;
    }
  }
  return e;
}
function wrapCallback(folder, cb) {
  if (typeof cb === "function") {
    return function(err2) {
      if (arguments.length > 0) {
        arguments[0] = translateError(folder, err2);
      }
      cb.apply(null, arguments);
    };
  } else {
    return cb;
  }
}
function wrapFunction(name, wrapFirst, wrapSecond) {
  if (name.slice(name.length - 4) !== "Sync") {
    return function() {
      if (arguments.length > 0) {
        if (wrapFirst) {
          arguments[0] = join(this._folder, arguments[0]);
        }
        if (wrapSecond) {
          arguments[1] = join(this._folder, arguments[1]);
        }
        arguments[arguments.length - 1] = wrapCallback(this._folder, arguments[arguments.length - 1]);
      }
      return this._wrapped[name].apply(this._wrapped, arguments);
    };
  } else {
    return function() {
      try {
        if (wrapFirst) {
          arguments[0] = join(this._folder, arguments[0]);
        }
        if (wrapSecond) {
          arguments[1] = join(this._folder, arguments[1]);
        }
        return this._wrapped[name].apply(this._wrapped, arguments);
      } catch (e) {
        throw translateError(this._folder, e);
      }
    };
  }
}
[
  "diskSpace",
  "stat",
  "statSync",
  "open",
  "openSync",
  "unlink",
  "unlinkSync",
  "rmdir",
  "rmdirSync",
  "mkdir",
  "mkdirSync",
  "readdir",
  "readdirSync",
  "exists",
  "existsSync",
  "realpath",
  "realpathSync",
  "truncate",
  "truncateSync",
  "readFile",
  "readFileSync",
  "writeFile",
  "writeFileSync",
  "appendFile",
  "appendFileSync",
  "chmod",
  "chmodSync",
  "chown",
  "chownSync",
  "utimes",
  "utimesSync",
  "readlink",
  "readlinkSync"
].forEach((name) => {
  FolderAdapter.prototype[name] = wrapFunction(name, true, false);
});
["rename", "renameSync", "link", "linkSync", "symlink", "symlinkSync"].forEach((name) => {
  FolderAdapter.prototype[name] = wrapFunction(name, true, true);
});

// node-modules-polyfills:process
var process_exports = {};
__export(process_exports, {
  addListener: () => addListener,
  argv: () => argv,
  binding: () => binding,
  browser: () => browser,
  chdir: () => chdir,
  config: () => config,
  cwd: () => cwd,
  default: () => process_default,
  emit: () => emit,
  env: () => env,
  hrtime: () => hrtime,
  nextTick: () => nextTick,
  off: () => off,
  on: () => on,
  once: () => once,
  platform: () => platform,
  release: () => release,
  removeAllListeners: () => removeAllListeners,
  removeListener: () => removeListener,
  title: () => title,
  umask: () => umask,
  uptime: () => uptime,
  version: () => version,
  versions: () => versions
});
function defaultSetTimout() {
  throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
  throw new Error("clearTimeout has not been defined");
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof globalThis.setTimeout === "function") {
  cachedSetTimeout = setTimeout;
}
if (typeof globalThis.clearTimeout === "function") {
  cachedClearTimeout = clearTimeout;
}
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    return setTimeout(fun, 0);
  }
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e2) {
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    return clearTimeout(marker);
  }
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      return cachedClearTimeout.call(null, marker);
    } catch (e2) {
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
function nextTick(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function() {
  this.fun.apply(null, this.array);
};
var title = "browser";
var platform = "browser";
var browser = true;
var env = {};
var argv = [];
var version = "";
var versions = {};
var release = {};
var config = {};
function noop() {
}
var on = noop;
var addListener = noop;
var once = noop;
var off = noop;
var removeListener = noop;
var removeAllListeners = noop;
var emit = noop;
function binding(name) {
  throw new Error("process.binding is not supported");
}
function cwd() {
  return "/";
}
function chdir(dir) {
  throw new Error("process.chdir is not supported");
}
function umask() {
  return 0;
}
var performance = globalThis.performance || {};
var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function() {
  return (/* @__PURE__ */ new Date()).getTime();
};
function hrtime(previousTimestamp) {
  var clocktime = performanceNow.call(performance) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds, nanoseconds];
}
var startTime = /* @__PURE__ */ new Date();
function uptime() {
  var currentTime = /* @__PURE__ */ new Date();
  var dif = currentTime - startTime;
  return dif / 1e3;
}
var browser$1 = {
  nextTick,
  title,
  browser,
  env,
  argv,
  version,
  versions,
  on,
  addListener,
  once,
  off,
  removeListener,
  removeAllListeners,
  emit,
  binding,
  cwd,
  chdir,
  umask,
  hrtime,
  platform,
  release,
  config,
  uptime
};
var process_default = browser$1;

// src/generic/inode.ts
var Inode = class {
  constructor(id, size, mode, atime, mtime, ctime, uid, gid) {
    this.id = id;
    this.size = size;
    this.mode = mode;
    this.atime = atime;
    this.mtime = mtime;
    this.ctime = ctime;
    this.uid = uid;
    this.gid = gid;
  }
  /**
   * Converts the buffer into an Inode.
   */
  static fromBuffer(buffer) {
    if (buffer === void 0) {
      throw new Error("NO");
    }
    return new Inode(
      buffer.toString("ascii", 38),
      buffer.readUInt32LE(0),
      buffer.readUInt16LE(4),
      buffer.readDoubleLE(6),
      buffer.readDoubleLE(14),
      buffer.readDoubleLE(22),
      buffer.readUInt32LE(30),
      buffer.readUInt32LE(34)
    );
  }
  /**
   * Handy function that converts the Inode to a Node Stats object.
   */
  toStats() {
    return new Stats(
      (this.mode & 61440) === 16384 /* DIRECTORY */ ? 16384 /* DIRECTORY */ : 32768 /* FILE */,
      this.size,
      this.mode,
      this.atime,
      this.mtime,
      this.ctime,
      this.uid,
      this.gid
    );
  }
  /**
   * Get the size of this Inode, in bytes.
   */
  getSize() {
    return 38 + this.id.length;
  }
  /**
   * Writes the inode into the start of the buffer.
   */
  toBuffer(buff = Buffer2.alloc(this.getSize())) {
    buff.writeUInt32LE(this.size, 0);
    buff.writeUInt16LE(this.mode, 4);
    buff.writeDoubleLE(this.atime, 6);
    buff.writeDoubleLE(this.mtime, 14);
    buff.writeDoubleLE(this.ctime, 22);
    buff.writeUInt32LE(this.uid, 30);
    buff.writeUInt32LE(this.gid, 34);
    buff.write(this.id, 38, this.id.length, "ascii");
    return buff;
  }
  /**
   * Updates the Inode using information from the stats object. Used by file
   * systems at sync time, e.g.:
   * - Program opens file and gets a File object.
   * - Program mutates file. File object is responsible for maintaining
   *   metadata changes locally -- typically in a Stats object.
   * - Program closes file. File object's metadata changes are synced with the
   *   file system.
   * @return True if any changes have occurred.
   */
  update(stats) {
    let hasChanged = false;
    if (this.size !== stats.size) {
      this.size = stats.size;
      hasChanged = true;
    }
    if (this.mode !== stats.mode) {
      this.mode = stats.mode;
      hasChanged = true;
    }
    const atimeMs = stats.atime.getTime();
    if (this.atime !== atimeMs) {
      this.atime = atimeMs;
      hasChanged = true;
    }
    const mtimeMs = stats.mtime.getTime();
    if (this.mtime !== mtimeMs) {
      this.mtime = mtimeMs;
      hasChanged = true;
    }
    const ctimeMs = stats.ctime.getTime();
    if (this.ctime !== ctimeMs) {
      this.ctime = ctimeMs;
      hasChanged = true;
    }
    if (this.uid !== stats.uid) {
      this.uid = stats.uid;
      hasChanged = true;
    }
    if (this.uid !== stats.uid) {
      this.uid = stats.uid;
      hasChanged = true;
    }
    return hasChanged;
  }
  // XXX: Copied from Stats. Should reconcile these two into something more
  //      compact.
  /**
   * @return [Boolean] True if this item is a file.
   */
  isFile() {
    return (this.mode & 61440) === 32768 /* FILE */;
  }
  /**
   * @return [Boolean] True if this item is a directory.
   */
  isDirectory() {
    return (this.mode & 61440) === 16384 /* DIRECTORY */;
  }
};

// src/generic/key_value_filesystem.ts
var ROOT_NODE_ID = "/";
var emptyDirNode = null;
function getEmptyDirNode() {
  if (emptyDirNode) {
    return emptyDirNode;
  }
  return emptyDirNode = Buffer2.from("{}");
}
function GenerateRandomID() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
}
function noError(e, cb) {
  if (e) {
    cb(e);
    return false;
  }
  return true;
}
function noErrorTx(e, tx, cb) {
  if (e) {
    tx.abort(() => {
      cb(e);
    });
    return false;
  }
  return true;
}
var LRUNode = class {
  constructor(key, value) {
    this.key = key;
    this.value = value;
    this.prev = null;
    this.next = null;
  }
};
var LRUCache = class {
  constructor(limit) {
    this.limit = limit;
    this.size = 0;
    this.map = {};
    this.head = null;
    this.tail = null;
  }
  /**
   * Change or add a new value in the cache
   * We overwrite the entry if it already exists
   */
  set(key, value) {
    const node = new LRUNode(key, value);
    if (this.map[key]) {
      this.map[key].value = node.value;
      this.remove(node.key);
    } else {
      if (this.size >= this.limit) {
        delete this.map[this.tail.key];
        this.size--;
        this.tail = this.tail.prev;
        this.tail.next = null;
      }
    }
    this.setHead(node);
  }
  /* Retrieve a single entry from the cache */
  get(key) {
    if (this.map[key]) {
      const value = this.map[key].value;
      const node = new LRUNode(key, value);
      this.remove(key);
      this.setHead(node);
      return value;
    } else {
      return null;
    }
  }
  /* Remove a single entry from the cache */
  remove(key) {
    const node = this.map[key];
    if (!node) {
      return;
    }
    if (node.prev !== null) {
      node.prev.next = node.next;
    } else {
      this.head = node.next;
    }
    if (node.next !== null) {
      node.next.prev = node.prev;
    } else {
      this.tail = node.prev;
    }
    delete this.map[key];
    this.size--;
  }
  /* Resets the entire cache - Argument limit is optional to be reset */
  removeAll() {
    this.size = 0;
    this.map = {};
    this.head = null;
    this.tail = null;
  }
  setHead(node) {
    node.next = this.head;
    node.prev = null;
    if (this.head !== null) {
      this.head.prev = node;
    }
    this.head = node;
    if (this.tail === null) {
      this.tail = node;
    }
    this.size++;
    this.map[node.key] = node;
  }
};
var SimpleSyncRWTransaction = class {
  constructor(store) {
    this.store = store;
    /**
     * Stores data in the keys we modify prior to modifying them.
     * Allows us to roll back commits.
     */
    this.originalData = {};
    /**
     * List of keys modified in this transaction, if any.
     */
    this.modifiedKeys = [];
  }
  get(key) {
    const val = this.store.get(key);
    this.stashOldValue(key, val);
    return val;
  }
  put(key, data, overwrite) {
    this.markModified(key);
    return this.store.put(key, data, overwrite);
  }
  del(key) {
    this.markModified(key);
    this.store.del(key);
  }
  commit() {
  }
  abort() {
    for (const key of this.modifiedKeys) {
      const value = this.originalData[key];
      if (!value) {
        this.store.del(key);
      } else {
        this.store.put(key, value, true);
      }
    }
  }
  _has(key) {
    return Object.prototype.hasOwnProperty.call(this.originalData, key);
  }
  /**
   * Stashes given key value pair into `originalData` if it doesn't already
   * exist. Allows us to stash values the program is requesting anyway to
   * prevent needless `get` requests if the program modifies the data later
   * on during the transaction.
   */
  stashOldValue(key, value) {
    if (!this._has(key)) {
      this.originalData[key] = value;
    }
  }
  /**
   * Marks the given key as modified, and stashes its value if it has not been
   * stashed already.
   */
  markModified(key) {
    if (this.modifiedKeys.indexOf(key) === -1) {
      this.modifiedKeys.push(key);
      if (!this._has(key)) {
        this.originalData[key] = this.store.get(key);
      }
    }
  }
};
var SyncKeyValueFile = class extends PreloadFile {
  constructor(_fs, _path, _flag, _stat, contents) {
    super(_fs, _path, _flag, _stat, contents);
  }
  syncSync() {
    if (this.isDirty()) {
      this._fs._syncSync(this.getPath(), this.getBuffer(), this.getStats());
      this.resetDirty();
    }
  }
  closeSync() {
    this.syncSync();
  }
};
var SyncKeyValueFileSystem = class extends SynchronousFileSystem {
  constructor(options) {
    super();
    this.store = options.store;
    this.makeRootDirectory();
  }
  static isAvailable() {
    return true;
  }
  getName() {
    return this.store.name();
  }
  isReadOnly() {
    return false;
  }
  supportsSymlinks() {
    return false;
  }
  supportsProps() {
    return true;
  }
  supportsSynch() {
    return true;
  }
  /**
   * Delete all contents stored in the file system.
   */
  empty() {
    this.store.clear();
    this.makeRootDirectory();
  }
  accessSync(p, mode, cred) {
    const tx = this.store.beginTransaction("readonly"), node = this.findINode(tx, p);
    if (!node.toStats().hasAccess(mode, cred)) {
      throw ApiError.EACCES(p);
    }
  }
  renameSync(oldPath, newPath, cred) {
    const tx = this.store.beginTransaction("readwrite"), oldParent = dirname(oldPath), oldName = basename(oldPath), newParent = dirname(newPath), newName = basename(newPath), oldDirNode = this.findINode(tx, oldParent), oldDirList = this.getDirListing(tx, oldParent, oldDirNode);
    if (!oldDirNode.toStats().hasAccess(2 /* WRITE */, cred)) {
      throw ApiError.EACCES(oldPath);
    }
    if (!oldDirList[oldName]) {
      throw ApiError.ENOENT(oldPath);
    }
    const nodeId = oldDirList[oldName];
    delete oldDirList[oldName];
    if ((newParent + "/").indexOf(oldPath + "/") === 0) {
      throw new ApiError(16 /* EBUSY */, oldParent);
    }
    let newDirNode, newDirList;
    if (newParent === oldParent) {
      newDirNode = oldDirNode;
      newDirList = oldDirList;
    } else {
      newDirNode = this.findINode(tx, newParent);
      newDirList = this.getDirListing(tx, newParent, newDirNode);
    }
    if (newDirList[newName]) {
      const newNameNode = this.getINode(tx, newPath, newDirList[newName]);
      if (newNameNode.isFile()) {
        try {
          tx.del(newNameNode.id);
          tx.del(newDirList[newName]);
        } catch (e) {
          tx.abort();
          throw e;
        }
      } else {
        throw ApiError.EPERM(newPath);
      }
    }
    newDirList[newName] = nodeId;
    try {
      tx.put(oldDirNode.id, Buffer2.from(JSON.stringify(oldDirList)), true);
      tx.put(newDirNode.id, Buffer2.from(JSON.stringify(newDirList)), true);
    } catch (e) {
      tx.abort();
      throw e;
    }
    tx.commit();
  }
  statSync(p, isLstat, cred) {
    const stats = this.findINode(this.store.beginTransaction("readonly"), p).toStats();
    if (!stats.hasAccess(4 /* READ */, cred)) {
      throw ApiError.EACCES(p);
    }
    return stats;
  }
  createFileSync(p, flag, mode, cred) {
    const tx = this.store.beginTransaction("readwrite"), data = emptyBuffer(), newFile = this.commitNewFile(tx, p, 32768 /* FILE */, mode, cred, data);
    return new SyncKeyValueFile(this, p, flag, newFile.toStats(), data);
  }
  openFileSync(p, flag, cred) {
    const tx = this.store.beginTransaction("readonly"), node = this.findINode(tx, p), data = tx.get(node.id);
    if (!node.toStats().hasAccess(flag.getMode(), cred)) {
      throw ApiError.EACCES(p);
    }
    if (data === void 0) {
      throw ApiError.ENOENT(p);
    }
    return new SyncKeyValueFile(this, p, flag, node.toStats(), data);
  }
  unlinkSync(p, cred) {
    this.removeEntry(p, false, cred);
  }
  rmdirSync(p, cred) {
    if (this.readdirSync(p, cred).length > 0) {
      throw ApiError.ENOTEMPTY(p);
    } else {
      this.removeEntry(p, true, cred);
    }
  }
  mkdirSync(p, mode, cred) {
    const tx = this.store.beginTransaction("readwrite"), data = Buffer2.from("{}");
    this.commitNewFile(tx, p, 16384 /* DIRECTORY */, mode, cred, data);
  }
  readdirSync(p, cred) {
    const tx = this.store.beginTransaction("readonly");
    const node = this.findINode(tx, p);
    if (!node.toStats().hasAccess(4 /* READ */, cred)) {
      throw ApiError.EACCES(p);
    }
    return Object.keys(this.getDirListing(tx, p, node));
  }
  chmodSync(p, isLchmod, mode, cred) {
    const path = isLchmod ? p : this.realpathSync(p, {}, cred);
    const fd = this.openFileSync(path, FileFlag.getFileFlag("r+"), cred);
    fd.chmodSync(mode);
  }
  chownSync(p, isLchown, new_uid, new_gid, cred) {
    const path = isLchown ? p : this.realpathSync(p, {}, cred);
    const fd = this.openFileSync(path, FileFlag.getFileFlag("r+"), cred);
    fd.chownSync(cred.euid, cred.egid);
  }
  _syncSync(p, data, stats) {
    const tx = this.store.beginTransaction("readwrite"), fileInodeId = this._findINode(tx, dirname(p), basename(p)), fileInode = this.getINode(tx, p, fileInodeId), inodeChanged = fileInode.update(stats);
    try {
      tx.put(fileInode.id, data, true);
      if (inodeChanged) {
        tx.put(fileInodeId, fileInode.toBuffer(), true);
      }
    } catch (e) {
      tx.abort();
      throw e;
    }
    tx.commit();
  }
  /**
   * Checks if the root directory exists. Creates it if it doesn't.
   */
  makeRootDirectory() {
    const tx = this.store.beginTransaction("readwrite");
    if (tx.get(ROOT_NODE_ID) === void 0) {
      const currTime = (/* @__PURE__ */ new Date()).getTime(), dirInode = new Inode(GenerateRandomID(), 4096, 511 | 16384 /* DIRECTORY */, currTime, currTime, currTime, 0, 0);
      tx.put(dirInode.id, getEmptyDirNode(), false);
      tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false);
      tx.commit();
    }
  }
  /**
   * Helper function for findINode.
   * @param parent The parent directory of the file we are attempting to find.
   * @param filename The filename of the inode we are attempting to find, minus
   *   the parent.
   * @return string The ID of the file's inode in the file system.
   */
  _findINode(tx, parent, filename) {
    const readDirectory = (inode) => {
      const dirList = this.getDirListing(tx, parent, inode);
      if (dirList[filename]) {
        return dirList[filename];
      } else {
        throw ApiError.ENOENT(resolve(parent, filename));
      }
    };
    if (parent === ".") {
      parent = cwd();
    }
    if (parent === "/") {
      if (filename === "") {
        return ROOT_NODE_ID;
      } else {
        return readDirectory(this.getINode(tx, parent, ROOT_NODE_ID));
      }
    } else {
      return readDirectory(this.getINode(tx, parent + sep + filename, this._findINode(tx, dirname(parent), basename(parent))));
    }
  }
  /**
   * Finds the Inode of the given path.
   * @param p The path to look up.
   * @return The Inode of the path p.
   * @todo memoize/cache
   */
  findINode(tx, p) {
    return this.getINode(tx, p, this._findINode(tx, dirname(p), basename(p)));
  }
  /**
   * Given the ID of a node, retrieves the corresponding Inode.
   * @param tx The transaction to use.
   * @param p The corresponding path to the file (used for error messages).
   * @param id The ID to look up.
   */
  getINode(tx, p, id) {
    const inode = tx.get(id);
    if (inode === void 0) {
      throw ApiError.ENOENT(p);
    }
    return Inode.fromBuffer(inode);
  }
  /**
   * Given the Inode of a directory, retrieves the corresponding directory
   * listing.
   */
  getDirListing(tx, p, inode) {
    if (!inode.isDirectory()) {
      throw ApiError.ENOTDIR(p);
    }
    const data = tx.get(inode.id);
    if (data === void 0) {
      throw ApiError.ENOENT(p);
    }
    return JSON.parse(data.toString());
  }
  /**
   * Creates a new node under a random ID. Retries 5 times before giving up in
   * the exceedingly unlikely chance that we try to reuse a random GUID.
   * @return The GUID that the data was stored under.
   */
  addNewNode(tx, data) {
    const retries = 0;
    let currId;
    while (retries < 5) {
      try {
        currId = GenerateRandomID();
        tx.put(currId, data, false);
        return currId;
      } catch (e) {
      }
    }
    throw new ApiError(5 /* EIO */, "Unable to commit data to key-value store.");
  }
  /**
   * Commits a new file (well, a FILE or a DIRECTORY) to the file system with
   * the given mode.
   * Note: This will commit the transaction.
   * @param p The path to the new file.
   * @param type The type of the new file.
   * @param mode The mode to create the new file with.
   * @param data The data to store at the file's data node.
   * @return The Inode for the new file.
   */
  commitNewFile(tx, p, type, mode, cred, data) {
    const parentDir = dirname(p), fname = basename(p), parentNode = this.findINode(tx, parentDir), dirListing = this.getDirListing(tx, parentDir, parentNode), currTime = (/* @__PURE__ */ new Date()).getTime();
    if (!parentNode.toStats().hasAccess(4, cred)) {
      throw ApiError.EACCES(p);
    }
    if (p === "/") {
      throw ApiError.EEXIST(p);
    }
    if (dirListing[fname]) {
      throw ApiError.EEXIST(p);
    }
    let fileNode;
    try {
      const dataId = this.addNewNode(tx, data);
      fileNode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime, cred.uid, cred.gid);
      const fileNodeId = this.addNewNode(tx, fileNode.toBuffer());
      dirListing[fname] = fileNodeId;
      tx.put(parentNode.id, Buffer2.from(JSON.stringify(dirListing)), true);
    } catch (e) {
      tx.abort();
      throw e;
    }
    tx.commit();
    return fileNode;
  }
  /**
   * Remove all traces of the given path from the file system.
   * @param p The path to remove from the file system.
   * @param isDir Does the path belong to a directory, or a file?
   * @todo Update mtime.
   */
  removeEntry(p, isDir, cred) {
    const tx = this.store.beginTransaction("readwrite"), parent = dirname(p), parentNode = this.findINode(tx, parent), parentListing = this.getDirListing(tx, parent, parentNode), fileName = basename(p);
    if (!parentListing[fileName]) {
      throw ApiError.ENOENT(p);
    }
    const fileNodeId = parentListing[fileName];
    const fileNode = this.getINode(tx, p, fileNodeId);
    if (!fileNode.toStats().hasAccess(2 /* WRITE */, cred)) {
      throw ApiError.EACCES(p);
    }
    delete parentListing[fileName];
    if (!isDir && fileNode.isDirectory()) {
      throw ApiError.EISDIR(p);
    } else if (isDir && !fileNode.isDirectory()) {
      throw ApiError.ENOTDIR(p);
    }
    try {
      tx.del(fileNode.id);
      tx.del(fileNodeId);
      tx.put(parentNode.id, Buffer2.from(JSON.stringify(parentListing)), true);
    } catch (e) {
      tx.abort();
      throw e;
    }
    tx.commit();
  }
};
var AsyncKeyValueFile = class extends PreloadFile {
  constructor(_fs, _path, _flag, _stat, contents) {
    super(_fs, _path, _flag, _stat, contents);
  }
  sync(cb) {
    if (this.isDirty()) {
      this._fs._sync(this.getPath(), this.getBuffer(), this.getStats(), (e) => {
        if (!e) {
          this.resetDirty();
        }
        cb(e);
      });
    } else {
      cb();
    }
  }
  close(cb) {
    this.sync(cb);
  }
};
var AsyncKeyValueFileSystem = class extends BaseFileSystem {
  constructor(cacheSize) {
    super();
    this._cache = null;
    if (cacheSize > 0) {
      this._cache = new LRUCache(cacheSize);
    }
  }
  static isAvailable() {
    return true;
  }
  /**
   * Initializes the file system. Typically called by subclasses' async
   * constructors.
   */
  init(store, cb) {
    this.store = store;
    this.makeRootDirectory(cb);
  }
  getName() {
    return this.store.name();
  }
  isReadOnly() {
    return false;
  }
  supportsSymlinks() {
    return false;
  }
  supportsProps() {
    return true;
  }
  supportsSynch() {
    return false;
  }
  /**
   * Delete all contents stored in the file system.
   */
  empty(cb) {
    if (this._cache) {
      this._cache.removeAll();
    }
    this.store.clear((e) => {
      if (noError(e, cb)) {
        this.makeRootDirectory(cb);
      }
    });
  }
  access(p, mode, cred, cb) {
    const tx = this.store.beginTransaction("readonly");
    this.findINode(tx, p, (inode) => {
      if (inode instanceof Inode) {
        if (!inode.toStats().hasAccess(mode, cred)) {
          cb(ApiError.EACCES(p));
        }
      } else {
        cb(inode);
      }
    });
  }
  rename(oldPath, newPath, cred, cb) {
    if (this._cache) {
      const c = this._cache;
      this._cache = null;
      c.removeAll();
      const oldCb = cb;
      cb = (e) => {
        this._cache = c;
        oldCb(e);
      };
    }
    const tx = this.store.beginTransaction("readwrite");
    const oldParent = dirname(oldPath), oldName = basename(oldPath);
    const newParent = dirname(newPath), newName = basename(newPath);
    const inodes = {};
    const lists = {};
    let errorOccurred = false;
    if ((newParent + "/").indexOf(oldPath + "/") === 0) {
      return cb(new ApiError(16 /* EBUSY */, oldParent));
    }
    const theOleSwitcharoo = () => {
      if (errorOccurred || !Object.prototype.hasOwnProperty.call(lists, oldParent) || !Object.prototype.hasOwnProperty.call(lists, newParent)) {
        return;
      }
      const oldParentList = lists[oldParent], oldParentINode = inodes[oldParent], newParentList = lists[newParent], newParentINode = inodes[newParent];
      if (!oldParentList[oldName]) {
        cb(ApiError.ENOENT(oldPath));
      } else {
        const fileId = oldParentList[oldName];
        delete oldParentList[oldName];
        const completeRename = () => {
          newParentList[newName] = fileId;
          tx.put(oldParentINode.id, Buffer2.from(JSON.stringify(oldParentList)), true, (e) => {
            if (noErrorTx(e, tx, cb)) {
              if (oldParent === newParent) {
                tx.commit(cb);
              } else {
                tx.put(newParentINode.id, Buffer2.from(JSON.stringify(newParentList)), true, (e2) => {
                  if (noErrorTx(e2, tx, cb)) {
                    tx.commit(cb);
                  }
                });
              }
            }
          });
        };
        if (newParentList[newName]) {
          this.getINode(tx, newPath, newParentList[newName], (e, inode) => {
            if (noErrorTx(e, tx, cb)) {
              if (inode.isFile()) {
                tx.del(inode.id, (e2) => {
                  if (noErrorTx(e2, tx, cb)) {
                    tx.del(newParentList[newName], (e3) => {
                      if (noErrorTx(e3, tx, cb)) {
                        completeRename();
                      }
                    });
                  }
                });
              } else {
                tx.abort((e2) => {
                  cb(ApiError.EPERM(newPath));
                });
              }
            }
          });
        } else {
          completeRename();
        }
      }
    };
    const processInodeAndListings = (p) => {
      this.findINodeAndDirListing(tx, p, (e, node, dirList) => {
        if (!node.toStats().hasAccess(2 /* WRITE */, cred)) {
          throw ApiError.EACCES(p);
        }
        if (e) {
          if (!errorOccurred) {
            errorOccurred = true;
            tx.abort(() => {
              cb(e);
            });
          }
        } else {
          inodes[p] = node;
          lists[p] = dirList;
          theOleSwitcharoo();
        }
      });
    };
    processInodeAndListings(oldParent);
    if (oldParent !== newParent) {
      processInodeAndListings(newParent);
    }
  }
  stat(p, isLstat, cred, cb) {
    const tx = this.store.beginTransaction("readonly");
    this.findINode(tx, p, (e, inode) => {
      if (noError(e, cb)) {
        const stats = inode.toStats();
        if (!stats.hasAccess(4 /* READ */, cred)) {
          cb(ApiError.EACCES(p));
        }
        cb(null, stats);
      }
    });
  }
  createFile(p, flag, mode, cred, cb) {
    const tx = this.store.beginTransaction("readwrite"), data = emptyBuffer();
    this.commitNewFile(tx, p, 32768 /* FILE */, mode, cred, data, (e, newFile) => {
      if (noError(e, cb)) {
        cb(null, new AsyncKeyValueFile(this, p, flag, newFile.toStats(), data));
      }
    });
  }
  openFile(p, flag, cred, cb) {
    const tx = this.store.beginTransaction("readonly");
    this.findINode(tx, p, (e, inode) => {
      if (noError(e, cb)) {
        const stats = inode.toStats();
        if (!stats.hasAccess(flag.getMode(), cred)) {
          cb(ApiError.EACCES(p));
        }
        tx.get(inode.id, (e2, data) => {
          if (noError(e2, cb)) {
            if (data === void 0) {
              cb(ApiError.ENOENT(p));
            } else {
              cb(null, new AsyncKeyValueFile(this, p, flag, stats, data));
            }
          }
        });
      }
    });
  }
  unlink(p, cred, cb) {
    this.removeEntry(p, false, cred, cb);
  }
  rmdir(p, cred, cb) {
    this.readdir(p, cred, (err2, files) => {
      if (err2) {
        cb(err2);
      } else if (files.length > 0) {
        cb(ApiError.ENOTEMPTY(p));
      } else {
        this.removeEntry(p, true, cred, cb);
      }
    });
  }
  mkdir(p, mode, cred, cb) {
    const tx = this.store.beginTransaction("readwrite"), data = Buffer2.from("{}");
    this.commitNewFile(tx, p, 16384 /* DIRECTORY */, mode, cred, data, cb);
  }
  readdir(p, cred, cb) {
    const tx = this.store.beginTransaction("readonly");
    this.findINode(tx, p, (e, inode) => {
      if (noError(e, cb)) {
        if (!inode.toStats().hasAccess(4 /* READ */, cred)) {
          cb(ApiError.EACCES(p));
        }
        this.getDirListing(tx, p, inode, (e2, dirListing) => {
          if (noError(e2, cb)) {
            cb(null, Object.keys(dirListing));
          }
        });
      }
    });
  }
  _sync(p, data, stats, cb) {
    const tx = this.store.beginTransaction("readwrite");
    this._findINode(tx, dirname(p), basename(p), (e, fileInodeId) => {
      if (noErrorTx(e, tx, cb)) {
        this.getINode(tx, p, fileInodeId, (e2, fileInode) => {
          if (noErrorTx(e2, tx, cb)) {
            const inodeChanged = fileInode.update(stats);
            tx.put(fileInode.id, data, true, (e3) => {
              if (noErrorTx(e3, tx, cb)) {
                if (inodeChanged) {
                  tx.put(fileInodeId, fileInode.toBuffer(), true, (e4) => {
                    if (noErrorTx(e4, tx, cb)) {
                      tx.commit(cb);
                    }
                  });
                } else {
                  tx.commit(cb);
                }
              }
            });
          }
        });
      }
    });
  }
  /**
   * Checks if the root directory exists. Creates it if it doesn't.
   */
  makeRootDirectory(cb) {
    const tx = this.store.beginTransaction("readwrite");
    tx.get(ROOT_NODE_ID, (e, data) => {
      if (e || data === void 0) {
        const currTime = (/* @__PURE__ */ new Date()).getTime(), dirInode = new Inode(GenerateRandomID(), 4096, 511 | 16384 /* DIRECTORY */, currTime, currTime, currTime, 0, 0);
        tx.put(dirInode.id, getEmptyDirNode(), false, (e2) => {
          if (noErrorTx(e2, tx, cb)) {
            tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false, (e3) => {
              if (e3) {
                tx.abort(() => {
                  cb(e3);
                });
              } else {
                tx.commit(cb);
              }
            });
          }
        });
      } else {
        tx.commit(cb);
      }
    });
  }
  /**
   * Helper function for findINode.
   * @param parent The parent directory of the file we are attempting to find.
   * @param filename The filename of the inode we are attempting to find, minus
   *   the parent.
   * @param cb Passed an error or the ID of the file's inode in the file system.
   */
  _findINode(tx, parent, filename, cb) {
    if (this._cache) {
      const id = this._cache.get(join(parent, filename));
      if (id) {
        return cb(null, id);
      }
    }
    const handleDirectoryListings = (e, inode, dirList) => {
      if (e) {
        cb(e);
      } else if (dirList[filename]) {
        const id = dirList[filename];
        if (this._cache) {
          this._cache.set(join(parent, filename), id);
        }
        cb(null, id);
      } else {
        cb(ApiError.ENOENT(resolve(parent, filename)));
      }
    };
    if (parent === "/") {
      if (filename === "") {
        if (this._cache) {
          this._cache.set(join(parent, filename), ROOT_NODE_ID);
        }
        cb(null, ROOT_NODE_ID);
      } else {
        this.getINode(tx, parent, ROOT_NODE_ID, (e, inode) => {
          if (noError(e, cb)) {
            this.getDirListing(tx, parent, inode, (e2, dirList) => {
              handleDirectoryListings(e2, inode, dirList);
            });
          }
        });
      }
    } else {
      this.findINodeAndDirListing(tx, parent, handleDirectoryListings);
    }
  }
  /**
   * Finds the Inode of the given path.
   * @param p The path to look up.
   * @param cb Passed an error or the Inode of the path p.
   * @todo memoize/cache
   */
  findINode(tx, p, cb) {
    this._findINode(tx, dirname(p), basename(p), (e, id) => {
      if (noError(e, cb)) {
        this.getINode(tx, p, id, cb);
      }
    });
  }
  /**
   * Given the ID of a node, retrieves the corresponding Inode.
   * @param tx The transaction to use.
   * @param p The corresponding path to the file (used for error messages).
   * @param id The ID to look up.
   * @param cb Passed an error or the inode under the given id.
   */
  getINode(tx, p, id, cb) {
    tx.get(id, (e, data) => {
      if (noError(e, cb)) {
        if (data === void 0) {
          cb(ApiError.ENOENT(p));
        } else {
          cb(null, Inode.fromBuffer(data));
        }
      }
    });
  }
  /**
   * Given the Inode of a directory, retrieves the corresponding directory
   * listing.
   */
  getDirListing(tx, p, inode, cb) {
    if (!inode.isDirectory()) {
      cb(ApiError.ENOTDIR(p));
    } else {
      tx.get(inode.id, (e, data) => {
        if (noError(e, cb)) {
          try {
            cb(null, JSON.parse(data.toString()));
          } catch (e2) {
            cb(ApiError.ENOENT(p));
          }
        }
      });
    }
  }
  /**
   * Given a path to a directory, retrieves the corresponding INode and
   * directory listing.
   */
  findINodeAndDirListing(tx, p, cb) {
    this.findINode(tx, p, (e, inode) => {
      if (noError(e, cb)) {
        this.getDirListing(tx, p, inode, (e2, listing) => {
          if (noError(e2, cb)) {
            cb(null, inode, listing);
          }
        });
      }
    });
  }
  /**
   * Adds a new node under a random ID. Retries 5 times before giving up in
   * the exceedingly unlikely chance that we try to reuse a random GUID.
   * @param cb Passed an error or the GUID that the data was stored under.
   */
  addNewNode(tx, data, cb) {
    let retries = 0, currId;
    const reroll = () => {
      if (++retries === 5) {
        cb(new ApiError(5 /* EIO */, "Unable to commit data to key-value store."));
      } else {
        currId = GenerateRandomID();
        tx.put(currId, data, false, (e, committed) => {
          if (e || !committed) {
            reroll();
          } else {
            cb(null, currId);
          }
        });
      }
    };
    reroll();
  }
  /**
   * Commits a new file (well, a FILE or a DIRECTORY) to the file system with
   * the given mode.
   * Note: This will commit the transaction.
   * @param p The path to the new file.
   * @param type The type of the new file.
   * @param mode The mode to create the new file with.
   * @param uid The UID to create the file with
   * @param gid The GID to create the file with
   * @param data The data to store at the file's data node.
   * @param cb Passed an error or the Inode for the new file.
   */
  commitNewFile(tx, p, type, mode, cred, data, cb) {
    const parentDir = dirname(p), fname = basename(p), currTime = (/* @__PURE__ */ new Date()).getTime();
    if (p === "/") {
      return cb(ApiError.EEXIST(p));
    }
    this.findINodeAndDirListing(tx, parentDir, (e, parentNode, dirListing) => {
      if (!parentNode.toStats().hasAccess(2 /* WRITE */, cred)) {
        cb(ApiError.EACCES(p));
      }
      if (noErrorTx(e, tx, cb)) {
        if (dirListing[fname]) {
          tx.abort(() => {
            cb(ApiError.EEXIST(p));
          });
        } else {
          this.addNewNode(tx, data, (e2, dataId) => {
            if (noErrorTx(e2, tx, cb)) {
              const fileInode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime, cred.euid, cred.egid);
              this.addNewNode(tx, fileInode.toBuffer(), (e3, fileInodeId) => {
                if (noErrorTx(e3, tx, cb)) {
                  dirListing[fname] = fileInodeId;
                  tx.put(parentNode.id, Buffer2.from(JSON.stringify(dirListing)), true, (e4) => {
                    if (noErrorTx(e4, tx, cb)) {
                      tx.commit((e5) => {
                        if (noErrorTx(e5, tx, cb)) {
                          cb(null, fileInode);
                        }
                      });
                    }
                  });
                }
              });
            }
          });
        }
      }
    });
  }
  /**
   * Remove all traces of the given path from the file system.
   * @param p The path to remove from the file system.
   * @param isDir Does the path belong to a directory, or a file?
   * @todo Update mtime.
   */
  removeEntry(p, isDir, cred, cb) {
    if (this._cache) {
      this._cache.remove(p);
    }
    const tx = this.store.beginTransaction("readwrite"), parent = dirname(p), fileName = basename(p);
    this.findINodeAndDirListing(tx, parent, (e, parentNode, parentListing) => {
      if (!parentNode.toStats().hasAccess(2 /* WRITE */, cred)) {
        cb(ApiError.EACCES(p));
      }
      if (noErrorTx(e, tx, cb)) {
        if (!parentListing[fileName]) {
          tx.abort(() => {
            cb(ApiError.ENOENT(p));
          });
        } else {
          const fileNodeId = parentListing[fileName];
          delete parentListing[fileName];
          this.getINode(tx, p, fileNodeId, (e2, fileNode) => {
            if (noErrorTx(e2, tx, cb)) {
              if (!isDir && fileNode.isDirectory()) {
                tx.abort(() => {
                  cb(ApiError.EISDIR(p));
                });
              } else if (isDir && !fileNode.isDirectory()) {
                tx.abort(() => {
                  cb(ApiError.ENOTDIR(p));
                });
              } else {
                tx.del(fileNode.id, (e3) => {
                  if (noErrorTx(e3, tx, cb)) {
                    tx.del(fileNodeId, (e4) => {
                      if (noErrorTx(e4, tx, cb)) {
                        tx.put(parentNode.id, Buffer2.from(JSON.stringify(parentListing)), true, (e5) => {
                          if (noErrorTx(e5, tx, cb)) {
                            tx.commit(cb);
                          }
                        });
                      }
                    });
                  }
                });
              }
            }
          });
        }
      }
    });
  }
};

// src/backend/InMemory.ts
var InMemoryStore = class {
  constructor() {
    this.store = /* @__PURE__ */ new Map();
  }
  name() {
    return InMemoryFileSystem.Name;
  }
  clear() {
    this.store.clear();
  }
  beginTransaction(type) {
    return new SimpleSyncRWTransaction(this);
  }
  get(key) {
    return this.store.get(key);
  }
  put(key, data, overwrite) {
    if (!overwrite && this.store.has(key)) {
      return false;
    }
    this.store.set(key, data);
    return true;
  }
  del(key) {
    this.store.delete(key);
  }
};
var _InMemoryFileSystem = class extends SyncKeyValueFileSystem {
  /**
   * Creates an InMemoryFileSystem instance.
   */
  static Create(options, cb) {
    cb(null, new _InMemoryFileSystem());
  }
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  constructor() {
    super({ store: new InMemoryStore() });
  }
};
var InMemoryFileSystem = _InMemoryFileSystem;
InMemoryFileSystem.Name = "InMemory";
InMemoryFileSystem.Options = {};

// src/backend/IndexedDB.ts
var indexedDB = (() => {
  try {
    return globalThis.indexedDB || globalThis.mozIndexedDB || globalThis.webkitIndexedDB || globalThis.msIndexedDB;
  } catch (e) {
    return null;
  }
})();
function convertError2(e, message = e.toString()) {
  switch (e.name) {
    case "NotFoundError":
      return new ApiError(2 /* ENOENT */, message);
    case "QuotaExceededError":
      return new ApiError(28 /* ENOSPC */, message);
    default:
      return new ApiError(5 /* EIO */, message);
  }
}
function onErrorHandler(cb, code = 5 /* EIO */, message = null) {
  return function(e) {
    e.preventDefault();
    cb(new ApiError(code, message !== null ? message : void 0));
  };
}
var IndexedDBROTransaction = class {
  constructor(tx, store) {
    this.tx = tx;
    this.store = store;
  }
  get(key, cb) {
    try {
      const r = this.store.get(key);
      r.onerror = onErrorHandler(cb);
      r.onsuccess = (event) => {
        const result = event.target.result;
        if (result === void 0) {
          cb(null, result);
        } else {
          cb(null, arrayBuffer2Buffer(result));
        }
      };
    } catch (e) {
      cb(convertError2(e));
    }
  }
};
var IndexedDBRWTransaction = class extends IndexedDBROTransaction {
  constructor(tx, store) {
    super(tx, store);
  }
  put(key, data, overwrite, cb) {
    try {
      const arraybuffer = buffer2ArrayBuffer(data);
      let r;
      r = overwrite ? this.store.put(arraybuffer, key) : this.store.add(arraybuffer, key);
      r.onerror = onErrorHandler(cb);
      r.onsuccess = (event) => {
        cb(null, true);
      };
    } catch (e) {
      cb(convertError2(e));
    }
  }
  del(key, cb) {
    try {
      const r = this.store["delete"](key);
      r.onerror = onErrorHandler(cb);
      r.onsuccess = (event) => {
        cb();
      };
    } catch (e) {
      cb(convertError2(e));
    }
  }
  commit(cb) {
    setTimeout(cb, 0);
  }
  abort(cb) {
    let _e = null;
    try {
      this.tx.abort();
    } catch (e) {
      _e = convertError2(e);
    } finally {
      cb(_e);
    }
  }
};
var IndexedDBStore = class {
  constructor(db, storeName) {
    this.db = db;
    this.storeName = storeName;
  }
  static Create(storeName, cb) {
    const openReq = indexedDB.open(storeName, 1);
    openReq.onupgradeneeded = (event) => {
      const db = event.target.result;
      if (db.objectStoreNames.contains(storeName)) {
        db.deleteObjectStore(storeName);
      }
      db.createObjectStore(storeName);
    };
    openReq.onsuccess = (event) => {
      cb(null, new IndexedDBStore(event.target.result, storeName));
    };
    openReq.onerror = onErrorHandler(cb, 13 /* EACCES */);
  }
  name() {
    return IndexedDBFileSystem.Name + " - " + this.storeName;
  }
  clear(cb) {
    try {
      const tx = this.db.transaction(this.storeName, "readwrite"), objectStore = tx.objectStore(this.storeName), r = objectStore.clear();
      r.onsuccess = (event) => {
        setTimeout(cb, 0);
      };
      r.onerror = onErrorHandler(cb);
    } catch (e) {
      cb(convertError2(e));
    }
  }
  beginTransaction(type = "readonly") {
    const tx = this.db.transaction(this.storeName, type), objectStore = tx.objectStore(this.storeName);
    if (type === "readwrite") {
      return new IndexedDBRWTransaction(tx, objectStore);
    } else if (type === "readonly") {
      return new IndexedDBROTransaction(tx, objectStore);
    } else {
      throw new ApiError(22 /* EINVAL */, "Invalid transaction type.");
    }
  }
};
var _IndexedDBFileSystem = class extends AsyncKeyValueFileSystem {
  /**
   * Constructs an IndexedDB file system with the given options.
   */
  static Create(options, cb) {
    if (!options) {
      options = {
        storeName: "browserfs",
        cacheSize: 100
      };
    }
    IndexedDBStore.Create(options.storeName || "browserfs", (e, store) => {
      if (store) {
        const idbfs = new _IndexedDBFileSystem(options.cacheSize || 100);
        idbfs.init(store, (e2) => {
          if (e2) {
            cb(e2);
          } else {
            cb(null, idbfs);
          }
        });
      } else {
        cb(e);
      }
    });
  }
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  static isAvailable() {
    try {
      return typeof indexedDB !== "undefined" && null !== indexedDB.open("__browserfs_test__");
    } catch (e) {
      return false;
    }
  }
  constructor(cacheSize) {
    super(cacheSize);
  }
};
var IndexedDBFileSystem = _IndexedDBFileSystem;
IndexedDBFileSystem.Name = "IndexedDB";
IndexedDBFileSystem.Options = {
  storeName: {
    type: "string",
    optional: true,
    description: "The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name."
  },
  cacheSize: {
    type: "number",
    optional: true,
    description: "The size of the inode cache. Defaults to 100. A size of 0 or below disables caching."
  }
};

// src/backend/LocalStorage.ts
var supportsBinaryString = false;
var binaryEncoding;
try {
  globalThis.localStorage.setItem("__test__", String.fromCharCode(55296));
  supportsBinaryString = globalThis.localStorage.getItem("__test__") === String.fromCharCode(55296);
} catch (e) {
  supportsBinaryString = false;
}
binaryEncoding = supportsBinaryString ? "binary_string" : "binary_string_ie";
if (!Buffer2.isEncoding(binaryEncoding)) {
  binaryEncoding = "base64";
}
var LocalStorageStore = class {
  name() {
    return LocalStorageFileSystem.Name;
  }
  clear() {
    globalThis.localStorage.clear();
  }
  beginTransaction(type) {
    return new SimpleSyncRWTransaction(this);
  }
  get(key) {
    try {
      const data = globalThis.localStorage.getItem(key);
      if (data !== null) {
        return Buffer2.from(data, binaryEncoding);
      }
    } catch (e) {
    }
    return void 0;
  }
  put(key, data, overwrite) {
    try {
      if (!overwrite && globalThis.localStorage.getItem(key) !== null) {
        return false;
      }
      globalThis.localStorage.setItem(key, data.toString(binaryEncoding));
      return true;
    } catch (e) {
      throw new ApiError(28 /* ENOSPC */, "LocalStorage is full.");
    }
  }
  del(key) {
    try {
      globalThis.localStorage.removeItem(key);
    } catch (e) {
      throw new ApiError(5 /* EIO */, "Unable to delete key " + key + ": " + e);
    }
  }
};
var _LocalStorageFileSystem = class extends SyncKeyValueFileSystem {
  /**
   * Creates a LocalStorageFileSystem instance.
   */
  static Create(options, cb) {
    cb(null, new _LocalStorageFileSystem());
  }
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  static isAvailable() {
    return typeof globalThis.localStorage !== "undefined";
  }
  /**
   * Creates a new LocalStorage file system using the contents of `localStorage`.
   */
  constructor() {
    super({ store: new LocalStorageStore() });
  }
};
var LocalStorageFileSystem = _LocalStorageFileSystem;
LocalStorageFileSystem.Name = "LocalStorage";
LocalStorageFileSystem.Options = {};

// src/backend/MountableFileSystem.ts
var _MountableFileSystem = class extends BaseFileSystem {
  /**
   * Creates a new, empty MountableFileSystem.
   */
  constructor(rootFs) {
    super();
    // Contains the list of mount points in mntMap, sorted by string length in decreasing order.
    // Ensures that we scan the most specific mount points for a match first, which lets us
    // nest mount points.
    this.mountList = [];
    this.mntMap = {};
    this.rootFs = rootFs;
  }
  /**
   * Creates a MountableFileSystem instance with the given options.
   */
  static Create(opts, cb) {
    InMemoryFileSystem.Create({}, (e, imfs) => {
      if (imfs) {
        const fs2 = new _MountableFileSystem(imfs);
        try {
          for (const mountPoint of Object.keys(opts)) {
            fs2.mount(mountPoint, opts[mountPoint], Cred.Root);
          }
        } catch (e2) {
          return cb(e2);
        }
        cb(null, fs2);
      } else {
        cb(e);
      }
    });
  }
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  static isAvailable() {
    return true;
  }
  /**
   * Mounts the file system at the given mount point.
   */
  mount(mountPoint, fs2, cred) {
    if (mountPoint[0] !== "/") {
      mountPoint = `/${mountPoint}`;
    }
    mountPoint = resolve(mountPoint);
    if (this.mntMap[mountPoint]) {
      throw new ApiError(22 /* EINVAL */, "Mount point " + mountPoint + " is already in use.");
    }
    mkdirpSync(mountPoint, 511, cred, this.rootFs);
    this.mntMap[mountPoint] = fs2;
    this.mountList.push(mountPoint);
    this.mountList = this.mountList.sort((a, b) => b.length - a.length);
  }
  umount(mountPoint, cred) {
    if (mountPoint[0] !== "/") {
      mountPoint = `/${mountPoint}`;
    }
    mountPoint = resolve(mountPoint);
    if (!this.mntMap[mountPoint]) {
      throw new ApiError(22 /* EINVAL */, "Mount point " + mountPoint + " is already unmounted.");
    }
    delete this.mntMap[mountPoint];
    this.mountList.splice(this.mountList.indexOf(mountPoint), 1);
    while (mountPoint !== "/") {
      if (this.rootFs.readdirSync(mountPoint, cred).length === 0) {
        this.rootFs.rmdirSync(mountPoint, cred);
        mountPoint = dirname(mountPoint);
      } else {
        break;
      }
    }
  }
  /**
   * Returns the file system that the path points to.
   */
  _getFs(path) {
    const mountList = this.mountList, len = mountList.length;
    for (let i = 0; i < len; i++) {
      const mountPoint = mountList[i];
      if (mountPoint.length <= path.length && path.indexOf(mountPoint) === 0) {
        path = path.substr(mountPoint.length > 1 ? mountPoint.length : 0);
        if (path === "") {
          path = "/";
        }
        return { fs: this.mntMap[mountPoint], path, mountPoint };
      }
    }
    return { fs: this.rootFs, path, mountPoint: "/" };
  }
  // Global information methods
  getName() {
    return _MountableFileSystem.Name;
  }
  diskSpace(path, cb) {
    cb(0, 0);
  }
  isReadOnly() {
    return false;
  }
  supportsLinks() {
    return false;
  }
  supportsProps() {
    return false;
  }
  supportsSynch() {
    return true;
  }
  /**
   * Fixes up error messages so they mention the mounted file location relative
   * to the MFS root, not to the particular FS's root.
   * Mutates the input error, and returns it.
   */
  standardizeError(err2, path, realPath) {
    const index = err2.message.indexOf(path);
    if (index !== -1) {
      err2.message = err2.message.substr(0, index) + realPath + err2.message.substr(index + path.length);
      err2.path = realPath;
    }
    return err2;
  }
  // The following methods involve multiple file systems, and thus have custom
  // logic.
  // Note that we go through the Node API to use its robust default argument
  // processing.
  rename(oldPath, newPath, cred, cb) {
    const fs1rv = this._getFs(oldPath);
    const fs2rv = this._getFs(newPath);
    if (fs1rv.fs === fs2rv.fs) {
      return fs1rv.fs.rename(fs1rv.path, fs2rv.path, cred, (e) => {
        if (e) {
          this.standardizeError(this.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
        }
        cb(e);
      });
    }
    return node_fs_default.readFile(oldPath, function(err2, data) {
      if (err2) {
        return cb(err2);
      }
      node_fs_default.writeFile(newPath, data, function(err3) {
        if (err3) {
          return cb(err3);
        }
        node_fs_default.unlink(oldPath, cb);
      });
    });
  }
  renameSync(oldPath, newPath, cred) {
    const fs1rv = this._getFs(oldPath);
    const fs2rv = this._getFs(newPath);
    if (fs1rv.fs === fs2rv.fs) {
      try {
        return fs1rv.fs.renameSync(fs1rv.path, fs2rv.path, cred);
      } catch (e) {
        this.standardizeError(this.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
        throw e;
      }
    }
    const data = node_fs_default.readFileSync(oldPath);
    node_fs_default.writeFileSync(newPath, data);
    return node_fs_default.unlinkSync(oldPath);
  }
  readdirSync(p, cred) {
    const fsInfo = this._getFs(p);
    let rv = null;
    if (fsInfo.fs !== this.rootFs) {
      try {
        rv = this.rootFs.readdirSync(p, cred);
      } catch (e) {
      }
    }
    try {
      const rv2 = fsInfo.fs.readdirSync(fsInfo.path, cred);
      if (rv === null) {
        return rv2;
      } else {
        return rv2.concat(rv.filter((val) => rv2.indexOf(val) === -1));
      }
    } catch (e) {
      if (rv === null) {
        throw this.standardizeError(e, fsInfo.path, p);
      } else {
        return rv;
      }
    }
  }
  readdir(p, cred, cb) {
    const fsInfo = this._getFs(p);
    fsInfo.fs.readdir(fsInfo.path, cred, (err2, files) => {
      if (fsInfo.fs !== this.rootFs) {
        try {
          const rv = this.rootFs.readdirSync(p, cred);
          if (files) {
            files = files.concat(rv.filter((val) => files.indexOf(val) === -1));
          } else {
            files = rv;
          }
        } catch (e) {
          if (err2) {
            return cb(this.standardizeError(err2, fsInfo.path, p));
          }
        }
      } else if (err2) {
        return cb(this.standardizeError(err2, fsInfo.path, p));
      }
      cb(null, files);
    });
  }
  realpathSync(p, cache, cred) {
    const fsInfo = this._getFs(p);
    try {
      const mountedPath = fsInfo.fs.realpathSync(fsInfo.path, {}, cred);
      return resolve(join(fsInfo.mountPoint, mountedPath));
    } catch (e) {
      throw this.standardizeError(e, fsInfo.path, p);
    }
  }
  realpath(p, cache, cred, cb) {
    const fsInfo = this._getFs(p);
    fsInfo.fs.realpath(fsInfo.path, {}, cred, (err2, rv) => {
      if (err2) {
        cb(this.standardizeError(err2, fsInfo.path, p));
      } else {
        cb(null, resolve(join(fsInfo.mountPoint, rv)));
      }
    });
  }
  rmdirSync(p, cred) {
    const fsInfo = this._getFs(p);
    if (this._containsMountPt(p)) {
      throw ApiError.ENOTEMPTY(p);
    } else {
      try {
        fsInfo.fs.rmdirSync(fsInfo.path, cred);
      } catch (e) {
        throw this.standardizeError(e, fsInfo.path, p);
      }
    }
  }
  rmdir(p, cred, cb) {
    const fsInfo = this._getFs(p);
    if (this._containsMountPt(p)) {
      cb(ApiError.ENOTEMPTY(p));
    } else {
      fsInfo.fs.rmdir(fsInfo.path, cred, (err2) => {
        cb(err2 ? this.standardizeError(err2, fsInfo.path, p) : null);
      });
    }
  }
  /**
   * Returns true if the given path contains a mount point.
   */
  _containsMountPt(p) {
    const mountPoints = this.mountList, len = mountPoints.length;
    for (let i = 0; i < len; i++) {
      const pt = mountPoints[i];
      if (pt.length >= p.length && pt.slice(0, p.length) === p) {
        return true;
      }
    }
    return false;
  }
};
var MountableFileSystem = _MountableFileSystem;
MountableFileSystem.Name = "MountableFileSystem";
MountableFileSystem.Options = {};
function defineFcn(name, isSync, numArgs) {
  if (isSync) {
    return function(...args) {
      const path = args[0];
      const rv = this._getFs(path);
      args[0] = rv.path;
      try {
        return rv.fs[name].apply(rv.fs, args);
      } catch (e) {
        this.standardizeError(e, rv.path, path);
        throw e;
      }
    };
  } else {
    return function(...args) {
      const path = args[0];
      const rv = this._getFs(path);
      args[0] = rv.path;
      if (typeof args[args.length - 1] === "function") {
        const cb = args[args.length - 1];
        args[args.length - 1] = (...args2) => {
          if (args2.length > 0 && args2[0] instanceof ApiError) {
            this.standardizeError(args2[0], rv.path, path);
          }
          cb.apply(null, args2);
        };
      }
      return rv.fs[name].apply(rv.fs, args);
    };
  }
}
var fsCmdMap = [
  // 1 arg functions
  ["exists", "unlink", "readlink"],
  // 2 arg functions
  ["stat", "mkdir", "truncate"],
  // 3 arg functions
  ["open", "readFile", "chmod", "utimes"],
  // 4 arg functions
  ["chown"],
  // 5 arg functions
  ["writeFile", "appendFile"]
];
for (let i = 0; i < fsCmdMap.length; i++) {
  const cmds = fsCmdMap[i];
  for (const fnName of cmds) {
    MountableFileSystem.prototype[fnName] = defineFcn(fnName, false, i + 1);
    MountableFileSystem.prototype[fnName + "Sync"] = defineFcn(fnName + "Sync", true, i + 1);
  }
}

// src/generic/mutex.ts
var Mutex = class {
  constructor() {
    this._locked = false;
    this._waiters = [];
  }
  lock(cb) {
    if (this._locked) {
      this._waiters.push(cb);
      return;
    }
    this._locked = true;
    cb();
  }
  unlock() {
    if (!this._locked) {
      throw new Error("unlock of a non-locked mutex");
    }
    const next = this._waiters.shift();
    if (next) {
      setImmediate_default(next);
      return;
    }
    this._locked = false;
  }
  tryLock() {
    if (this._locked) {
      return false;
    }
    this._locked = true;
    return true;
  }
  isLocked() {
    return this._locked;
  }
};

// src/generic/locked_fs.ts
var LockedFS = class {
  constructor(fs2) {
    this._fs = fs2;
    this._mu = new Mutex();
  }
  getName() {
    return "LockedFS<" + this._fs.getName() + ">";
  }
  getFSUnlocked() {
    return this._fs;
  }
  diskSpace(p, cb) {
    this._fs.diskSpace(p, cb);
  }
  isReadOnly() {
    return this._fs.isReadOnly();
  }
  supportsLinks() {
    return this._fs.supportsLinks();
  }
  supportsProps() {
    return this._fs.supportsProps();
  }
  supportsSynch() {
    return this._fs.supportsSynch();
  }
  rename(oldPath, newPath, cred, cb) {
    this._mu.lock(() => {
      this._fs.rename(oldPath, newPath, cred, (err2) => {
        this._mu.unlock();
        cb(err2);
      });
    });
  }
  renameSync(oldPath, newPath, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.renameSync(oldPath, newPath, cred);
  }
  stat(p, isLstat, cred, cb) {
    this._mu.lock(() => {
      this._fs.stat(p, isLstat, cred, (err2, stat) => {
        this._mu.unlock();
        cb(err2, stat);
      });
    });
  }
  statSync(p, isLstat, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.statSync(p, isLstat, cred);
  }
  access(p, mode, cred, cb) {
    this._mu.lock(() => {
      this._fs.access(p, mode, cred, (err2) => {
        this._mu.unlock();
        cb(err2);
      });
    });
  }
  accessSync(p, mode, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.accessSync(p, mode, cred);
  }
  open(p, flag, mode, cred, cb) {
    this._mu.lock(() => {
      this._fs.open(p, flag, mode, cred, (err2, fd) => {
        this._mu.unlock();
        cb(err2, fd);
      });
    });
  }
  openSync(p, flag, mode, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.openSync(p, flag, mode, cred);
  }
  unlink(p, cred, cb) {
    this._mu.lock(() => {
      this._fs.unlink(p, cred, (err2) => {
        this._mu.unlock();
        cb(err2);
      });
    });
  }
  unlinkSync(p, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.unlinkSync(p, cred);
  }
  rmdir(p, cred, cb) {
    this._mu.lock(() => {
      this._fs.rmdir(p, cred, (err2) => {
        this._mu.unlock();
        cb(err2);
      });
    });
  }
  rmdirSync(p, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.rmdirSync(p, cred);
  }
  mkdir(p, mode, cred, cb) {
    this._mu.lock(() => {
      this._fs.mkdir(p, mode, cred, (err2) => {
        this._mu.unlock();
        cb(err2);
      });
    });
  }
  mkdirSync(p, mode, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.mkdirSync(p, mode, cred);
  }
  readdir(p, cred, cb) {
    this._mu.lock(() => {
      this._fs.readdir(p, cred, (err2, files) => {
        this._mu.unlock();
        cb(err2, files);
      });
    });
  }
  readdirSync(p, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.readdirSync(p, cred);
  }
  exists(p, cred, cb) {
    this._mu.lock(() => {
      this._fs.exists(p, cred, (exists) => {
        this._mu.unlock();
        cb(exists);
      });
    });
  }
  existsSync(p, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.existsSync(p, cred);
  }
  realpath(p, cache, cred, cb) {
    this._mu.lock(() => {
      this._fs.realpath(p, cache, cred, (err2, resolvedPath) => {
        this._mu.unlock();
        cb(err2, resolvedPath);
      });
    });
  }
  realpathSync(p, cache, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.realpathSync(p, cache, cred);
  }
  truncate(p, len, cred, cb) {
    this._mu.lock(() => {
      this._fs.truncate(p, len, cred, (err2) => {
        this._mu.unlock();
        cb(err2);
      });
    });
  }
  truncateSync(p, len, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.truncateSync(p, len, cred);
  }
  readFile(fname, encoding, flag, cred, cb) {
    this._mu.lock(() => {
      this._fs.readFile(fname, encoding, flag, cred, (err2, data) => {
        this._mu.unlock();
        cb(err2, data);
      });
    });
  }
  readFileSync(fname, encoding, flag, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.readFileSync(fname, encoding, flag, cred);
  }
  writeFile(fname, data, encoding, flag, mode, cred, cb) {
    this._mu.lock(() => {
      this._fs.writeFile(fname, data, encoding, flag, mode, cred, (err2) => {
        this._mu.unlock();
        cb(err2);
      });
    });
  }
  writeFileSync(fname, data, encoding, flag, mode, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.writeFileSync(fname, data, encoding, flag, mode, cred);
  }
  appendFile(fname, data, encoding, flag, mode, cred, cb) {
    this._mu.lock(() => {
      this._fs.appendFile(fname, data, encoding, flag, mode, cred, (err2) => {
        this._mu.unlock();
        cb(err2);
      });
    });
  }
  appendFileSync(fname, data, encoding, flag, mode, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.appendFileSync(fname, data, encoding, flag, mode, cred);
  }
  chmod(p, isLchmod, mode, cred, cb) {
    this._mu.lock(() => {
      this._fs.chmod(p, isLchmod, mode, cred, (err2) => {
        this._mu.unlock();
        cb(err2);
      });
    });
  }
  chmodSync(p, isLchmod, mode, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.chmodSync(p, isLchmod, mode, cred);
  }
  chown(p, isLchown, new_uid, new_gid, cred, cb) {
    this._mu.lock(() => {
      this._fs.chown(p, isLchown, new_uid, new_gid, cred, (err2) => {
        this._mu.unlock();
        cb(err2);
      });
    });
  }
  chownSync(p, isLchown, new_uid, new_gid, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.chownSync(p, isLchown, new_uid, new_gid, cred);
  }
  utimes(p, atime, mtime, cred, cb) {
    this._mu.lock(() => {
      this._fs.utimes(p, atime, mtime, cred, (err2) => {
        this._mu.unlock();
        cb(err2);
      });
    });
  }
  utimesSync(p, atime, mtime, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.utimesSync(p, atime, mtime, cred);
  }
  link(srcpath, dstpath, cred, cb) {
    this._mu.lock(() => {
      this._fs.link(srcpath, dstpath, cred, (err2) => {
        this._mu.unlock();
        cb(err2);
      });
    });
  }
  linkSync(srcpath, dstpath, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.linkSync(srcpath, dstpath, cred);
  }
  symlink(srcpath, dstpath, type, cred, cb) {
    this._mu.lock(() => {
      this._fs.symlink(srcpath, dstpath, type, cred, (err2) => {
        this._mu.unlock();
        cb(err2);
      });
    });
  }
  symlinkSync(srcpath, dstpath, type, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.symlinkSync(srcpath, dstpath, type, cred);
  }
  readlink(p, cred, cb) {
    this._mu.lock(() => {
      this._fs.readlink(p, cred, (err2, linkString) => {
        this._mu.unlock();
        cb(err2, linkString);
      });
    });
  }
  readlinkSync(p, cred) {
    if (this._mu.isLocked()) {
      throw new Error("invalid sync call");
    }
    return this._fs.readlinkSync(p, cred);
  }
};

// src/backend/OverlayFS.ts
var deletionLogPath = "/.deletedFiles.log";
function makeModeWritable(mode) {
  return 146 | mode;
}
function getFlag(f) {
  return FileFlag.getFileFlag(f);
}
var OverlayFile = class extends PreloadFile {
  constructor(fs2, path, flag, stats, data) {
    super(fs2, path, flag, stats, data);
  }
  sync(cb) {
    if (!this.isDirty()) {
      cb(null);
      return;
    }
    this._fs._syncAsync(this, (err2) => {
      this.resetDirty();
      cb(err2);
    });
  }
  syncSync() {
    if (this.isDirty()) {
      this._fs._syncSync(this);
      this.resetDirty();
    }
  }
  close(cb) {
    this.sync(cb);
  }
  closeSync() {
    this.syncSync();
  }
};
var UnlockedOverlayFS = class extends BaseFileSystem {
  constructor(writable, readable) {
    super();
    this._isInitialized = false;
    this._initializeCallbacks = [];
    this._deletedFiles = {};
    this._deleteLog = "";
    // If 'true', we have scheduled a delete log update.
    this._deleteLogUpdatePending = false;
    // If 'true', a delete log update is needed after the scheduled delete log
    // update finishes.
    this._deleteLogUpdateNeeded = false;
    // If there was an error updating the delete log...
    this._deleteLogError = null;
    this._writable = writable;
    this._readable = readable;
    if (this._writable.isReadOnly()) {
      throw new ApiError(22 /* EINVAL */, "Writable file system must be writable.");
    }
  }
  static isAvailable() {
    return true;
  }
  getOverlayedFileSystems() {
    return {
      readable: this._readable,
      writable: this._writable
    };
  }
  _syncAsync(file, cb) {
    const stats = file.getStats();
    this.createParentDirectoriesAsync(file.getPath(), stats.getCred(0, 0), (err2) => {
      if (err2) {
        return cb(err2);
      }
      this._writable.writeFile(file.getPath(), file.getBuffer(), null, getFlag("w"), stats.mode, stats.getCred(0, 0), cb);
    });
  }
  _syncSync(file) {
    const stats = file.getStats();
    this.createParentDirectories(file.getPath(), stats.getCred(0, 0));
    this._writable.writeFileSync(file.getPath(), file.getBuffer(), null, getFlag("w"), stats.mode, stats.getCred(0, 0));
  }
  getName() {
    return OverlayFS.Name;
  }
  /**
   * **INTERNAL METHOD**
   *
   * Called once to load up metadata stored on the writable file system.
   */
  _initialize(cb) {
    const callbackArray = this._initializeCallbacks;
    const end = (e) => {
      this._isInitialized = !e;
      this._initializeCallbacks = [];
      callbackArray.forEach((cb2) => cb2(e));
    };
    if (this._isInitialized) {
      return cb();
    }
    callbackArray.push(cb);
    if (callbackArray.length !== 1) {
      return;
    }
    this._writable.readFile(deletionLogPath, "utf8", getFlag("r"), Cred.Root, (err2, data) => {
      if (err2) {
        if (err2.errno !== 2 /* ENOENT */) {
          return end(err2);
        }
      } else {
        this._deleteLog = data;
      }
      this._reparseDeletionLog();
      end();
    });
  }
  isReadOnly() {
    return false;
  }
  supportsSynch() {
    return this._readable.supportsSynch() && this._writable.supportsSynch();
  }
  supportsLinks() {
    return false;
  }
  supportsProps() {
    return this._readable.supportsProps() && this._writable.supportsProps();
  }
  getDeletionLog() {
    return this._deleteLog;
  }
  restoreDeletionLog(log, cred) {
    this._deleteLog = log;
    this._reparseDeletionLog();
    this.updateLog("", cred);
  }
  rename(oldPath, newPath, cred, cb) {
    if (!this.checkInitAsync(cb) || this.checkPathAsync(oldPath, cb) || this.checkPathAsync(newPath, cb)) {
      return;
    }
    if (oldPath === deletionLogPath || newPath === deletionLogPath) {
      return cb(ApiError.EPERM("Cannot rename deletion log."));
    }
    if (oldPath === newPath) {
      return cb();
    }
    this.stat(oldPath, false, cred, (oldErr, oldStats) => {
      if (oldErr) {
        return cb(oldErr);
      }
      return this.stat(newPath, false, cred, (newErr, newStats) => {
        const self2 = this;
        function copyDirContents(files) {
          const file = files.shift();
          if (!file) {
            return cb();
          }
          const oldFile = resolve(oldPath, file);
          const newFile = resolve(newPath, file);
          self2.rename(oldFile, newFile, cred, (err2) => {
            if (err2) {
              return cb(err2);
            }
            copyDirContents(files);
          });
        }
        let mode = 511;
        if (oldStats.isDirectory()) {
          if (newErr) {
            if (newErr.errno !== 2 /* ENOENT */) {
              return cb(newErr);
            }
            return this._writable.exists(oldPath, cred, (exists) => {
              if (exists) {
                return this._writable.rename(oldPath, newPath, cred, cb);
              }
              this._writable.mkdir(newPath, mode, cred, (mkdirErr) => {
                if (mkdirErr) {
                  return cb(mkdirErr);
                }
                this._readable.readdir(oldPath, cred, (err2, files) => {
                  if (err2) {
                    return cb();
                  }
                  copyDirContents(files);
                });
              });
            });
          }
          mode = newStats.mode;
          if (!newStats.isDirectory()) {
            return cb(ApiError.ENOTDIR(newPath));
          }
          this.readdir(newPath, cred, (readdirErr, files) => {
            if (files && files.length) {
              return cb(ApiError.ENOTEMPTY(newPath));
            }
            this._readable.readdir(oldPath, cred, (err2, files2) => {
              if (err2) {
                return cb();
              }
              copyDirContents(files2);
            });
          });
        }
        if (newStats && newStats.isDirectory()) {
          return cb(ApiError.EISDIR(newPath));
        }
        this.readFile(oldPath, null, getFlag("r"), cred, (err2, data) => {
          if (err2) {
            return cb(err2);
          }
          return this.writeFile(newPath, data, null, getFlag("w"), oldStats.mode, cred, (err3) => {
            if (err3) {
              return cb(err3);
            }
            return this.unlink(oldPath, cred, cb);
          });
        });
      });
    });
  }
  renameSync(oldPath, newPath, cred) {
    this.checkInitialized();
    this.checkPath(oldPath);
    this.checkPath(newPath);
    if (oldPath === deletionLogPath || newPath === deletionLogPath) {
      throw ApiError.EPERM("Cannot rename deletion log.");
    }
    const oldStats = this.statSync(oldPath, false, cred);
    if (oldStats.isDirectory()) {
      if (oldPath === newPath) {
        return;
      }
      let mode = 511;
      if (this.existsSync(newPath, cred)) {
        const stats = this.statSync(newPath, false, cred);
        mode = stats.mode;
        if (stats.isDirectory()) {
          if (this.readdirSync(newPath, cred).length > 0) {
            throw ApiError.ENOTEMPTY(newPath);
          }
        } else {
          throw ApiError.ENOTDIR(newPath);
        }
      }
      if (this._writable.existsSync(oldPath, cred)) {
        this._writable.renameSync(oldPath, newPath, cred);
      } else if (!this._writable.existsSync(newPath, cred)) {
        this._writable.mkdirSync(newPath, mode, cred);
      }
      if (this._readable.existsSync(oldPath, cred)) {
        this._readable.readdirSync(oldPath, cred).forEach((name) => {
          this.renameSync(resolve(oldPath, name), resolve(newPath, name), cred);
        });
      }
    } else {
      if (this.existsSync(newPath, cred) && this.statSync(newPath, false, cred).isDirectory()) {
        throw ApiError.EISDIR(newPath);
      }
      this.writeFileSync(newPath, this.readFileSync(oldPath, null, getFlag("r"), cred), null, getFlag("w"), oldStats.mode, cred);
    }
    if (oldPath !== newPath && this.existsSync(oldPath, cred)) {
      this.unlinkSync(oldPath, cred);
    }
  }
  stat(p, isLstat, cred, cb) {
    if (!this.checkInitAsync(cb)) {
      return;
    }
    this._writable.stat(p, isLstat, cred, (err2, stat) => {
      if (err2 && err2.errno === 2 /* ENOENT */) {
        if (this._deletedFiles[p]) {
          cb(ApiError.ENOENT(p));
        }
        this._readable.stat(p, isLstat, cred, (err3, stat2) => {
          if (stat2) {
            stat2 = Stats.clone(stat2);
            stat2.mode = makeModeWritable(stat2.mode);
          }
          cb(err3, stat2);
        });
      } else {
        cb(err2, stat);
      }
    });
  }
  statSync(p, isLstat, cred) {
    this.checkInitialized();
    try {
      return this._writable.statSync(p, isLstat, cred);
    } catch (e) {
      if (this._deletedFiles[p]) {
        throw ApiError.ENOENT(p);
      }
      const oldStat = Stats.clone(this._readable.statSync(p, isLstat, cred));
      oldStat.mode = makeModeWritable(oldStat.mode);
      return oldStat;
    }
  }
  open(p, flag, mode, cred, cb) {
    if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
      return;
    }
    this.stat(p, false, cred, (err2, stats) => {
      if (stats) {
        switch (flag.pathExistsAction()) {
          case 2 /* TRUNCATE_FILE */:
            return this.createParentDirectoriesAsync(p, cred, (err3) => {
              if (err3) {
                return cb(err3);
              }
              this._writable.open(p, flag, mode, cred, cb);
            });
          case 0 /* NOP */:
            return this._writable.exists(p, cred, (exists) => {
              if (exists) {
                this._writable.open(p, flag, mode, cred, cb);
              } else {
                stats = Stats.clone(stats);
                stats.mode = mode;
                this._readable.readFile(p, null, getFlag("r"), cred, (readFileErr, data) => {
                  if (readFileErr) {
                    return cb(readFileErr);
                  }
                  if (stats.size === -1) {
                    stats.size = data.length;
                  }
                  const f = new OverlayFile(this, p, flag, stats, data);
                  cb(null, f);
                });
              }
            });
          default:
            return cb(ApiError.EEXIST(p));
        }
      } else {
        switch (flag.pathNotExistsAction()) {
          case 3 /* CREATE_FILE */:
            return this.createParentDirectoriesAsync(p, cred, (err3) => {
              if (err3) {
                return cb(err3);
              }
              return this._writable.open(p, flag, mode, cred, cb);
            });
          default:
            return cb(ApiError.ENOENT(p));
        }
      }
    });
  }
  openSync(p, flag, mode, cred) {
    this.checkInitialized();
    this.checkPath(p);
    if (p === deletionLogPath) {
      throw ApiError.EPERM("Cannot open deletion log.");
    }
    if (this.existsSync(p, cred)) {
      switch (flag.pathExistsAction()) {
        case 2 /* TRUNCATE_FILE */:
          this.createParentDirectories(p, cred);
          return this._writable.openSync(p, flag, mode, cred);
        case 0 /* NOP */:
          if (this._writable.existsSync(p, cred)) {
            return this._writable.openSync(p, flag, mode, cred);
          } else {
            const buf = this._readable.readFileSync(p, null, getFlag("r"), cred);
            const stats = Stats.clone(this._readable.statSync(p, false, cred));
            stats.mode = mode;
            return new OverlayFile(this, p, flag, stats, buf);
          }
        default:
          throw ApiError.EEXIST(p);
      }
    } else {
      switch (flag.pathNotExistsAction()) {
        case 3 /* CREATE_FILE */:
          this.createParentDirectories(p, cred);
          return this._writable.openSync(p, flag, mode, cred);
        default:
          throw ApiError.ENOENT(p);
      }
    }
  }
  unlink(p, cred, cb) {
    if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
      return;
    }
    this.exists(p, cred, (exists) => {
      if (!exists) {
        return cb(ApiError.ENOENT(p));
      }
      this._writable.exists(p, cred, (writableExists) => {
        if (writableExists) {
          return this._writable.unlink(p, cred, (err2) => {
            if (err2) {
              return cb(err2);
            }
            this.exists(p, cred, (readableExists) => {
              if (readableExists) {
                this.deletePath(p, cred);
              }
              cb(null);
            });
          });
        } else {
          this.deletePath(p, cred);
          cb(null);
        }
      });
    });
  }
  unlinkSync(p, cred) {
    this.checkInitialized();
    this.checkPath(p);
    if (this.existsSync(p, cred)) {
      if (this._writable.existsSync(p, cred)) {
        this._writable.unlinkSync(p, cred);
      }
      if (this.existsSync(p, cred)) {
        this.deletePath(p, cred);
      }
    } else {
      throw ApiError.ENOENT(p);
    }
  }
  rmdir(p, cred, cb) {
    if (!this.checkInitAsync(cb)) {
      return;
    }
    const rmdirLower = () => {
      this.readdir(p, cred, (err2, files) => {
        if (err2) {
          return cb(err2);
        }
        if (files.length) {
          return cb(ApiError.ENOTEMPTY(p));
        }
        this.deletePath(p, cred);
        cb(null);
      });
    };
    this.exists(p, cred, (exists) => {
      if (!exists) {
        return cb(ApiError.ENOENT(p));
      }
      this._writable.exists(p, cred, (writableExists) => {
        if (writableExists) {
          this._writable.rmdir(p, cred, (err2) => {
            if (err2) {
              return cb(err2);
            }
            this._readable.exists(p, cred, (readableExists) => {
              if (readableExists) {
                rmdirLower();
              } else {
                cb();
              }
            });
          });
        } else {
          rmdirLower();
        }
      });
    });
  }
  rmdirSync(p, cred) {
    this.checkInitialized();
    if (this.existsSync(p, cred)) {
      if (this._writable.existsSync(p, cred)) {
        this._writable.rmdirSync(p, cred);
      }
      if (this.existsSync(p, cred)) {
        if (this.readdirSync(p, cred).length > 0) {
          throw ApiError.ENOTEMPTY(p);
        } else {
          this.deletePath(p, cred);
        }
      }
    } else {
      throw ApiError.ENOENT(p);
    }
  }
  mkdir(p, mode, cred, cb) {
    if (!this.checkInitAsync(cb)) {
      return;
    }
    this.exists(p, cred, (exists) => {
      if (exists) {
        return cb(ApiError.EEXIST(p));
      }
      this.createParentDirectoriesAsync(p, cred, (err2) => {
        if (err2) {
          return cb(err2);
        }
        this._writable.mkdir(p, mode, cred, cb);
      });
    });
  }
  mkdirSync(p, mode, cred) {
    this.checkInitialized();
    if (this.existsSync(p, cred)) {
      throw ApiError.EEXIST(p);
    } else {
      this.createParentDirectories(p, cred);
      this._writable.mkdirSync(p, mode, cred);
    }
  }
  readdir(p, cred, cb) {
    if (!this.checkInitAsync(cb)) {
      return;
    }
    this.stat(p, false, cred, (err2, dirStats) => {
      if (err2) {
        return cb(err2);
      }
      if (!dirStats.isDirectory()) {
        return cb(ApiError.ENOTDIR(p));
      }
      this._writable.readdir(p, cred, (err3, wFiles) => {
        if (err3 && err3.code !== "ENOENT") {
          return cb(err3);
        } else if (err3 || !wFiles) {
          wFiles = [];
        }
        this._readable.readdir(p, cred, (err4, rFiles) => {
          if (err4 || !rFiles) {
            rFiles = [];
          }
          const seenMap = {};
          const filtered = wFiles.concat(rFiles.filter((fPath) => !this._deletedFiles[`${p}/${fPath}`])).filter((fPath) => {
            const result = !seenMap[fPath];
            seenMap[fPath] = true;
            return result;
          });
          cb(null, filtered);
        });
      });
    });
  }
  readdirSync(p, cred) {
    this.checkInitialized();
    const dirStats = this.statSync(p, false, cred);
    if (!dirStats.isDirectory()) {
      throw ApiError.ENOTDIR(p);
    }
    let contents = [];
    try {
      contents = contents.concat(this._writable.readdirSync(p, cred));
    } catch (e) {
    }
    try {
      contents = contents.concat(this._readable.readdirSync(p, cred).filter((fPath) => !this._deletedFiles[`${p}/${fPath}`]));
    } catch (e) {
    }
    const seenMap = {};
    return contents.filter((fileP) => {
      const result = !seenMap[fileP];
      seenMap[fileP] = true;
      return result;
    });
  }
  exists(p, cred, cb) {
    this.checkInitialized();
    this._writable.exists(p, cred, (existsWritable) => {
      if (existsWritable) {
        return cb(true);
      }
      this._readable.exists(p, cred, (existsReadable) => {
        cb(existsReadable && this._deletedFiles[p] !== true);
      });
    });
  }
  existsSync(p, cred) {
    this.checkInitialized();
    return this._writable.existsSync(p, cred) || this._readable.existsSync(p, cred) && this._deletedFiles[p] !== true;
  }
  chmod(p, isLchmod, mode, cred, cb) {
    if (!this.checkInitAsync(cb)) {
      return;
    }
    this.operateOnWritableAsync(p, cred, (err2) => {
      if (err2) {
        return cb(err2);
      } else {
        this._writable.chmod(p, isLchmod, mode, cred, cb);
      }
    });
  }
  chmodSync(p, isLchmod, mode, cred) {
    this.checkInitialized();
    this.operateOnWritable(p, cred, () => {
      this._writable.chmodSync(p, isLchmod, mode, cred);
    });
  }
  chown(p, isLchmod, new_uid, new_gid, cred, cb) {
    if (!this.checkInitAsync(cb)) {
      return;
    }
    this.operateOnWritableAsync(p, cred, (err2) => {
      if (err2) {
        return cb(err2);
      } else {
        this._writable.chown(p, isLchmod, new_uid, new_gid, cred, cb);
      }
    });
  }
  chownSync(p, isLchown, new_uid, new_gid, cred) {
    this.checkInitialized();
    this.operateOnWritable(p, cred, () => {
      this._writable.chownSync(p, isLchown, new_uid, new_gid, cred);
    });
  }
  utimes(p, atime, mtime, cred, cb) {
    if (!this.checkInitAsync(cb)) {
      return;
    }
    this.operateOnWritableAsync(p, cred, (err2) => {
      if (err2) {
        return cb(err2);
      } else {
        this._writable.utimes(p, atime, mtime, cred, cb);
      }
    });
  }
  utimesSync(p, atime, mtime, cred) {
    this.checkInitialized();
    this.operateOnWritable(p, cred, () => {
      this._writable.utimesSync(p, atime, mtime, cred);
    });
  }
  deletePath(p, cred) {
    this._deletedFiles[p] = true;
    this.updateLog(`d${p}
`, cred);
  }
  updateLog(addition, cred) {
    this._deleteLog += addition;
    if (this._deleteLogUpdatePending) {
      this._deleteLogUpdateNeeded = true;
    } else {
      this._deleteLogUpdatePending = true;
      this._writable.writeFile(deletionLogPath, this._deleteLog, "utf8", FileFlag.getFileFlag("w"), 420, cred, (e) => {
        this._deleteLogUpdatePending = false;
        if (e) {
          this._deleteLogError = e;
        } else if (this._deleteLogUpdateNeeded) {
          this._deleteLogUpdateNeeded = false;
          this.updateLog("", cred);
        }
      });
    }
  }
  _reparseDeletionLog() {
    this._deletedFiles = {};
    this._deleteLog.split("\n").forEach((path) => {
      this._deletedFiles[path.slice(1)] = path.slice(0, 1) === "d";
    });
  }
  checkInitialized() {
    if (!this._isInitialized) {
      throw new ApiError(1 /* EPERM */, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.");
    } else if (this._deleteLogError !== null) {
      const e = this._deleteLogError;
      this._deleteLogError = null;
      throw e;
    }
  }
  checkInitAsync(cb) {
    if (!this._isInitialized) {
      cb(new ApiError(1 /* EPERM */, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it."));
      return false;
    } else if (this._deleteLogError !== null) {
      const e = this._deleteLogError;
      this._deleteLogError = null;
      cb(e);
      return false;
    }
    return true;
  }
  checkPath(p) {
    if (p === deletionLogPath) {
      throw ApiError.EPERM(p);
    }
  }
  checkPathAsync(p, cb) {
    if (p === deletionLogPath) {
      cb(ApiError.EPERM(p));
      return true;
    }
    return false;
  }
  createParentDirectoriesAsync(p, cred, cb) {
    let parent = dirname(p);
    const toCreate = [];
    const self2 = this;
    this._writable.stat(parent, false, cred, statDone);
    function statDone(err2, stat) {
      if (err2) {
        if (parent === "/") {
          cb(new ApiError(16 /* EBUSY */, "Invariant failed: root does not exist!"));
        } else {
          toCreate.push(parent);
          parent = dirname(parent);
          self2._writable.stat(parent, false, cred, statDone);
        }
      } else {
        createParents();
      }
    }
    function createParents() {
      if (!toCreate.length) {
        return cb();
      }
      const dir = toCreate.pop();
      self2._readable.stat(dir, false, cred, (err2, stats) => {
        if (!stats) {
          return cb();
        }
        self2._writable.mkdir(dir, stats.mode, cred, (err3) => {
          if (err3) {
            return cb(err3);
          }
          createParents();
        });
      });
    }
  }
  /**
   * With the given path, create the needed parent directories on the writable storage
   * should they not exist. Use modes from the read-only storage.
   */
  createParentDirectories(p, cred) {
    let parent = dirname(p), toCreate = [];
    while (!this._writable.existsSync(parent, cred)) {
      toCreate.push(parent);
      parent = dirname(parent);
    }
    toCreate = toCreate.reverse();
    toCreate.forEach((p2) => {
      this._writable.mkdirSync(p2, this.statSync(p2, false, cred).mode, cred);
    });
  }
  /**
   * Helper function:
   * - Ensures p is on writable before proceeding. Throws an error if it doesn't exist.
   * - Calls f to perform operation on writable.
   */
  operateOnWritable(p, cred, f) {
    if (this.existsSync(p, cred)) {
      if (!this._writable.existsSync(p, cred)) {
        this.copyToWritable(p, cred);
      }
      f();
    } else {
      throw ApiError.ENOENT(p);
    }
  }
  operateOnWritableAsync(p, cred, cb) {
    this.exists(p, cred, (exists) => {
      if (!exists) {
        return cb(ApiError.ENOENT(p));
      }
      this._writable.exists(p, cred, (existsWritable) => {
        if (existsWritable) {
          cb();
        } else {
          return this.copyToWritableAsync(p, cred, cb);
        }
      });
    });
  }
  /**
   * Copy from readable to writable storage.
   * PRECONDITION: File does not exist on writable storage.
   */
  copyToWritable(p, cred) {
    const pStats = this.statSync(p, false, cred);
    if (pStats.isDirectory()) {
      this._writable.mkdirSync(p, pStats.mode, cred);
    } else {
      this.writeFileSync(p, this._readable.readFileSync(p, null, getFlag("r"), cred), null, getFlag("w"), this.statSync(p, false, cred).mode, cred);
    }
  }
  copyToWritableAsync(p, cred, cb) {
    this.stat(p, false, cred, (err2, pStats) => {
      if (err2) {
        return cb(err2);
      }
      if (pStats.isDirectory()) {
        return this._writable.mkdir(p, pStats.mode, cred, cb);
      }
      this._readable.readFile(p, null, getFlag("r"), cred, (err3, data) => {
        if (err3) {
          return cb(err3);
        }
        this.writeFile(p, data, null, getFlag("w"), pStats.mode, cred, cb);
      });
    });
  }
};
var _OverlayFS = class extends LockedFS {
  /**
   * Constructs and initializes an OverlayFS instance with the given options.
   */
  static Create(opts, cb) {
    try {
      const fs2 = new _OverlayFS(opts.writable, opts.readable);
      fs2._initialize((e) => {
        cb(e, fs2);
      });
    } catch (e) {
      cb(e);
    }
  }
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  static isAvailable() {
    return UnlockedOverlayFS.isAvailable();
  }
  /**
   * @param writable The file system to write modified files to.
   * @param readable The file system that initially populates this file system.
   */
  constructor(writable, readable) {
    super(new UnlockedOverlayFS(writable, readable));
  }
  getOverlayedFileSystems() {
    return super.getFSUnlocked().getOverlayedFileSystems();
  }
  unwrap() {
    return super.getFSUnlocked();
  }
  _initialize(cb) {
    super.getFSUnlocked()._initialize(cb);
  }
};
var OverlayFS = _OverlayFS;
OverlayFS.Name = "OverlayFS";
OverlayFS.Options = {
  writable: {
    type: "object",
    description: "The file system to write modified files to."
  },
  readable: {
    type: "object",
    description: "The file system that initially populates this file system."
  }
};

// src/backend/WorkerFS.ts
var CallbackArgumentConverter = class {
  constructor() {
    this._callbacks = {};
    this._nextId = 0;
  }
  toRemoteArg(cb) {
    const id = this._nextId++;
    this._callbacks[id] = cb;
    return {
      type: 0 /* CB */,
      id
    };
  }
  toLocalArg(id) {
    const cb = this._callbacks[id];
    delete this._callbacks[id];
    return cb;
  }
};
var FileDescriptorArgumentConverter = class {
  constructor() {
    this._fileDescriptors = {};
    this._nextId = 0;
  }
  toRemoteArg(fd, p, flag, cb) {
    const id = this._nextId++;
    let data;
    let stat;
    this._fileDescriptors[id] = fd;
    fd.stat((err2, stats) => {
      if (err2) {
        cb(err2);
      } else {
        stat = bufferToTransferrableObject(stats.toBuffer());
        if (flag.isReadable()) {
          fd.read(Buffer2.alloc(stats.size), 0, stats.size, 0, (err3, bytesRead, buff) => {
            if (err3) {
              cb(err3);
            } else {
              data = bufferToTransferrableObject(buff);
              cb(null, {
                type: 1 /* FD */,
                id,
                data,
                stat,
                path: p,
                flag: flag.getFlagString()
              });
            }
          });
        } else {
          cb(null, {
            type: 1 /* FD */,
            id,
            data: new ArrayBuffer(0),
            stat,
            path: p,
            flag: flag.getFlagString()
          });
        }
      }
    });
  }
  applyFdAPIRequest(request, cb) {
    const fdArg = request.args[0];
    this._applyFdChanges(fdArg, (err2, fd) => {
      if (err2) {
        cb(err2);
      } else {
        fd[request.method]((e) => {
          if (request.method === "close") {
            delete this._fileDescriptors[fdArg.id];
          }
          cb(e);
        });
      }
    });
  }
  _applyFdChanges(remoteFd, cb) {
    const fd = this._fileDescriptors[remoteFd.id], data = transferrableObjectToBuffer(remoteFd.data), remoteStats = Stats.fromBuffer(transferrableObjectToBuffer(remoteFd.stat));
    const flag = FileFlag.getFileFlag(remoteFd.flag);
    if (flag.isWriteable()) {
      fd.write(data, 0, data.length, flag.isAppendable() ? fd.getPos() : 0, (e) => {
        function applyStatChanges() {
          fd.stat((e2, stats) => {
            if (e2) {
              cb(e2);
            } else {
              if (stats.mode !== remoteStats.mode) {
                fd.chmod(remoteStats.mode, (e3) => {
                  cb(e3, fd);
                });
              } else {
                cb(e2, fd);
              }
            }
          });
        }
        if (e) {
          cb(e);
        } else {
          if (!flag.isAppendable()) {
            fd.truncate(data.length, () => {
              applyStatChanges();
            });
          } else {
            applyStatChanges();
          }
        }
      });
    } else {
      cb(null, fd);
    }
  }
};
function apiErrorLocal2Remote(e) {
  return {
    type: 2 /* API_ERROR */,
    errorData: bufferToTransferrableObject(e.writeToBuffer())
  };
}
function apiErrorRemote2Local(e) {
  return ApiError.fromBuffer(transferrableObjectToBuffer(e.errorData));
}
function errorLocal2Remote(e) {
  return {
    type: 7 /* ERROR */,
    name: e.name,
    message: e.message,
    stack: e.stack
  };
}
function errorRemote2Local(e) {
  let cnstr = globalThis[e.name];
  if (typeof cnstr !== "function") {
    cnstr = Error;
  }
  const err2 = new cnstr(e.message);
  err2.stack = e.stack;
  return err2;
}
function statsLocal2Remote(stats) {
  return {
    type: 3 /* STATS */,
    statsData: bufferToTransferrableObject(stats.toBuffer())
  };
}
function statsRemote2Local(stats) {
  return Stats.fromBuffer(transferrableObjectToBuffer(stats.statsData));
}
function fileFlagLocal2Remote(flag) {
  return {
    type: 5 /* FILEFLAG */,
    flagStr: flag.getFlagString()
  };
}
function fileFlagRemote2Local(remoteFlag) {
  return FileFlag.getFileFlag(remoteFlag.flagStr);
}
function bufferToTransferrableObject(buff) {
  return buffer2ArrayBuffer(buff);
}
function transferrableObjectToBuffer(buff) {
  return arrayBuffer2Buffer(buff);
}
function bufferLocal2Remote(buff) {
  return {
    type: 6 /* BUFFER */,
    data: bufferToTransferrableObject(buff)
  };
}
function bufferRemote2Local(buffArg) {
  return transferrableObjectToBuffer(buffArg.data);
}
function isAPIRequest(data) {
  return data && typeof data === "object" && Object.prototype.hasOwnProperty.call(data, "browserfsMessage") && data["browserfsMessage"];
}
function isAPIResponse(data) {
  return data && typeof data === "object" && Object.prototype.hasOwnProperty.call(data, "browserfsMessage") && data["browserfsMessage"];
}
var WorkerFile = class extends PreloadFile {
  constructor(_fs, _path, _flag, _stat, remoteFdId, contents) {
    super(_fs, _path, _flag, _stat, contents);
    this._remoteFdId = remoteFdId;
  }
  getRemoteFdId() {
    return this._remoteFdId;
  }
  /**
   * @hidden
   */
  toRemoteArg() {
    return {
      type: 1 /* FD */,
      id: this._remoteFdId,
      data: bufferToTransferrableObject(this.getBuffer()),
      stat: bufferToTransferrableObject(this.getStats().toBuffer()),
      path: this.getPath(),
      flag: this.getFlag().getFlagString()
    };
  }
  sync(cb) {
    this._syncClose("sync", cb);
  }
  close(cb) {
    this._syncClose("close", cb);
  }
  _syncClose(type, cb) {
    if (this.isDirty()) {
      this._fs.syncClose(type, this, (e) => {
        if (!e) {
          this.resetDirty();
        }
        cb(e);
      });
    } else {
      cb();
    }
  }
};
var _WorkerFS = class extends BaseFileSystem {
  /**
   * Constructs a new WorkerFS instance that connects with BrowserFS running on
   * the specified worker.
   */
  constructor(worker) {
    super();
    this._callbackConverter = new CallbackArgumentConverter();
    this._isInitialized = false;
    this._isReadOnly = false;
    this._supportLinks = false;
    this._supportProps = false;
    this._worker = worker;
    this._worker.addEventListener("message", (e) => {
      const resp = e.data;
      if (isAPIResponse(resp)) {
        let i;
        const args = resp.args;
        const fixedArgs = new Array(args.length);
        for (i = 0; i < fixedArgs.length; i++) {
          fixedArgs[i] = this._argRemote2Local(args[i]);
        }
        this._callbackConverter.toLocalArg(resp.cbId).apply(null, fixedArgs);
      }
    });
  }
  static Create(opts, cb) {
    const fs2 = new _WorkerFS(opts.worker);
    fs2._initialize(() => {
      cb(null, fs2);
    });
  }
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  static isAvailable() {
    return typeof importScripts !== "undefined" || typeof Worker !== "undefined";
  }
  /**
   * Attaches a listener to the remote worker for file system requests.
   */
  static attachRemoteListener(worker) {
    const fdConverter = new FileDescriptorArgumentConverter();
    function argLocal2Remote(arg, requestArgs, cb) {
      switch (typeof arg) {
        case "object":
          if (arg instanceof Stats) {
            cb(null, statsLocal2Remote(arg));
          } else if (arg instanceof ApiError) {
            cb(null, apiErrorLocal2Remote(arg));
          } else if (arg instanceof BaseFile) {
            cb(null, fdConverter.toRemoteArg(arg, requestArgs[0], requestArgs[1], cb));
          } else if (arg instanceof FileFlag) {
            cb(null, fileFlagLocal2Remote(arg));
          } else if (arg instanceof Buffer2) {
            cb(null, bufferLocal2Remote(arg));
          } else if (arg instanceof Error) {
            cb(null, errorLocal2Remote(arg));
          } else {
            cb(null, arg);
          }
          break;
        default:
          cb(null, arg);
          break;
      }
    }
    function argRemote2Local(arg, fixedRequestArgs) {
      if (!arg) {
        return arg;
      }
      switch (typeof arg) {
        case "object":
          if (typeof arg["type"] === "number") {
            const specialArg = arg;
            switch (specialArg.type) {
              case 0 /* CB */:
                const cbId = arg.id;
                return function() {
                  let i;
                  const fixedArgs = new Array(arguments.length);
                  let message, countdown = arguments.length;
                  function abortAndSendError(err2) {
                    if (countdown > 0) {
                      countdown = -1;
                      message = {
                        browserfsMessage: true,
                        cbId,
                        args: [apiErrorLocal2Remote(err2)]
                      };
                      worker.postMessage(message);
                    }
                  }
                  for (i = 0; i < arguments.length; i++) {
                    ((i2, arg2) => {
                      argLocal2Remote(arg2, fixedRequestArgs, (err2, fixedArg) => {
                        fixedArgs[i2] = fixedArg;
                        if (err2) {
                          abortAndSendError(err2);
                        } else if (--countdown === 0) {
                          message = {
                            browserfsMessage: true,
                            cbId,
                            args: fixedArgs
                          };
                          worker.postMessage(message);
                        }
                      });
                    })(i, arguments[i]);
                  }
                  if (arguments.length === 0) {
                    message = {
                      browserfsMessage: true,
                      cbId,
                      args: fixedArgs
                    };
                    worker.postMessage(message);
                  }
                };
              case 2 /* API_ERROR */:
                return apiErrorRemote2Local(specialArg);
              case 3 /* STATS */:
                return statsRemote2Local(specialArg);
              case 5 /* FILEFLAG */:
                return fileFlagRemote2Local(specialArg);
              case 6 /* BUFFER */:
                return bufferRemote2Local(specialArg);
              case 7 /* ERROR */:
                return errorRemote2Local(specialArg);
              default:
                return arg;
            }
          } else {
            return arg;
          }
        default:
          return arg;
      }
    }
    worker.addEventListener("message", (e) => {
      const request = e.data;
      if (isAPIRequest(request)) {
        const args = request.args, fixedArgs = new Array(args.length);
        switch (request.method) {
          case "close":
          case "sync":
            (() => {
              const remoteCb = args[1];
              fdConverter.applyFdAPIRequest(request, (err2) => {
                const response = {
                  browserfsMessage: true,
                  cbId: remoteCb.id,
                  args: err2 ? [apiErrorLocal2Remote(err2)] : []
                };
                worker.postMessage(response);
              });
            })();
            break;
          case "probe":
            (() => {
              const rootFs = node_fs_default.getRootFS(), remoteCb = args[1], probeResponse = {
                type: 4 /* PROBE */,
                isReadOnly: rootFs.isReadOnly(),
                supportsLinks: rootFs.supportsLinks(),
                supportsProps: rootFs.supportsProps()
              }, response = {
                browserfsMessage: true,
                cbId: remoteCb.id,
                args: [probeResponse]
              };
              worker.postMessage(response);
            })();
            break;
          default:
            for (let i = 0; i < args.length; i++) {
              fixedArgs[i] = argRemote2Local(args[i], fixedArgs);
            }
            const rootFS = node_fs_default.getRootFS();
            rootFS[request.method].apply(rootFS, fixedArgs);
            break;
        }
      }
    });
  }
  getName() {
    return _WorkerFS.Name;
  }
  isReadOnly() {
    return this._isReadOnly;
  }
  supportsSynch() {
    return false;
  }
  supportsLinks() {
    return this._supportLinks;
  }
  supportsProps() {
    return this._supportProps;
  }
  rename(oldPath, newPath, cred, cb) {
    this._rpc("rename", arguments);
  }
  stat(p, isLstat, cred, cb) {
    this._rpc("stat", arguments);
  }
  open(p, flag, mode, cred, cb) {
    this._rpc("open", arguments);
  }
  unlink(p, cred, cb) {
    this._rpc("unlink", arguments);
  }
  rmdir(p, cred, cb) {
    this._rpc("rmdir", arguments);
  }
  mkdir(p, mode, cred, cb) {
    this._rpc("mkdir", arguments);
  }
  readdir(p, cred, cb) {
    this._rpc("readdir", arguments);
  }
  exists(p, cred, cb) {
    this._rpc("exists", arguments);
  }
  realpath(p, cache, cred, cb) {
    this._rpc("realpath", arguments);
  }
  truncate(p, len, cred, cb) {
    this._rpc("truncate", arguments);
  }
  readFile(fname, encoding, flag, cred, cb) {
    this._rpc("readFile", arguments);
  }
  writeFile(fname, data, encoding, flag, mode, cred, cb) {
    this._rpc("writeFile", arguments);
  }
  appendFile(fname, data, encoding, flag, mode, cred, cb) {
    this._rpc("appendFile", arguments);
  }
  chmod(p, isLchmod, mode, cred, cb) {
    this._rpc("chmod", arguments);
  }
  chown(p, isLchown, new_uid, new_gid, cred, cb) {
    this._rpc("chown", arguments);
  }
  utimes(p, atime, mtime, cred, cb) {
    this._rpc("utimes", arguments);
  }
  link(srcpath, dstpath, cred, cb) {
    this._rpc("link", arguments);
  }
  symlink(srcpath, dstpath, type, cred, cb) {
    this._rpc("symlink", arguments);
  }
  readlink(p, cred, cb) {
    this._rpc("readlink", arguments);
  }
  syncClose(method, fd, cb) {
    this._worker.postMessage({
      browserfsMessage: true,
      method,
      args: [fd.toRemoteArg(), this._callbackConverter.toRemoteArg(cb)]
    });
  }
  /**
   * Called once both local and remote sides are set up.
   */
  _initialize(cb) {
    if (!this._isInitialized) {
      const message = {
        browserfsMessage: true,
        method: "probe",
        args: [
          this._argLocal2Remote(emptyBuffer()),
          this._callbackConverter.toRemoteArg((probeResponse) => {
            this._isInitialized = true;
            this._isReadOnly = probeResponse.isReadOnly;
            this._supportLinks = probeResponse.supportsLinks;
            this._supportProps = probeResponse.supportsProps;
            cb();
          })
        ]
      };
      this._worker.postMessage(message);
    } else {
      cb();
    }
  }
  _argRemote2Local(arg) {
    if (!arg) {
      return arg;
    }
    switch (typeof arg) {
      case "object":
        if (typeof arg["type"] === "number") {
          const specialArg = arg;
          switch (specialArg.type) {
            case 2 /* API_ERROR */:
              return apiErrorRemote2Local(specialArg);
            case 1 /* FD */:
              const fdArg = specialArg;
              return new WorkerFile(
                this,
                fdArg.path,
                FileFlag.getFileFlag(fdArg.flag),
                Stats.fromBuffer(transferrableObjectToBuffer(fdArg.stat)),
                fdArg.id,
                transferrableObjectToBuffer(fdArg.data)
              );
            case 3 /* STATS */:
              return statsRemote2Local(specialArg);
            case 5 /* FILEFLAG */:
              return fileFlagRemote2Local(specialArg);
            case 6 /* BUFFER */:
              return bufferRemote2Local(specialArg);
            case 7 /* ERROR */:
              return errorRemote2Local(specialArg);
            default:
              return arg;
          }
        } else {
          return arg;
        }
      default:
        return arg;
    }
  }
  _rpc(methodName, args) {
    const fixedArgs = new Array(args.length);
    for (let i = 0; i < args.length; i++) {
      fixedArgs[i] = this._argLocal2Remote(args[i]);
    }
    const message = {
      browserfsMessage: true,
      method: methodName,
      args: fixedArgs
    };
    this._worker.postMessage(message);
  }
  /**
   * Converts a local argument into a remote argument. Public so WorkerFile objects can call it.
   */
  _argLocal2Remote(arg) {
    if (!arg) {
      return arg;
    }
    switch (typeof arg) {
      case "object":
        if (arg instanceof Stats) {
          return statsLocal2Remote(arg);
        } else if (arg instanceof ApiError) {
          return apiErrorLocal2Remote(arg);
        } else if (arg instanceof WorkerFile) {
          return arg.toRemoteArg();
        } else if (arg instanceof FileFlag) {
          return fileFlagLocal2Remote(arg);
        } else if (arg instanceof Buffer2) {
          return bufferLocal2Remote(arg);
        } else if (arg instanceof Error) {
          return errorLocal2Remote(arg);
        } else {
          return "Unknown argument";
        }
      case "function":
        return this._callbackConverter.toRemoteArg(arg);
      default:
        return arg;
    }
  }
};
var WorkerFS = _WorkerFS;
WorkerFS.Name = "WorkerFS";
WorkerFS.Options = {
  worker: {
    type: "object",
    description: "The target worker that you want to connect to, or the current worker if in a worker context.",
    validator: function(v, cb) {
      if (v["postMessage"]) {
        cb();
      } else {
        cb(new ApiError(22 /* EINVAL */, `option must be a Web Worker instance.`));
      }
    }
  }
};

// src/generic/xhr.ts
var xhrIsAvailable = typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null;
function asyncDownloadFileModern(p, type, cb) {
  const req = new XMLHttpRequest();
  req.open("GET", p, true);
  let jsonSupported = true;
  switch (type) {
    case "buffer":
      req.responseType = "arraybuffer";
      break;
    case "json":
      try {
        req.responseType = "json";
        jsonSupported = req.responseType === "json";
      } catch (e) {
        jsonSupported = false;
      }
      break;
    default:
      return cb(new ApiError(22 /* EINVAL */, "Invalid download type: " + type));
  }
  req.onreadystatechange = function(e) {
    if (req.readyState === 4) {
      if (req.status === 200) {
        switch (type) {
          case "buffer":
            return cb(null, req.response ? Buffer2.from(req.response) : emptyBuffer());
          case "json":
            if (jsonSupported) {
              return cb(null, req.response);
            } else {
              return cb(null, JSON.parse(req.responseText));
            }
        }
      } else {
        return cb(new ApiError(5 /* EIO */, `XHR error: response returned code ${req.status}`));
      }
    }
  };
  req.send();
}
function syncDownloadFileModern(p, type) {
  const req = new XMLHttpRequest();
  req.open("GET", p, false);
  let data = null;
  let err2 = null;
  req.overrideMimeType("text/plain; charset=x-user-defined");
  req.onreadystatechange = function(e) {
    if (req.readyState === 4) {
      if (req.status === 200) {
        switch (type) {
          case "buffer":
            const text = req.responseText;
            data = Buffer2.alloc(text.length);
            for (let i = 0; i < text.length; i++) {
              data[i] = text.charCodeAt(i);
            }
            return;
          case "json":
            data = JSON.parse(req.responseText);
            return;
        }
      } else {
        err2 = new ApiError(5 /* EIO */, `XHR error: response returned code ${req.status}`);
        return;
      }
    }
  };
  req.send();
  if (err2) {
    throw err2;
  }
  return data;
}
function syncDownloadFileIE10(p, type) {
  const req = new XMLHttpRequest();
  req.open("GET", p, false);
  switch (type) {
    case "buffer":
      req.responseType = "arraybuffer";
      break;
    case "json":
      break;
    default:
      throw new ApiError(22 /* EINVAL */, "Invalid download type: " + type);
  }
  let data;
  let err2;
  req.onreadystatechange = function(e) {
    if (req.readyState === 4) {
      if (req.status === 200) {
        switch (type) {
          case "buffer":
            data = Buffer2.from(req.response);
            break;
          case "json":
            data = JSON.parse(req.response);
            break;
        }
      } else {
        err2 = new ApiError(5 /* EIO */, `XHR error: response returned code ${req.status}`);
      }
    }
  };
  req.send();
  if (err2) {
    throw err2;
  }
  return data;
}
function getFileSize(async, p, cb) {
  const req = new XMLHttpRequest();
  req.open("HEAD", p, async);
  req.onreadystatechange = function(e) {
    if (req.readyState === 4) {
      if (req.status === 200) {
        try {
          return cb(null, parseInt(req.getResponseHeader("Content-Length") || "-1", 10));
        } catch (e2) {
          return cb(new ApiError(5 /* EIO */, "XHR HEAD error: Could not read content-length."));
        }
      } else {
        return cb(new ApiError(5 /* EIO */, `XHR HEAD error: response returned code ${req.status}`));
      }
    }
  };
  req.send();
}
var asyncDownloadFile = asyncDownloadFileModern;
var syncDownloadFile = isIE && typeof Blob !== "undefined" ? syncDownloadFileIE10 : syncDownloadFileModern;
function getFileSizeSync(p) {
  let rv = -1;
  getFileSize(false, p, function(err2, size) {
    if (err2) {
      throw err2;
    }
    rv = size;
  });
  return rv;
}
function getFileSizeAsync(p, cb) {
  getFileSize(true, p, cb);
}

// src/generic/fetch.ts
var fetchIsAvailable = typeof fetch !== "undefined" && fetch !== null;
function fetchFileAsync(p, type, cb) {
  let request;
  try {
    request = fetch(p);
  } catch (e) {
    return cb(new ApiError(22 /* EINVAL */, e.message));
  }
  request.then((res) => {
    if (!res.ok) {
      return cb(new ApiError(5 /* EIO */, `fetch error: response returned code ${res.status}`));
    } else {
      switch (type) {
        case "buffer":
          res.arrayBuffer().then((buf) => cb(null, Buffer2.from(buf))).catch((err2) => cb(new ApiError(5 /* EIO */, err2.message)));
          break;
        case "json":
          res.json().then((json) => cb(null, json)).catch((err2) => cb(new ApiError(5 /* EIO */, err2.message)));
          break;
        default:
          cb(new ApiError(22 /* EINVAL */, "Invalid download type: " + type));
      }
    }
  }).catch((err2) => cb(new ApiError(5 /* EIO */, err2.message)));
}
function fetchFileSizeAsync(p, cb) {
  fetch(p, { method: "HEAD" }).then((res) => {
    if (!res.ok) {
      return cb(new ApiError(5 /* EIO */, `fetch HEAD error: response returned code ${res.status}`));
    } else {
      return cb(null, parseInt(res.headers.get("Content-Length") || "-1", 10));
    }
  }).catch((err2) => cb(new ApiError(5 /* EIO */, err2.message)));
}

// src/generic/file_index.ts
var FileIndex = class {
  /**
   * Static method for constructing indices from a JSON listing.
   * @param listing Directory listing generated by tools/XHRIndexer.coffee
   * @return A new FileIndex object.
   */
  static fromListing(listing) {
    const idx = new FileIndex();
    const rootInode = new DirInode();
    idx._index["/"] = rootInode;
    const queue2 = [["", listing, rootInode]];
    while (queue2.length > 0) {
      let inode;
      const next = queue2.pop();
      const pwd = next[0];
      const tree = next[1];
      const parent = next[2];
      for (const node in tree) {
        if (Object.prototype.hasOwnProperty.call(tree, node)) {
          const children = tree[node];
          const name = `${pwd}/${node}`;
          if (children) {
            idx._index[name] = inode = new DirInode();
            queue2.push([name, children, inode]);
          } else {
            inode = new FileInode(new Stats(32768 /* FILE */, -1, 365));
          }
          if (parent) {
            parent._ls[node] = inode;
          }
        }
      }
    }
    return idx;
  }
  /**
   * Constructs a new FileIndex.
   */
  constructor() {
    this._index = {};
    this.addPath("/", new DirInode());
  }
  /**
   * Runs the given function over all files in the index.
   */
  fileIterator(cb) {
    for (const path in this._index) {
      if (Object.prototype.hasOwnProperty.call(this._index, path)) {
        const dir = this._index[path];
        const files = dir.getListing();
        for (const file of files) {
          const item = dir.getItem(file);
          if (isFileInode(item)) {
            cb(item.getData());
          }
        }
      }
    }
  }
  /**
   * Adds the given absolute path to the index if it is not already in the index.
   * Creates any needed parent directories.
   * @param path The path to add to the index.
   * @param inode The inode for the
   *   path to add.
   * @return 'True' if it was added or already exists, 'false' if there
   *   was an issue adding it (e.g. item in path is a file, item exists but is
   *   different).
   * @todo If adding fails and implicitly creates directories, we do not clean up
   *   the new empty directories.
   */
  addPath(path, inode) {
    if (!inode) {
      throw new Error("Inode must be specified");
    }
    if (path[0] !== "/") {
      throw new Error("Path must be absolute, got: " + path);
    }
    if (Object.prototype.hasOwnProperty.call(this._index, path)) {
      return this._index[path] === inode;
    }
    const splitPath2 = this._split_path(path);
    const dirpath = splitPath2[0];
    const itemname = splitPath2[1];
    let parent = this._index[dirpath];
    if (parent === void 0 && path !== "/") {
      parent = new DirInode();
      if (!this.addPath(dirpath, parent)) {
        return false;
      }
    }
    if (path !== "/") {
      if (!parent.addItem(itemname, inode)) {
        return false;
      }
    }
    if (isDirInode(inode)) {
      this._index[path] = inode;
    }
    return true;
  }
  /**
   * Adds the given absolute path to the index if it is not already in the index.
   * The path is added without special treatment (no joining of adjacent separators, etc).
   * Creates any needed parent directories.
   * @param path The path to add to the index.
   * @param inode The inode for the
   *   path to add.
   * @return 'True' if it was added or already exists, 'false' if there
   *   was an issue adding it (e.g. item in path is a file, item exists but is
   *   different).
   * @todo If adding fails and implicitly creates directories, we do not clean up
   *   the new empty directories.
   */
  addPathFast(path, inode) {
    const itemNameMark = path.lastIndexOf("/");
    const parentPath = itemNameMark === 0 ? "/" : path.substring(0, itemNameMark);
    const itemName = path.substring(itemNameMark + 1);
    let parent = this._index[parentPath];
    if (parent === void 0) {
      parent = new DirInode();
      this.addPathFast(parentPath, parent);
    }
    if (!parent.addItem(itemName, inode)) {
      return false;
    }
    if (inode.isDir()) {
      this._index[path] = inode;
    }
    return true;
  }
  /**
   * Removes the given path. Can be a file or a directory.
   * @return The removed item,
   *   or null if it did not exist.
   */
  removePath(path) {
    const splitPath2 = this._split_path(path);
    const dirpath = splitPath2[0];
    const itemname = splitPath2[1];
    const parent = this._index[dirpath];
    if (parent === void 0) {
      return null;
    }
    const inode = parent.remItem(itemname);
    if (inode === null) {
      return null;
    }
    if (isDirInode(inode)) {
      const children = inode.getListing();
      for (const child of children) {
        this.removePath(path + "/" + child);
      }
      if (path !== "/") {
        delete this._index[path];
      }
    }
    return inode;
  }
  /**
   * Retrieves the directory listing of the given path.
   * @return An array of files in the given path, or 'null' if it does not exist.
   */
  ls(path) {
    const item = this._index[path];
    if (item === void 0) {
      return null;
    }
    return item.getListing();
  }
  /**
   * Returns the inode of the given item.
   * @return Returns null if the item does not exist.
   */
  getInode(path) {
    const splitPath2 = this._split_path(path);
    const dirpath = splitPath2[0];
    const itemname = splitPath2[1];
    const parent = this._index[dirpath];
    if (parent === void 0) {
      return null;
    }
    if (dirpath === path) {
      return parent;
    }
    return parent.getItem(itemname);
  }
  /**
   * Split into a (directory path, item name) pair
   */
  _split_path(p) {
    const dirpath = dirname(p);
    const itemname = p.substr(dirpath.length + (dirpath === "/" ? 0 : 1));
    return [dirpath, itemname];
  }
};
var FileInode = class {
  constructor(data) {
    this.data = data;
  }
  isFile() {
    return true;
  }
  isDir() {
    return false;
  }
  getData() {
    return this.data;
  }
  setData(data) {
    this.data = data;
  }
  toStats() {
    return new Stats(32768 /* FILE */, 4096, 438);
  }
};
var DirInode = class {
  /**
   * Constructs an inode for a directory.
   */
  constructor(data = null) {
    this.data = data;
    this._ls = {};
  }
  isFile() {
    return false;
  }
  isDir() {
    return true;
  }
  getData() {
    return this.data;
  }
  /**
   * Return a Stats object for this inode.
   * @todo Should probably remove this at some point. This isn't the
   *       responsibility of the FileIndex.
   */
  getStats() {
    return new Stats(16384 /* DIRECTORY */, 4096, 365);
  }
  /**
   * Alias of getStats()
   * @todo Remove this at some point. This isn't the
   *       responsibility of the FileIndex.
   */
  toStats() {
    return this.getStats();
  }
  /**
   * Returns the directory listing for this directory. Paths in the directory are
   * relative to the directory's path.
   * @return The directory listing for this directory.
   */
  getListing() {
    return Object.keys(this._ls);
  }
  /**
   * Returns the inode for the indicated item, or null if it does not exist.
   * @param p Name of item in this directory.
   */
  getItem(p) {
    const item = this._ls[p];
    return item ? item : null;
  }
  /**
   * Add the given item to the directory listing. Note that the given inode is
   * not copied, and will be mutated by the DirInode if it is a DirInode.
   * @param p Item name to add to the directory listing.
   * @param inode The inode for the
   *   item to add to the directory inode.
   * @return True if it was added, false if it already existed.
   */
  addItem(p, inode) {
    if (p in this._ls) {
      return false;
    }
    this._ls[p] = inode;
    return true;
  }
  /**
   * Removes the given item from the directory listing.
   * @param p Name of item to remove from the directory listing.
   * @return Returns the item
   *   removed, or null if the item did not exist.
   */
  remItem(p) {
    const item = this._ls[p];
    if (item === void 0) {
      return null;
    }
    delete this._ls[p];
    return item;
  }
};
function isFileInode(inode) {
  return !!inode && inode.isFile();
}
function isDirInode(inode) {
  return !!inode && inode.isDir();
}

// src/backend/HTTPRequest.ts
function tryToString(buff, encoding, cb) {
  try {
    cb(null, buff.toString(encoding));
  } catch (e) {
    cb(e);
  }
}
function syncNotAvailableError() {
  throw new ApiError(95 /* ENOTSUP */, `Synchronous HTTP download methods are not available in this environment.`);
}
var _HTTPRequest = class extends BaseFileSystem {
  constructor(index, prefixUrl = "", preferXHR = false) {
    super();
    if (prefixUrl.length > 0 && prefixUrl.charAt(prefixUrl.length - 1) !== "/") {
      prefixUrl = prefixUrl + "/";
    }
    this.prefixUrl = prefixUrl;
    this._index = FileIndex.fromListing(index);
    if (fetchIsAvailable && (!preferXHR || !xhrIsAvailable)) {
      this._requestFileAsyncInternal = fetchFileAsync;
      this._requestFileSizeAsyncInternal = fetchFileSizeAsync;
    } else {
      this._requestFileAsyncInternal = asyncDownloadFile;
      this._requestFileSizeAsyncInternal = getFileSizeAsync;
    }
    if (xhrIsAvailable) {
      this._requestFileSyncInternal = syncDownloadFile;
      this._requestFileSizeSyncInternal = getFileSizeSync;
    } else {
      this._requestFileSyncInternal = syncNotAvailableError;
      this._requestFileSizeSyncInternal = syncNotAvailableError;
    }
  }
  /**
   * Construct an HTTPRequest file system backend with the given options.
   */
  static Create(opts, cb) {
    if (opts.index === void 0) {
      opts.index = `index.json`;
    }
    if (typeof opts.index === "string") {
      asyncDownloadFile(opts.index, "json", (e, data) => {
        if (e) {
          cb(e);
        } else {
          cb(null, new _HTTPRequest(data, opts.baseUrl));
        }
      });
    } else {
      cb(null, new _HTTPRequest(opts.index, opts.baseUrl));
    }
  }
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  static isAvailable() {
    return xhrIsAvailable || fetchIsAvailable;
  }
  empty() {
    this._index.fileIterator(function(file) {
      file.fileData = null;
    });
  }
  getName() {
    return _HTTPRequest.Name;
  }
  diskSpace(path, cb) {
    cb(0, 0);
  }
  isReadOnly() {
    return true;
  }
  supportsLinks() {
    return false;
  }
  supportsProps() {
    return false;
  }
  supportsSynch() {
    return xhrIsAvailable;
  }
  /**
   * Special HTTPFS function: Preload the given file into the index.
   * @param [String] path
   * @param [BrowserFS.Buffer] buffer
   */
  preloadFile(path, buffer) {
    const inode = this._index.getInode(path);
    if (isFileInode(inode)) {
      if (inode === null) {
        throw ApiError.ENOENT(path);
      }
      const stats = inode.getData();
      stats.size = buffer.length;
      stats.fileData = buffer;
    } else {
      throw ApiError.EISDIR(path);
    }
  }
  stat(path, isLstat, cred, cb) {
    const inode = this._index.getInode(path);
    if (inode === null) {
      return cb(ApiError.ENOENT(path));
    }
    let stats;
    if (!inode.toStats().hasAccess(4 /* READ */, cred)) {
      return cb(ApiError.EACCES(path));
    }
    if (isFileInode(inode)) {
      stats = inode.getData();
      if (stats.size < 0) {
        this._requestFileSizeAsync(path, function(e, size) {
          if (e) {
            return cb(e);
          }
          stats.size = size;
          cb(null, Stats.clone(stats));
        });
      } else {
        cb(null, Stats.clone(stats));
      }
    } else if (isDirInode(inode)) {
      stats = inode.getStats();
      cb(null, stats);
    } else {
      cb(ApiError.FileError(22 /* EINVAL */, path));
    }
  }
  statSync(path, isLstat, cred) {
    const inode = this._index.getInode(path);
    if (inode === null) {
      throw ApiError.ENOENT(path);
    }
    if (!inode.toStats().hasAccess(4 /* READ */, cred)) {
      throw ApiError.EACCES(path);
    }
    let stats;
    if (isFileInode(inode)) {
      stats = inode.getData();
      if (stats.size < 0) {
        stats.size = this._requestFileSizeSync(path);
      }
    } else if (isDirInode(inode)) {
      stats = inode.getStats();
    } else {
      throw ApiError.FileError(22 /* EINVAL */, path);
    }
    return stats;
  }
  open(path, flags, mode, cred, cb) {
    if (flags.isWriteable()) {
      return cb(new ApiError(1 /* EPERM */, path));
    }
    const self2 = this;
    const inode = this._index.getInode(path);
    if (inode === null) {
      return cb(ApiError.ENOENT(path));
    }
    if (!inode.toStats().hasAccess(flags.getMode(), cred)) {
      return cb(ApiError.EACCES(path));
    }
    if (isFileInode(inode) || isDirInode(inode)) {
      switch (flags.pathExistsAction()) {
        case 1 /* THROW_EXCEPTION */:
        case 2 /* TRUNCATE_FILE */:
          return cb(ApiError.EEXIST(path));
        case 0 /* NOP */:
          if (isDirInode(inode)) {
            const stats2 = inode.getStats();
            return cb(null, new NoSyncFile(self2, path, flags, stats2, stats2.fileData || void 0));
          }
          const stats = inode.getData();
          if (stats.fileData) {
            return cb(null, new NoSyncFile(self2, path, flags, Stats.clone(stats), stats.fileData));
          }
          this._requestFileAsync(path, "buffer", function(err2, buffer) {
            if (err2) {
              return cb(err2);
            }
            stats.size = buffer.length;
            stats.fileData = buffer;
            return cb(null, new NoSyncFile(self2, path, flags, Stats.clone(stats), buffer));
          });
          break;
        default:
          return cb(new ApiError(22 /* EINVAL */, "Invalid FileMode object."));
      }
    } else {
      return cb(ApiError.EPERM(path));
    }
  }
  openSync(path, flags, mode, cred) {
    if (flags.isWriteable()) {
      throw new ApiError(1 /* EPERM */, path);
    }
    const inode = this._index.getInode(path);
    if (inode === null) {
      throw ApiError.ENOENT(path);
    }
    if (!inode.toStats().hasAccess(flags.getMode(), cred)) {
      throw ApiError.EACCES(path);
    }
    if (isFileInode(inode) || isDirInode(inode)) {
      switch (flags.pathExistsAction()) {
        case 1 /* THROW_EXCEPTION */:
        case 2 /* TRUNCATE_FILE */:
          throw ApiError.EEXIST(path);
        case 0 /* NOP */:
          if (isDirInode(inode)) {
            const stats2 = inode.getStats();
            return new NoSyncFile(this, path, flags, stats2, stats2.fileData || void 0);
          }
          const stats = inode.getData();
          if (stats.fileData) {
            return new NoSyncFile(this, path, flags, Stats.clone(stats), stats.fileData);
          }
          const buffer = this._requestFileSync(path, "buffer");
          stats.size = buffer.length;
          stats.fileData = buffer;
          return new NoSyncFile(this, path, flags, Stats.clone(stats), buffer);
        default:
          throw new ApiError(22 /* EINVAL */, "Invalid FileMode object.");
      }
    } else {
      throw ApiError.EPERM(path);
    }
  }
  readdir(path, cred, cb) {
    try {
      cb(null, this.readdirSync(path, cred));
    } catch (e) {
      cb(e);
    }
  }
  readdirSync(path, cred) {
    const inode = this._index.getInode(path);
    if (inode === null) {
      throw ApiError.ENOENT(path);
    } else if (!inode.toStats().hasAccess(4 /* READ */, cred)) {
      throw ApiError.EACCES(path);
    } else if (isDirInode(inode)) {
      return inode.getListing();
    } else {
      throw ApiError.ENOTDIR(path);
    }
  }
  /**
   * We have the entire file as a buffer; optimize readFile.
   */
  readFile(fname, encoding, flag, cred, cb) {
    const oldCb = cb;
    this.open(fname, flag, 420, cred, function(err2, fd) {
      if (err2) {
        return cb(err2);
      }
      cb = function(err3, arg) {
        fd.close(function(err22) {
          if (!err3) {
            err3 = err22;
          }
          return oldCb(err3, arg);
        });
      };
      const fdCast = fd;
      const fdBuff = fdCast.getBuffer();
      if (encoding === null) {
        cb(err2, copyingSlice(fdBuff));
      } else {
        tryToString(fdBuff, encoding, cb);
      }
    });
  }
  /**
   * Specially-optimized readfile.
   */
  readFileSync(fname, encoding, flag, cred) {
    const fd = this.openSync(fname, flag, 420, cred);
    try {
      const fdCast = fd;
      const fdBuff = fdCast.getBuffer();
      if (encoding === null) {
        return copyingSlice(fdBuff);
      }
      return fdBuff.toString(encoding);
    } finally {
      fd.closeSync();
    }
  }
  _getHTTPPath(filePath) {
    if (filePath.charAt(0) === "/") {
      filePath = filePath.slice(1);
    }
    return this.prefixUrl + filePath;
  }
  _requestFileAsync(p, type, cb) {
    this._requestFileAsyncInternal(this._getHTTPPath(p), type, cb);
  }
  _requestFileSync(p, type) {
    return this._requestFileSyncInternal(this._getHTTPPath(p), type);
  }
  /**
   * Only requests the HEAD content, for the file size.
   */
  _requestFileSizeAsync(path, cb) {
    this._requestFileSizeAsyncInternal(this._getHTTPPath(path), cb);
  }
  _requestFileSizeSync(path) {
    return this._requestFileSizeSyncInternal(this._getHTTPPath(path));
  }
};
var HTTPRequest = _HTTPRequest;
HTTPRequest.Name = "HTTPRequest";
HTTPRequest.Options = {
  index: {
    type: ["string", "object"],
    optional: true,
    description: "URL to a file index as a JSON file or the file index object itself, generated with the make_http_index script. Defaults to `index.json`."
  },
  baseUrl: {
    type: "string",
    optional: true,
    description: "Used as the URL prefix for fetched files. Default: Fetch files relative to the index."
  },
  preferXHR: {
    type: "boolean",
    optional: true,
    description: "Whether to prefer XmlHttpRequest or fetch for async operations if both are available. Default: false"
  }
};

// src/generic/extended_ascii.ts
var _ExtendedASCII = class {
  static str2byte(str, buf) {
    const length = str.length > buf.length ? buf.length : str.length;
    for (let i = 0; i < length; i++) {
      let charCode = str.charCodeAt(i);
      if (charCode > 127) {
        const charIdx = _ExtendedASCII.extendedChars.indexOf(str.charAt(i));
        if (charIdx > -1) {
          charCode = charIdx + 128;
        }
      }
      buf[charCode] = i;
    }
    return length;
  }
  static byte2str(buff) {
    const chars = new Array(buff.length);
    for (let i = 0; i < buff.length; i++) {
      const charCode = buff[i];
      if (charCode > 127) {
        chars[i] = _ExtendedASCII.extendedChars[charCode - 128];
      } else {
        chars[i] = String.fromCharCode(charCode);
      }
    }
    return chars.join("");
  }
  static byteLength(str) {
    return str.length;
  }
};
var ExtendedASCII = _ExtendedASCII;
ExtendedASCII.extendedChars = [
  "\xC7",
  "\xFC",
  "\xE9",
  "\xE2",
  "\xE4",
  "\xE0",
  "\xE5",
  "\xE7",
  "\xEA",
  "\xEB",
  "\xE8",
  "\xEF",
  "\xEE",
  "\xEC",
  "\xC4",
  "\xC5",
  "\xC9",
  "\xE6",
  "\xC6",
  "\xF4",
  "\xF6",
  "\xF2",
  "\xFB",
  "\xF9",
  "\xFF",
  "\xD6",
  "\xDC",
  "\xF8",
  "\xA3",
  "\xD8",
  "\xD7",
  "\u0192",
  "\xE1",
  "\xED",
  "\xF3",
  "\xFA",
  "\xF1",
  "\xD1",
  "\xAA",
  "\xBA",
  "\xBF",
  "\xAE",
  "\xAC",
  "\xBD",
  "\xBC",
  "\xA1",
  "\xAB",
  "\xBB",
  "_",
  "_",
  "_",
  "\xA6",
  "\xA6",
  "\xC1",
  "\xC2",
  "\xC0",
  "\xA9",
  "\xA6",
  "\xA6",
  "+",
  "+",
  "\xA2",
  "\xA5",
  "+",
  "+",
  "-",
  "-",
  "+",
  "-",
  "+",
  "\xE3",
  "\xC3",
  "+",
  "+",
  "-",
  "-",
  "\xA6",
  "-",
  "+",
  "\xA4",
  "\xF0",
  "\xD0",
  "\xCA",
  "\xCB",
  "\xC8",
  "i",
  "\xCD",
  "\xCE",
  "\xCF",
  "+",
  "+",
  "_",
  "_",
  "\xA6",
  "\xCC",
  "_",
  "\xD3",
  "\xDF",
  "\xD4",
  "\xD2",
  "\xF5",
  "\xD5",
  "\xB5",
  "\xFE",
  "\xDE",
  "\xDA",
  "\xDB",
  "\xD9",
  "\xFD",
  "\xDD",
  "\xAF",
  "\xB4",
  "\xAD",
  "\xB1",
  "_",
  "\xBE",
  "\xB6",
  "\xA7",
  "\xF7",
  "\xB8",
  "\xB0",
  "\xA8",
  "\xB7",
  "\xB9",
  "\xB3",
  "\xB2",
  "_",
  " "
];

// node-modules-polyfills:events
var domain;
function EventHandlers() {
}
EventHandlers.prototype = /* @__PURE__ */ Object.create(null);
function EventEmitter() {
  EventEmitter.init.call(this);
}
var events_default = EventEmitter;
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.usingDomains = false;
EventEmitter.prototype.domain = void 0;
EventEmitter.prototype._events = void 0;
EventEmitter.prototype._maxListeners = void 0;
EventEmitter.defaultMaxListeners = 10;
EventEmitter.init = function() {
  this.domain = null;
  if (EventEmitter.usingDomains) {
    if (domain.active && !(this instanceof domain.Domain)) {
      this.domain = domain.active;
    }
  }
  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
    this._events = new EventHandlers();
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || void 0;
};
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== "number" || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};
function $getMaxListeners(that) {
  if (that._maxListeners === void 0)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};
function emitNone(handler, isFn, self2) {
  if (isFn)
    handler.call(self2);
  else {
    var len = handler.length;
    var listeners2 = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners2[i].call(self2);
  }
}
function emitOne(handler, isFn, self2, arg1) {
  if (isFn)
    handler.call(self2, arg1);
  else {
    var len = handler.length;
    var listeners2 = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners2[i].call(self2, arg1);
  }
}
function emitTwo(handler, isFn, self2, arg1, arg2) {
  if (isFn)
    handler.call(self2, arg1, arg2);
  else {
    var len = handler.length;
    var listeners2 = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners2[i].call(self2, arg1, arg2);
  }
}
function emitThree(handler, isFn, self2, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self2, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners2 = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners2[i].call(self2, arg1, arg2, arg3);
  }
}
function emitMany(handler, isFn, self2, args) {
  if (isFn)
    handler.apply(self2, args);
  else {
    var len = handler.length;
    var listeners2 = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners2[i].apply(self2, args);
  }
}
EventEmitter.prototype.emit = function emit2(type) {
  var er, handler, len, args, i, events, domain2;
  var needDomainExit = false;
  var doError = type === "error";
  events = this._events;
  if (events)
    doError = doError && events.error == null;
  else if (!doError)
    return false;
  domain2 = this.domain;
  if (doError) {
    er = arguments[1];
    if (domain2) {
      if (!er)
        er = new Error('Uncaught, unspecified "error" event');
      er.domainEmitter = this;
      er.domain = domain2;
      er.domainThrown = false;
      domain2.emit("error", er);
    } else if (er instanceof Error) {
      throw er;
    } else {
      var err2 = new Error('Uncaught, unspecified "error" event. (' + er + ")");
      err2.context = er;
      throw err2;
    }
    return false;
  }
  handler = events[type];
  if (!handler)
    return false;
  var isFn = typeof handler === "function";
  len = arguments.length;
  switch (len) {
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }
  if (needDomainExit)
    domain2.exit();
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  if (typeof listener !== "function")
    throw new TypeError('"listener" argument must be a function');
  events = target._events;
  if (!events) {
    events = target._events = new EventHandlers();
    target._eventsCount = 0;
  } else {
    if (events.newListener) {
      target.emit(
        "newListener",
        type,
        listener.listener ? listener.listener : listener
      );
      events = target._events;
    }
    existing = events[type];
  }
  if (!existing) {
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === "function") {
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
    } else {
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + type + " listeners added. Use emitter.setMaxListeners() to increase limit");
        w.name = "MaxListenersExceededWarning";
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        emitWarning(w);
      }
    }
  }
  return target;
}
function emitWarning(e) {
  typeof console.warn === "function" ? console.warn(e) : console.log(e);
}
EventEmitter.prototype.addListener = function addListener2(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function _onceWrap(target, type, listener) {
  var fired = false;
  function g() {
    target.removeListener(type, g);
    if (!fired) {
      fired = true;
      listener.apply(target, arguments);
    }
  }
  g.listener = listener;
  return g;
}
EventEmitter.prototype.once = function once2(type, listener) {
  if (typeof listener !== "function")
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  if (typeof listener !== "function")
    throw new TypeError('"listener" argument must be a function');
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.removeListener = function removeListener2(type, listener) {
  var list, events, position, i, originalListener;
  if (typeof listener !== "function")
    throw new TypeError('"listener" argument must be a function');
  events = this._events;
  if (!events)
    return this;
  list = events[type];
  if (!list)
    return this;
  if (list === listener || list.listener && list.listener === listener) {
    if (--this._eventsCount === 0)
      this._events = new EventHandlers();
    else {
      delete events[type];
      if (events.removeListener)
        this.emit("removeListener", type, list.listener || listener);
    }
  } else if (typeof list !== "function") {
    position = -1;
    for (i = list.length; i-- > 0; ) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }
    if (position < 0)
      return this;
    if (list.length === 1) {
      list[0] = void 0;
      if (--this._eventsCount === 0) {
        this._events = new EventHandlers();
        return this;
      } else {
        delete events[type];
      }
    } else {
      spliceOne(list, position);
    }
    if (events.removeListener)
      this.emit("removeListener", type, originalListener || listener);
  }
  return this;
};
EventEmitter.prototype.removeAllListeners = function removeAllListeners2(type) {
  var listeners2, events;
  events = this._events;
  if (!events)
    return this;
  if (!events.removeListener) {
    if (arguments.length === 0) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    } else if (events[type]) {
      if (--this._eventsCount === 0)
        this._events = new EventHandlers();
      else
        delete events[type];
    }
    return this;
  }
  if (arguments.length === 0) {
    var keys2 = Object.keys(events);
    for (var i = 0, key; i < keys2.length; ++i) {
      key = keys2[i];
      if (key === "removeListener")
        continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners("removeListener");
    this._events = new EventHandlers();
    this._eventsCount = 0;
    return this;
  }
  listeners2 = events[type];
  if (typeof listeners2 === "function") {
    this.removeListener(type, listeners2);
  } else if (listeners2) {
    do {
      this.removeListener(type, listeners2[listeners2.length - 1]);
    } while (listeners2[0]);
  }
  return this;
};
EventEmitter.prototype.listeners = function listeners(type) {
  var evlistener;
  var ret;
  var events = this._events;
  if (!events)
    ret = [];
  else {
    evlistener = events[type];
    if (!evlistener)
      ret = [];
    else if (typeof evlistener === "function")
      ret = [evlistener.listener || evlistener];
    else
      ret = unwrapListeners(evlistener);
  }
  return ret;
};
EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === "function") {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events) {
    var evlistener = events[type];
    if (typeof evlistener === "function") {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}
function arrayClone(arr, i) {
  var copy2 = new Array(i);
  while (i--)
    copy2[i] = arr[i];
  return copy2;
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

// node_modules/rollup-plugin-node-polyfills/polyfills/inherits.js
var inherits;
if (typeof Object.create === "function") {
  inherits = function inherits2(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  inherits = function inherits2(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function() {
    };
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}
var inherits_default = inherits;

// node-modules-polyfills:util
var formatRegExp = /%[sdj%]/g;
function format(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect2(arguments[i]));
    }
    return objects.join(" ");
  }
  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x2) {
    if (x2 === "%%")
      return "%";
    if (i >= len)
      return x2;
    switch (x2) {
      case "%s":
        return String(args[i++]);
      case "%d":
        return Number(args[i++]);
      case "%j":
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return "[Circular]";
        }
      default:
        return x2;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += " " + x;
    } else {
      str += " " + inspect2(x);
    }
  }
  return str;
}
function deprecate(fn, msg) {
  if (isUndefined(globalThis.process)) {
    return function() {
      return deprecate(fn, msg).apply(this, arguments);
    };
  }
  if (process_default.noDeprecation === true) {
    return fn;
  }
  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process_default.throwDeprecation) {
        throw new Error(msg);
      } else if (process_default.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }
  return deprecated;
}
var debugs = {};
var debugEnviron;
function debuglog(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process_default.env.NODE_DEBUG || "";
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
      var pid = 0;
      debugs[set] = function() {
        var msg = format.apply(null, arguments);
        console.error("%s %d: %s", set, pid, msg);
      };
    } else {
      debugs[set] = function() {
      };
    }
  }
  return debugs[set];
}
function inspect2(obj, opts) {
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  if (arguments.length >= 3)
    ctx.depth = arguments[2];
  if (arguments.length >= 4)
    ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    ctx.showHidden = opts;
  } else if (opts) {
    _extend(ctx, opts);
  }
  if (isUndefined(ctx.showHidden))
    ctx.showHidden = false;
  if (isUndefined(ctx.depth))
    ctx.depth = 2;
  if (isUndefined(ctx.colors))
    ctx.colors = false;
  if (isUndefined(ctx.customInspect))
    ctx.customInspect = true;
  if (ctx.colors)
    ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
inspect2.colors = {
  "bold": [1, 22],
  "italic": [3, 23],
  "underline": [4, 24],
  "inverse": [7, 27],
  "white": [37, 39],
  "grey": [90, 39],
  "black": [30, 39],
  "blue": [34, 39],
  "cyan": [36, 39],
  "green": [32, 39],
  "magenta": [35, 39],
  "red": [31, 39],
  "yellow": [33, 39]
};
inspect2.styles = {
  "special": "cyan",
  "number": "yellow",
  "boolean": "yellow",
  "undefined": "grey",
  "null": "bold",
  "string": "green",
  "date": "magenta",
  // "name": intentionally not styling
  "regexp": "red"
};
function stylizeWithColor(str, styleType) {
  var style = inspect2.styles[styleType];
  if (style) {
    return "\x1B[" + inspect2.colors[style][0] + "m" + str + "\x1B[" + inspect2.colors[style][1] + "m";
  } else {
    return str;
  }
}
function stylizeNoColor(str, styleType) {
  return str;
}
function arrayToHash(array) {
  var hash = {};
  array.forEach(function(val, idx) {
    hash[val] = true;
  });
  return hash;
}
function formatValue(ctx, value, recurseTimes) {
  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== inspect2 && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }
  var keys2 = Object.keys(value);
  var visibleKeys = arrayToHash(keys2);
  if (ctx.showHidden) {
    keys2 = Object.getOwnPropertyNames(value);
  }
  if (isError(value) && (keys2.indexOf("message") >= 0 || keys2.indexOf("description") >= 0)) {
    return formatError(value);
  }
  if (keys2.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ": " + value.name : "";
      return ctx.stylize("[Function" + name + "]", "special");
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), "date");
    }
    if (isError(value)) {
      return formatError(value);
    }
  }
  var base = "", array = false, braces = ["{", "}"];
  if (isArray2(value)) {
    array = true;
    braces = ["[", "]"];
  }
  if (isFunction(value)) {
    var n = value.name ? ": " + value.name : "";
    base = " [Function" + n + "]";
  }
  if (isRegExp(value)) {
    base = " " + RegExp.prototype.toString.call(value);
  }
  if (isDate(value)) {
    base = " " + Date.prototype.toUTCString.call(value);
  }
  if (isError(value)) {
    base = " " + formatError(value);
  }
  if (keys2.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }
  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
    } else {
      return ctx.stylize("[Object]", "special");
    }
  }
  ctx.seen.push(value);
  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys2);
  } else {
    output = keys2.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }
  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize("undefined", "undefined");
  if (isString(value)) {
    var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
    return ctx.stylize(simple, "string");
  }
  if (isNumber(value))
    return ctx.stylize("" + value, "number");
  if (isBoolean(value))
    return ctx.stylize("" + value, "boolean");
  if (isNull(value))
    return ctx.stylize("null", "null");
}
function formatError(value) {
  return "[" + Error.prototype.toString.call(value) + "]";
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys2) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(
        ctx,
        value,
        recurseTimes,
        visibleKeys,
        String(i),
        true
      ));
    } else {
      output.push("");
    }
  }
  keys2.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(
        ctx,
        value,
        recurseTimes,
        visibleKeys,
        key,
        true
      ));
    }
  });
  return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize("[Getter/Setter]", "special");
    } else {
      str = ctx.stylize("[Getter]", "special");
    }
  } else {
    if (desc.set) {
      str = ctx.stylize("[Setter]", "special");
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = "[" + key + "]";
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf("\n") > -1) {
        if (array) {
          str = str.split("\n").map(function(line) {
            return "  " + line;
          }).join("\n").substr(2);
        } else {
          str = "\n" + str.split("\n").map(function(line) {
            return "   " + line;
          }).join("\n");
        }
      }
    } else {
      str = ctx.stylize("[Circular]", "special");
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify("" + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, "name");
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, "string");
    }
  }
  return name + ": " + str;
}
function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf("\n") >= 0)
      numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
  }, 0);
  if (length > 60) {
    return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
  }
  return braces[0] + base + " " + output.join(", ") + " " + braces[1];
}
function isArray2(ar) {
  return Array.isArray(ar);
}
function isBoolean(arg) {
  return typeof arg === "boolean";
}
function isNull(arg) {
  return arg === null;
}
function isNumber(arg) {
  return typeof arg === "number";
}
function isString(arg) {
  return typeof arg === "string";
}
function isUndefined(arg) {
  return arg === void 0;
}
function isRegExp(re) {
  return isObject(re) && objectToString(re) === "[object RegExp]";
}
function isObject(arg) {
  return typeof arg === "object" && arg !== null;
}
function isDate(d) {
  return isObject(d) && objectToString(d) === "[object Date]";
}
function isError(e) {
  return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
}
function isFunction(arg) {
  return typeof arg === "function";
}
function objectToString(o) {
  return Object.prototype.toString.call(o);
}
function _extend(origin, add) {
  if (!add || !isObject(add))
    return origin;
  var keys2 = Object.keys(add);
  var i = keys2.length;
  while (i--) {
    origin[keys2[i]] = add[keys2[i]];
  }
  return origin;
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

// node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/buffer-list.js
var buffer_list_default = BufferList;
function BufferList() {
  this.head = null;
  this.tail = null;
  this.length = 0;
}
BufferList.prototype.push = function(v) {
  var entry = { data: v, next: null };
  if (this.length > 0)
    this.tail.next = entry;
  else
    this.head = entry;
  this.tail = entry;
  ++this.length;
};
BufferList.prototype.unshift = function(v) {
  var entry = { data: v, next: this.head };
  if (this.length === 0)
    this.tail = entry;
  this.head = entry;
  ++this.length;
};
BufferList.prototype.shift = function() {
  if (this.length === 0)
    return;
  var ret = this.head.data;
  if (this.length === 1)
    this.head = this.tail = null;
  else
    this.head = this.head.next;
  --this.length;
  return ret;
};
BufferList.prototype.clear = function() {
  this.head = this.tail = null;
  this.length = 0;
};
BufferList.prototype.join = function(s) {
  if (this.length === 0)
    return "";
  var p = this.head;
  var ret = "" + p.data;
  while (p = p.next) {
    ret += s + p.data;
  }
  return ret;
};
BufferList.prototype.concat = function(n) {
  if (this.length === 0)
    return Buffer2.alloc(0);
  if (this.length === 1)
    return this.head.data;
  var ret = Buffer2.allocUnsafe(n >>> 0);
  var p = this.head;
  var i = 0;
  while (p) {
    p.data.copy(ret, i);
    i += p.data.length;
    p = p.next;
  }
  return ret;
};

// node-modules-polyfills:string_decoder
var isBufferEncoding = Buffer2.isEncoding || function(encoding) {
  switch (encoding && encoding.toLowerCase()) {
    case "hex":
    case "utf8":
    case "utf-8":
    case "ascii":
    case "binary":
    case "base64":
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
    case "raw":
      return true;
    default:
      return false;
  }
};
function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error("Unknown encoding: " + encoding);
  }
}
function StringDecoder(encoding) {
  this.encoding = (encoding || "utf8").toLowerCase().replace(/[-_]/, "");
  assertEncoding(encoding);
  switch (this.encoding) {
    case "utf8":
      this.surrogateSize = 3;
      break;
    case "ucs2":
    case "utf16le":
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case "base64":
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }
  this.charBuffer = new Buffer2(6);
  this.charReceived = 0;
  this.charLength = 0;
}
StringDecoder.prototype.write = function(buffer) {
  var charStr = "";
  while (this.charLength) {
    var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;
    if (this.charReceived < this.charLength) {
      return "";
    }
    buffer = buffer.slice(available, buffer.length);
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 55296 && charCode <= 56319) {
      this.charLength += this.surrogateSize;
      charStr = "";
      continue;
    }
    this.charReceived = this.charLength = 0;
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }
  this.detectIncompleteChar(buffer);
  var end = buffer.length;
  if (this.charLength) {
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }
  charStr += buffer.toString(this.encoding, 0, end);
  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  if (charCode >= 55296 && charCode <= 56319) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }
  return charStr;
};
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  var i = buffer.length >= 3 ? 3 : buffer.length;
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];
    if (i == 1 && c >> 5 == 6) {
      this.charLength = 2;
      break;
    }
    if (i <= 2 && c >> 4 == 14) {
      this.charLength = 3;
      break;
    }
    if (i <= 3 && c >> 3 == 30) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};
StringDecoder.prototype.end = function(buffer) {
  var res = "";
  if (buffer && buffer.length)
    res = this.write(buffer);
  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }
  return res;
};
function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}
function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}
function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

// node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/readable.js
Readable.ReadableState = ReadableState;
var debug = debuglog("stream");
inherits_default(Readable, events_default);
function prependListener2(emitter, event, fn) {
  if (typeof emitter.prependListener === "function") {
    return emitter.prependListener(event, fn);
  } else {
    if (!emitter._events || !emitter._events[event])
      emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event]))
      emitter._events[event].unshift(fn);
    else
      emitter._events[event] = [fn, emitter._events[event]];
  }
}
function listenerCount2(emitter, type) {
  return emitter.listeners(type).length;
}
function ReadableState(options, stream) {
  options = options || {};
  this.objectMode = !!options.objectMode;
  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
  this.highWaterMark = ~~this.highWaterMark;
  this.buffer = new buffer_list_default();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;
  this.sync = true;
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.defaultEncoding = options.defaultEncoding || "utf8";
  this.ranOut = false;
  this.awaitDrain = 0;
  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  if (!(this instanceof Readable))
    return new Readable(options);
  this._readableState = new ReadableState(options, this);
  this.readable = true;
  if (options && typeof options.read === "function")
    this._read = options.read;
  events_default.call(this);
}
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;
  if (!state.objectMode && typeof chunk === "string") {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = Buffer.from(chunk, encoding);
      encoding = "";
    }
  }
  return readableAddChunk(this, state, chunk, encoding, false);
};
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, "", true);
};
Readable.prototype.isPaused = function() {
  return this._readableState.flowing === false;
};
function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit("error", er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error("stream.push() after EOF");
      stream.emit("error", e);
    } else if (state.endEmitted && addToFront) {
      var _e = new Error("stream.unshift() after end event");
      stream.emit("error", _e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }
      if (!addToFront)
        state.reading = false;
      if (!skipAdd) {
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit("data", chunk);
          stream.read(0);
        } else {
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront)
            state.buffer.unshift(chunk);
          else
            state.buffer.push(chunk);
          if (state.needReadable)
            emitReadable(stream);
        }
      }
      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }
  return needMoreData(state);
}
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}
Readable.prototype.setEncoding = function(enc) {
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};
var MAX_HWM = 8388608;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended)
    return 0;
  if (state.objectMode)
    return 1;
  if (n !== n) {
    if (state.flowing && state.length)
      return state.buffer.head.data.length;
    else
      return state.length;
  }
  if (n > state.highWaterMark)
    state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length)
    return n;
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}
Readable.prototype.read = function(n) {
  debug("read", n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0)
    state.emittedReadable = false;
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug("read: emitReadable", state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }
  n = howMuchToRead(n, state);
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }
  var doRead = state.needReadable;
  debug("need readable", doRead);
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug("length less than watermark", doRead);
  }
  if (state.ended || state.reading) {
    doRead = false;
    debug("reading or ended", doRead);
  } else if (doRead) {
    debug("do read");
    state.reading = true;
    state.sync = true;
    if (state.length === 0)
      state.needReadable = true;
    this._read(state.highWaterMark);
    state.sync = false;
    if (!state.reading)
      n = howMuchToRead(nOrig, state);
  }
  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;
  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }
  if (state.length === 0) {
    if (!state.ended)
      state.needReadable = true;
    if (nOrig !== n && state.ended)
      endReadable(this);
  }
  if (ret !== null)
    this.emit("data", ret);
  return ret;
};
function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== "string" && chunk !== null && chunk !== void 0 && !state.objectMode) {
    er = new TypeError("Invalid non-string/buffer chunk");
  }
  return er;
}
function onEofChunk(stream, state) {
  if (state.ended)
    return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;
  emitReadable(stream);
}
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug("emitReadable", state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      nextTick(emitReadable_, stream);
    else
      emitReadable_(stream);
  }
}
function emitReadable_(stream) {
  debug("emit readable");
  stream.emit("readable");
  flow(stream);
}
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    nextTick(maybeReadMore_, stream, state);
  }
}
function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug("maybeReadMore read 0");
    stream.read(0);
    if (len === state.length)
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}
Readable.prototype._read = function(n) {
  this.emit("error", new Error("not implemented"));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;
  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
  var doEnd = !pipeOpts || pipeOpts.end !== false;
  var endFn = doEnd ? onend2 : cleanup;
  if (state.endEmitted)
    nextTick(endFn);
  else
    src.once("end", endFn);
  dest.on("unpipe", onunpipe);
  function onunpipe(readable) {
    debug("onunpipe");
    if (readable === src) {
      cleanup();
    }
  }
  function onend2() {
    debug("onend");
    dest.end();
  }
  var ondrain = pipeOnDrain(src);
  dest.on("drain", ondrain);
  var cleanedUp = false;
  function cleanup() {
    debug("cleanup");
    dest.removeListener("close", onclose);
    dest.removeListener("finish", onfinish);
    dest.removeListener("drain", ondrain);
    dest.removeListener("error", onerror);
    dest.removeListener("unpipe", onunpipe);
    src.removeListener("end", onend2);
    src.removeListener("end", cleanup);
    src.removeListener("data", ondata);
    cleanedUp = true;
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }
  var increasedAwaitDrain = false;
  src.on("data", ondata);
  function ondata(chunk) {
    debug("ondata");
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf2(state.pipes, dest) !== -1) && !cleanedUp) {
        debug("false write response, pause", src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }
  function onerror(er) {
    debug("onerror", er);
    unpipe();
    dest.removeListener("error", onerror);
    if (listenerCount2(dest, "error") === 0)
      dest.emit("error", er);
  }
  prependListener2(dest, "error", onerror);
  function onclose() {
    dest.removeListener("finish", onfinish);
    unpipe();
  }
  dest.once("close", onclose);
  function onfinish() {
    debug("onfinish");
    dest.removeListener("close", onclose);
    unpipe();
  }
  dest.once("finish", onfinish);
  function unpipe() {
    debug("unpipe");
    src.unpipe(dest);
  }
  dest.emit("pipe", src);
  if (!state.flowing) {
    debug("pipe resume");
    src.resume();
  }
  return dest;
};
function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug("pipeOnDrain", state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && src.listeners("data").length) {
      state.flowing = true;
      flow(src);
    }
  };
}
Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;
  if (state.pipesCount === 0)
    return this;
  if (state.pipesCount === 1) {
    if (dest && dest !== state.pipes)
      return this;
    if (!dest)
      dest = state.pipes;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit("unpipe", this);
    return this;
  }
  if (!dest) {
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    for (var _i = 0; _i < len; _i++) {
      dests[_i].emit("unpipe", this);
    }
    return this;
  }
  var i = indexOf2(state.pipes, dest);
  if (i === -1)
    return this;
  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];
  dest.emit("unpipe", this);
  return this;
};
Readable.prototype.on = function(ev, fn) {
  var res = events_default.prototype.on.call(this, ev, fn);
  if (ev === "data") {
    if (this._readableState.flowing !== false)
      this.resume();
  } else if (ev === "readable") {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }
  return res;
};
Readable.prototype.addListener = Readable.prototype.on;
function nReadingNextTick(self2) {
  debug("readable nexttick read 0");
  self2.read(0);
}
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug("resume");
    state.flowing = true;
    resume(this, state);
  }
  return this;
};
function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    nextTick(resume_, stream, state);
  }
}
function resume_(stream, state) {
  if (!state.reading) {
    debug("resume read 0");
    stream.read(0);
  }
  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit("resume");
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}
Readable.prototype.pause = function() {
  debug("call pause flowing=%j", this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug("pause");
    this._readableState.flowing = false;
    this.emit("pause");
  }
  return this;
};
function flow(stream) {
  var state = stream._readableState;
  debug("flow", state.flowing);
  while (state.flowing && stream.read() !== null) {
  }
}
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;
  var self2 = this;
  stream.on("end", function() {
    debug("wrapped end");
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self2.push(chunk);
    }
    self2.push(null);
  });
  stream.on("data", function(chunk) {
    debug("wrapped data");
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (state.objectMode && (chunk === null || chunk === void 0))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;
    var ret = self2.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });
  for (var i in stream) {
    if (this[i] === void 0 && typeof stream[i] === "function") {
      this[i] = function(method) {
        return function() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }
  var events = ["error", "close", "destroy", "pause", "resume"];
  forEach(events, function(ev) {
    stream.on(ev, self2.emit.bind(self2, ev));
  });
  self2._read = function(n) {
    debug("wrapped _read", n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };
  return self2;
};
Readable._fromList = fromList;
function fromList(n, state) {
  if (state.length === 0)
    return null;
  var ret;
  if (state.objectMode)
    ret = state.buffer.shift();
  else if (!n || n >= state.length) {
    if (state.decoder)
      ret = state.buffer.join("");
    else if (state.buffer.length === 1)
      ret = state.buffer.head.data;
    else
      ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    ret = fromListPartial(n, state.buffer, state.decoder);
  }
  return ret;
}
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    ret = list.shift();
  } else {
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length)
      ret += str;
    else
      ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next)
          list.head = p.next;
        else
          list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next)
          list.head = p.next;
        else
          list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}
function endReadable(stream) {
  var state = stream._readableState;
  if (state.length > 0)
    throw new Error('"endReadable()" called on non-empty stream');
  if (!state.endEmitted) {
    state.ended = true;
    nextTick(endReadableNT, state, stream);
  }
}
function endReadableNT(state, stream) {
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit("end");
  }
}
function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
function indexOf2(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x)
      return i;
  }
  return -1;
}

// node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/writable.js
Writable.WritableState = WritableState;
inherits_default(Writable, EventEmitter);
function nop() {
}
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}
function WritableState(options, stream) {
  Object.defineProperty(this, "buffer", {
    get: deprecate(function() {
      return this.getBuffer();
    }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")
  });
  options = options || {};
  this.objectMode = !!options.objectMode;
  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
  this.highWaterMark = ~~this.highWaterMark;
  this.needDrain = false;
  this.ending = false;
  this.ended = false;
  this.finished = false;
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;
  this.defaultEncoding = options.defaultEncoding || "utf8";
  this.length = 0;
  this.writing = false;
  this.corked = 0;
  this.sync = true;
  this.bufferProcessing = false;
  this.onwrite = function(er) {
    onwrite(stream, er);
  };
  this.writecb = null;
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;
  this.pendingcb = 0;
  this.prefinished = false;
  this.errorEmitted = false;
  this.bufferedRequestCount = 0;
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
function Writable(options) {
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);
  this._writableState = new WritableState(options, this);
  this.writable = true;
  if (options) {
    if (typeof options.write === "function")
      this._write = options.write;
    if (typeof options.writev === "function")
      this._writev = options.writev;
  }
  EventEmitter.call(this);
}
Writable.prototype.pipe = function() {
  this.emit("error", new Error("Cannot pipe, not readable"));
};
function writeAfterEnd(stream, cb) {
  var er = new Error("write after end");
  stream.emit("error", er);
  nextTick(cb, er);
}
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;
  if (chunk === null) {
    er = new TypeError("May not write null values to stream");
  } else if (!Buffer2.isBuffer(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
    er = new TypeError("Invalid non-string/buffer chunk");
  }
  if (er) {
    stream.emit("error", er);
    nextTick(cb, er);
    valid = false;
  }
  return valid;
}
Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  if (typeof encoding === "function") {
    cb = encoding;
    encoding = null;
  }
  if (Buffer2.isBuffer(chunk))
    encoding = "buffer";
  else if (!encoding)
    encoding = state.defaultEncoding;
  if (typeof cb !== "function")
    cb = nop;
  if (state.ended)
    writeAfterEnd(this, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function() {
  var state = this._writableState;
  state.corked++;
};
Writable.prototype.uncork = function() {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest)
      clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  if (typeof encoding === "string")
    encoding = encoding.toLowerCase();
  if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
    throw new TypeError("Unknown encoding: " + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
    chunk = Buffer2.from(chunk, encoding);
  }
  return chunk;
}
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (Buffer2.isBuffer(chunk))
    encoding = "buffer";
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  if (!ret)
    state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync)
    nextTick(cb, er);
  else
    cb(er);
  stream._writableState.errorEmitted = true;
  stream.emit("error", er);
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  onwriteStateUpdate(state);
  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    var finished = needFinish(state);
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit("drain");
  }
}
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }
    doWrite(stream, state, true, state.length, buffer, "", holder.finish);
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      if (state.writing) {
        break;
      }
    }
    if (entry === null)
      state.lastBufferedRequest = null;
  }
  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error("not implemented"));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === "function") {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === "function") {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== void 0)
    this.write(chunk, encoding);
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit("prefinish");
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit("finish");
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      nextTick(cb);
    else
      stream.once("finish", cb);
  }
  state.ended = true;
  stream.writable = false;
}
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function(err2) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err2);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}

// node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/duplex.js
inherits_default(Duplex, Readable);
var keys = Object.keys(Writable.prototype);
for (v = 0; v < keys.length; v++) {
  method = keys[v];
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
}
var method;
var v;
function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  if (options && options.readable === false)
    this.readable = false;
  if (options && options.writable === false)
    this.writable = false;
  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;
  this.once("end", onend);
}
function onend() {
  if (this.allowHalfOpen || this._writableState.ended)
    return;
  nextTick(onEndNT, this);
}
function onEndNT(self2) {
  self2.end();
}

// node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/transform.js
inherits_default(Transform, Duplex);
function TransformState(stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };
  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}
function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (!cb)
    return stream.emit("error", new Error("no writecb in Transform class"));
  ts.writechunk = null;
  ts.writecb = null;
  if (data !== null && data !== void 0)
    stream.push(data);
  cb(er);
  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}
function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);
  Duplex.call(this, options);
  this._transformState = new TransformState(this);
  var stream = this;
  this._readableState.needReadable = true;
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === "function")
      this._transform = options.transform;
    if (typeof options.flush === "function")
      this._flush = options.flush;
  }
  this.once("prefinish", function() {
    if (typeof this._flush === "function")
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}
Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error("Not implemented");
};
Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};
Transform.prototype._read = function(n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    ts.needTransform = true;
  }
};
function done(stream, er) {
  if (er)
    return stream.emit("error", er);
  var ws = stream._writableState;
  var ts = stream._transformState;
  if (ws.length)
    throw new Error("Calling transform done when ws.length != 0");
  if (ts.transforming)
    throw new Error("Calling transform done when still transforming");
  return stream.push(null);
}

// node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/passthrough.js
inherits_default(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

// node-modules-polyfills:stream
inherits_default(Stream, events_default);
Stream.Readable = Readable;
Stream.Writable = Writable;
Stream.Duplex = Duplex;
Stream.Transform = Transform;
Stream.PassThrough = PassThrough;
Stream.Stream = Stream;
function Stream() {
  events_default.call(this);
}
Stream.prototype.pipe = function(dest, options) {
  var source = this;
  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }
  source.on("data", ondata);
  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }
  dest.on("drain", ondrain);
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on("end", onend2);
    source.on("close", onclose);
  }
  var didOnEnd = false;
  function onend2() {
    if (didOnEnd)
      return;
    didOnEnd = true;
    dest.end();
  }
  function onclose() {
    if (didOnEnd)
      return;
    didOnEnd = true;
    if (typeof dest.destroy === "function")
      dest.destroy();
  }
  function onerror(er) {
    cleanup();
    if (events_default.listenerCount(this, "error") === 0) {
      throw er;
    }
  }
  source.on("error", onerror);
  dest.on("error", onerror);
  function cleanup() {
    source.removeListener("data", ondata);
    dest.removeListener("drain", ondrain);
    source.removeListener("end", onend2);
    source.removeListener("close", onclose);
    source.removeListener("error", onerror);
    dest.removeListener("error", onerror);
    source.removeListener("end", cleanup);
    source.removeListener("close", cleanup);
    dest.removeListener("close", cleanup);
  }
  source.on("end", cleanup);
  source.on("close", cleanup);
  dest.on("close", cleanup);
  dest.emit("pipe", source);
  return dest;
};

// node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/binding.js
var binding_exports = {};
__export(binding_exports, {
  DEFLATE: () => DEFLATE,
  DEFLATERAW: () => DEFLATERAW,
  GUNZIP: () => GUNZIP,
  GZIP: () => GZIP,
  INFLATE: () => INFLATE,
  INFLATERAW: () => INFLATERAW,
  NONE: () => NONE,
  UNZIP: () => UNZIP,
  Z_BEST_COMPRESSION: () => Z_BEST_COMPRESSION,
  Z_BEST_SPEED: () => Z_BEST_SPEED,
  Z_BINARY: () => Z_BINARY2,
  Z_BLOCK: () => Z_BLOCK3,
  Z_BUF_ERROR: () => Z_BUF_ERROR3,
  Z_DATA_ERROR: () => Z_DATA_ERROR3,
  Z_DEFAULT_COMPRESSION: () => Z_DEFAULT_COMPRESSION2,
  Z_DEFAULT_STRATEGY: () => Z_DEFAULT_STRATEGY,
  Z_DEFLATED: () => Z_DEFLATED3,
  Z_ERRNO: () => Z_ERRNO,
  Z_FILTERED: () => Z_FILTERED2,
  Z_FINISH: () => Z_FINISH3,
  Z_FIXED: () => Z_FIXED3,
  Z_FULL_FLUSH: () => Z_FULL_FLUSH2,
  Z_HUFFMAN_ONLY: () => Z_HUFFMAN_ONLY2,
  Z_NEED_DICT: () => Z_NEED_DICT2,
  Z_NO_COMPRESSION: () => Z_NO_COMPRESSION,
  Z_NO_FLUSH: () => Z_NO_FLUSH2,
  Z_OK: () => Z_OK3,
  Z_PARTIAL_FLUSH: () => Z_PARTIAL_FLUSH2,
  Z_RLE: () => Z_RLE2,
  Z_STREAM_END: () => Z_STREAM_END3,
  Z_STREAM_ERROR: () => Z_STREAM_ERROR3,
  Z_SYNC_FLUSH: () => Z_SYNC_FLUSH,
  Z_TEXT: () => Z_TEXT2,
  Z_TREES: () => Z_TREES2,
  Z_UNKNOWN: () => Z_UNKNOWN3,
  Zlib: () => Zlib
});

// node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/messages.js
var messages_default = {
  2: "need dictionary",
  /* Z_NEED_DICT       2  */
  1: "stream end",
  /* Z_STREAM_END      1  */
  0: "",
  /* Z_OK              0  */
  "-1": "file error",
  /* Z_ERRNO         (-1) */
  "-2": "stream error",
  /* Z_STREAM_ERROR  (-2) */
  "-3": "data error",
  /* Z_DATA_ERROR    (-3) */
  "-4": "insufficient memory",
  /* Z_MEM_ERROR     (-4) */
  "-5": "buffer error",
  /* Z_BUF_ERROR     (-5) */
  "-6": "incompatible version"
  /* Z_VERSION_ERROR (-6) */
};

// node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/zstream.js
function ZStream() {
  this.input = null;
  this.next_in = 0;
  this.avail_in = 0;
  this.total_in = 0;
  this.output = null;
  this.next_out = 0;
  this.avail_out = 0;
  this.total_out = 0;
  this.msg = "";
  this.state = null;
  this.data_type = 2;
  this.adler = 0;
}
var zstream_default = ZStream;

// node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/utils.js
function arraySet(dest, src, src_offs, len, dest_offs) {
  if (src.subarray && dest.subarray) {
    dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
    return;
  }
  for (var i = 0; i < len; i++) {
    dest[dest_offs + i] = src[src_offs + i];
  }
}
var Buf8 = Uint8Array;
var Buf16 = Uint16Array;
var Buf32 = Int32Array;

// node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/trees.js
var Z_FIXED = 4;
var Z_BINARY = 0;
var Z_TEXT = 1;
var Z_UNKNOWN = 2;
function zero(buf) {
  var len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
}
var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES = 2;
var MIN_MATCH = 3;
var MAX_MATCH = 258;
var LENGTH_CODES = 29;
var LITERALS = 256;
var L_CODES = LITERALS + 1 + LENGTH_CODES;
var D_CODES = 30;
var BL_CODES = 19;
var HEAP_SIZE = 2 * L_CODES + 1;
var MAX_BITS = 15;
var Buf_size = 16;
var MAX_BL_BITS = 7;
var END_BLOCK = 256;
var REP_3_6 = 16;
var REPZ_3_10 = 17;
var REPZ_11_138 = 18;
var extra_lbits = (
  /* extra bits for each length code */
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]
);
var extra_dbits = (
  /* extra bits for each distance code */
  [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]
);
var extra_blbits = (
  /* extra bits for each bit length code */
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]
);
var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
var DIST_CODE_LEN = 512;
var static_ltree = new Array((L_CODES + 2) * 2);
zero(static_ltree);
var static_dtree = new Array(D_CODES * 2);
zero(static_dtree);
var _dist_code = new Array(DIST_CODE_LEN);
zero(_dist_code);
var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
var base_length = new Array(LENGTH_CODES);
zero(base_length);
var base_dist = new Array(D_CODES);
zero(base_dist);
function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
  this.static_tree = static_tree;
  this.extra_bits = extra_bits;
  this.extra_base = extra_base;
  this.elems = elems;
  this.max_length = max_length;
  this.has_stree = static_tree && static_tree.length;
}
var static_l_desc;
var static_d_desc;
var static_bl_desc;
function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;
  this.max_code = 0;
  this.stat_desc = stat_desc;
}
function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}
function put_short(s, w) {
  s.pending_buf[s.pending++] = w & 255;
  s.pending_buf[s.pending++] = w >>> 8 & 255;
}
function send_bits(s, value, length) {
  if (s.bi_valid > Buf_size - length) {
    s.bi_buf |= value << s.bi_valid & 65535;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> Buf_size - s.bi_valid;
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= value << s.bi_valid & 65535;
    s.bi_valid += length;
  }
}
function send_code(s, c, tree) {
  send_bits(
    s,
    tree[c * 2],
    tree[c * 2 + 1]
    /*.Len*/
  );
}
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;
  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 255;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}
function gen_bitlen(s, desc) {
  var tree = desc.dyn_tree;
  var max_code = desc.max_code;
  var stree = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var extra = desc.stat_desc.extra_bits;
  var base = desc.stat_desc.extra_base;
  var max_length = desc.stat_desc.max_length;
  var h;
  var n, m;
  var bits;
  var xbits;
  var f;
  var overflow = 0;
  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }
  tree[s.heap[s.heap_max] * 2 + 1] = 0;
  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1] = bits;
    if (n > max_code) {
      continue;
    }
    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2];
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1] + xbits);
    }
  }
  if (overflow === 0) {
    return;
  }
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) {
      bits--;
    }
    s.bl_count[bits]--;
    s.bl_count[bits + 1] += 2;
    s.bl_count[max_length]--;
    overflow -= 2;
  } while (overflow > 0);
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) {
        continue;
      }
      if (tree[m * 2 + 1] !== bits) {
        s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
        tree[m * 2 + 1] = bits;
      }
      n--;
    }
  }
}
function gen_codes(tree, max_code, bl_count) {
  var next_code = new Array(MAX_BITS + 1);
  var code = 0;
  var bits;
  var n;
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = code + bl_count[bits - 1] << 1;
  }
  for (n = 0; n <= max_code; n++) {
    var len = tree[n * 2 + 1];
    if (len === 0) {
      continue;
    }
    tree[n * 2] = bi_reverse(next_code[len]++, len);
  }
}
function tr_static_init() {
  var n;
  var bits;
  var length;
  var code;
  var dist;
  var bl_count = new Array(MAX_BITS + 1);
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < 1 << extra_lbits[code]; n++) {
      _length_code[length++] = code;
    }
  }
  _length_code[length - 1] = code;
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < 1 << extra_dbits[code]; n++) {
      _dist_code[dist++] = code;
    }
  }
  dist >>= 7;
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }
  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1] = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1] = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1] = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1] = 8;
    n++;
    bl_count[8]++;
  }
  gen_codes(static_ltree, L_CODES + 1, bl_count);
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1] = 5;
    static_dtree[n * 2] = bi_reverse(n, 5);
  }
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);
}
function init_block(s) {
  var n;
  for (n = 0; n < L_CODES; n++) {
    s.dyn_ltree[n * 2] = 0;
  }
  for (n = 0; n < D_CODES; n++) {
    s.dyn_dtree[n * 2] = 0;
  }
  for (n = 0; n < BL_CODES; n++) {
    s.bl_tree[n * 2] = 0;
  }
  s.dyn_ltree[END_BLOCK * 2] = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}
function bi_windup(s) {
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}
function copy_block(s, buf, len, header) {
  bi_windup(s);
  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
  arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
}
function pqdownheap(s, tree, k) {
  var v = s.heap[k];
  var j = k << 1;
  while (j <= s.heap_len) {
    if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    if (smaller(tree, v, s.heap[j], s.depth)) {
      break;
    }
    s.heap[k] = s.heap[j];
    k = j;
    j <<= 1;
  }
  s.heap[k] = v;
}
function compress_block(s, ltree, dtree) {
  var dist;
  var lc;
  var lx = 0;
  var code;
  var extra;
  if (s.last_lit !== 0) {
    do {
      dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
      lc = s.pending_buf[s.l_buf + lx];
      lx++;
      if (dist === 0) {
        send_code(s, lc, ltree);
      } else {
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree);
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);
        }
        dist--;
        code = d_code(dist);
        send_code(s, code, dtree);
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);
        }
      }
    } while (lx < s.last_lit);
  }
  send_code(s, END_BLOCK, ltree);
}
function build_tree(s, desc) {
  var tree = desc.dyn_tree;
  var stree = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems = desc.stat_desc.elems;
  var n, m;
  var max_code = -1;
  var node;
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;
  for (n = 0; n < elems; n++) {
    if (tree[n * 2] !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;
    } else {
      tree[n * 2 + 1] = 0;
    }
  }
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
    tree[node * 2] = 1;
    s.depth[node] = 0;
    s.opt_len--;
    if (has_stree) {
      s.static_len -= stree[node * 2 + 1];
    }
  }
  desc.max_code = max_code;
  for (n = s.heap_len >> 1; n >= 1; n--) {
    pqdownheap(s, tree, n);
  }
  node = elems;
  do {
    n = s.heap[
      1
      /*SMALLEST*/
    ];
    s.heap[
      1
      /*SMALLEST*/
    ] = s.heap[s.heap_len--];
    pqdownheap(
      s,
      tree,
      1
      /*SMALLEST*/
    );
    m = s.heap[
      1
      /*SMALLEST*/
    ];
    s.heap[--s.heap_max] = n;
    s.heap[--s.heap_max] = m;
    tree[node * 2] = tree[n * 2] + tree[m * 2];
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1] = tree[m * 2 + 1] = node;
    s.heap[
      1
      /*SMALLEST*/
    ] = node++;
    pqdownheap(
      s,
      tree,
      1
      /*SMALLEST*/
    );
  } while (s.heap_len >= 2);
  s.heap[--s.heap_max] = s.heap[
    1
    /*SMALLEST*/
  ];
  gen_bitlen(s, desc);
  gen_codes(tree, max_code, s.bl_count);
}
function scan_tree(s, tree, max_code) {
  var n;
  var prevlen = -1;
  var curlen;
  var nextlen = tree[0 * 2 + 1];
  var count = 0;
  var max_count = 7;
  var min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1] = 65535;
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      s.bl_tree[curlen * 2] += count;
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        s.bl_tree[curlen * 2]++;
      }
      s.bl_tree[REP_3_6 * 2]++;
    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]++;
    } else {
      s.bl_tree[REPZ_11_138 * 2]++;
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}
function send_tree(s, tree, max_code) {
  var n;
  var prevlen = -1;
  var curlen;
  var nextlen = tree[0 * 2 + 1];
  var count = 0;
  var max_count = 7;
  var min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      do {
        send_code(s, curlen, s.bl_tree);
      } while (--count !== 0);
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);
    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);
    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}
function build_bl_tree(s) {
  var max_blindex;
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
  build_tree(s, s.bl_desc);
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
      break;
    }
  }
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  return max_blindex;
}
function send_all_trees(s, lcodes, dcodes, blcodes) {
  var rank2;
  send_bits(s, lcodes - 257, 5);
  send_bits(s, dcodes - 1, 5);
  send_bits(s, blcodes - 4, 4);
  for (rank2 = 0; rank2 < blcodes; rank2++) {
    send_bits(s, s.bl_tree[bl_order[rank2] * 2 + 1], 3);
  }
  send_tree(s, s.dyn_ltree, lcodes - 1);
  send_tree(s, s.dyn_dtree, dcodes - 1);
}
function detect_data_type(s) {
  var black_mask = 4093624447;
  var n;
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if (black_mask & 1 && s.dyn_ltree[n * 2] !== 0) {
      return Z_BINARY;
    }
  }
  if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2] !== 0) {
      return Z_TEXT;
    }
  }
  return Z_BINARY;
}
var static_init_done = false;
function _tr_init(s) {
  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }
  s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
  s.bi_buf = 0;
  s.bi_valid = 0;
  init_block(s);
}
function _tr_stored_block(s, buf, stored_len, last) {
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
  copy_block(s, buf, stored_len, true);
}
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}
function _tr_flush_block(s, buf, stored_len, last) {
  var opt_lenb, static_lenb;
  var max_blindex = 0;
  if (s.level > 0) {
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }
    build_tree(s, s.l_desc);
    build_tree(s, s.d_desc);
    max_blindex = build_bl_tree(s);
    opt_lenb = s.opt_len + 3 + 7 >>> 3;
    static_lenb = s.static_len + 3 + 7 >>> 3;
    if (static_lenb <= opt_lenb) {
      opt_lenb = static_lenb;
    }
  } else {
    opt_lenb = static_lenb = stored_len + 5;
  }
  if (stored_len + 4 <= opt_lenb && buf !== -1) {
    _tr_stored_block(s, buf, stored_len, last);
  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);
  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  init_block(s);
  if (last) {
    bi_windup(s);
  }
}
function _tr_tally(s, dist, lc) {
  s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;
  s.pending_buf[s.l_buf + s.last_lit] = lc & 255;
  s.last_lit++;
  if (dist === 0) {
    s.dyn_ltree[lc * 2]++;
  } else {
    s.matches++;
    dist--;
    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;
    s.dyn_dtree[d_code(dist) * 2]++;
  }
  return s.last_lit === s.lit_bufsize - 1;
}

// node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/adler32.js
function adler32(adler, buf, len, pos) {
  var s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
  while (len !== 0) {
    n = len > 2e3 ? 2e3 : len;
    len -= n;
    do {
      s1 = s1 + buf[pos++] | 0;
      s2 = s2 + s1 | 0;
    } while (--n);
    s1 %= 65521;
    s2 %= 65521;
  }
  return s1 | s2 << 16 | 0;
}
var adler32_default = adler32;

// node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/crc32.js
function makeTable() {
  var c, table = [];
  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
    }
    table[n] = c;
  }
  return table;
}
var crcTable = makeTable();
function crc32(crc, buf, len, pos) {
  var t = crcTable, end = pos + len;
  crc ^= -1;
  for (var i = pos; i < end; i++) {
    crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
  }
  return crc ^ -1;
}
var crc32_default = crc32;

// node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/deflate.js
var Z_NO_FLUSH = 0;
var Z_PARTIAL_FLUSH = 1;
var Z_FULL_FLUSH = 3;
var Z_FINISH = 4;
var Z_BLOCK = 5;
var Z_OK = 0;
var Z_STREAM_END = 1;
var Z_STREAM_ERROR = -2;
var Z_DATA_ERROR = -3;
var Z_BUF_ERROR = -5;
var Z_DEFAULT_COMPRESSION = -1;
var Z_FILTERED = 1;
var Z_HUFFMAN_ONLY = 2;
var Z_RLE = 3;
var Z_FIXED2 = 4;
var Z_UNKNOWN2 = 2;
var Z_DEFLATED = 8;
var MAX_MEM_LEVEL = 9;
var LENGTH_CODES2 = 29;
var LITERALS2 = 256;
var L_CODES2 = LITERALS2 + 1 + LENGTH_CODES2;
var D_CODES2 = 30;
var BL_CODES2 = 19;
var HEAP_SIZE2 = 2 * L_CODES2 + 1;
var MAX_BITS2 = 15;
var MIN_MATCH2 = 3;
var MAX_MATCH2 = 258;
var MIN_LOOKAHEAD = MAX_MATCH2 + MIN_MATCH2 + 1;
var PRESET_DICT = 32;
var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;
var BS_NEED_MORE = 1;
var BS_BLOCK_DONE = 2;
var BS_FINISH_STARTED = 3;
var BS_FINISH_DONE = 4;
var OS_CODE = 3;
function err(strm, errorCode) {
  strm.msg = messages_default[errorCode];
  return errorCode;
}
function rank(f) {
  return (f << 1) - (f > 4 ? 9 : 0);
}
function zero2(buf) {
  var len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
}
function flush_pending(strm) {
  var s = strm.state;
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) {
    return;
  }
  arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}
function flush_block_only(s, last) {
  _tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}
function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}
function putShortMSB(s, b) {
  s.pending_buf[s.pending++] = b >>> 8 & 255;
  s.pending_buf[s.pending++] = b & 255;
}
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;
  if (len > size) {
    len = size;
  }
  if (len === 0) {
    return 0;
  }
  strm.avail_in -= len;
  arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32_default(strm.adler, buf, len, start);
  } else if (strm.state.wrap === 2) {
    strm.adler = crc32_default(strm.adler, buf, len, start);
  }
  strm.next_in += len;
  strm.total_in += len;
  return len;
}
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;
  var scan = s.strstart;
  var match;
  var len;
  var best_len = s.prev_length;
  var nice_match = s.nice_match;
  var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
  var _win = s.window;
  var wmask = s.w_mask;
  var prev = s.prev;
  var strend = s.strstart + MAX_MATCH2;
  var scan_end1 = _win[scan + best_len - 1];
  var scan_end = _win[scan + best_len];
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  if (nice_match > s.lookahead) {
    nice_match = s.lookahead;
  }
  do {
    match = cur_match;
    if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
      continue;
    }
    scan += 2;
    match++;
    do {
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
    len = MAX_MATCH2 - (strend - scan);
    scan = strend - MAX_MATCH2;
    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1 = _win[scan + best_len - 1];
      scan_end = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;
  do {
    more = s.window_size - s.lookahead - s.strstart;
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
      arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      s.block_start -= _w_size;
      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = m >= _w_size ? m - _w_size : 0;
      } while (--n);
      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = m >= _w_size ? m - _w_size : 0;
      } while (--n);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;
    if (s.lookahead + s.insert >= MIN_MATCH2) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
      while (s.insert) {
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH2 - 1]) & s.hash_mask;
        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH2) {
          break;
        }
      }
    }
  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
}
function deflate_stored(s, flush) {
  var max_block_size = 65535;
  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }
  for (; ; ) {
    if (s.lookahead <= 1) {
      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    s.strstart += s.lookahead;
    s.lookahead = 0;
    var max_start = s.block_start + max_block_size;
    if (s.strstart === 0 || s.strstart >= max_start) {
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.strstart > s.block_start) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_NEED_MORE;
}
function deflate_fast(s, flush) {
  var hash_head;
  var bflush;
  for (; ; ) {
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    hash_head = 0;
    if (s.lookahead >= MIN_MATCH2) {
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH2 - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
    }
    if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
      s.match_length = longest_match(s, hash_head);
    }
    if (s.match_length >= MIN_MATCH2) {
      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH2);
      s.lookahead -= s.match_length;
      if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH2) {
        s.match_length--;
        do {
          s.strstart++;
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH2 - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        } while (--s.match_length !== 0);
        s.strstart++;
      } else {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;
      }
    } else {
      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = s.strstart < MIN_MATCH2 - 1 ? s.strstart : MIN_MATCH2 - 1;
  if (flush === Z_FINISH) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
}
function deflate_slow(s, flush) {
  var hash_head;
  var bflush;
  var max_insert;
  for (; ; ) {
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    hash_head = 0;
    if (s.lookahead >= MIN_MATCH2) {
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH2 - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
    }
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH2 - 1;
    if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
      s.match_length = longest_match(s, hash_head);
      if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH2 && s.strstart - s.match_start > 4096)) {
        s.match_length = MIN_MATCH2 - 1;
      }
    }
    if (s.prev_length >= MIN_MATCH2 && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH2;
      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH2);
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH2 - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH2 - 1;
      s.strstart++;
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    } else if (s.match_available) {
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
      if (bflush) {
        flush_block_only(s, false);
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  if (s.match_available) {
    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH2 - 1 ? s.strstart : MIN_MATCH2 - 1;
  if (flush === Z_FINISH) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
}
function deflate_rle(s, flush) {
  var bflush;
  var prev;
  var scan, strend;
  var _win = s.window;
  for (; ; ) {
    if (s.lookahead <= MAX_MATCH2) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH2 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH2 && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH2;
        do {
        } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
        s.match_length = MAX_MATCH2 - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
    }
    if (s.match_length >= MIN_MATCH2) {
      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH2);
      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
}
function deflate_huff(s, flush) {
  var bflush;
  for (; ; ) {
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;
      }
    }
    s.match_length = 0;
    bflush = _tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
}
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}
var configuration_table;
configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),
  /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),
  /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),
  /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),
  /* 3 */
  new Config(4, 4, 16, 16, deflate_slow),
  /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),
  /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),
  /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),
  /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),
  /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)
  /* 9 max compression */
];
function lm_init(s) {
  s.window_size = 2 * s.w_size;
  zero2(s.head);
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;
  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH2 - 1;
  s.match_available = 0;
  s.ins_h = 0;
}
function DeflateState() {
  this.strm = null;
  this.status = 0;
  this.pending_buf = null;
  this.pending_buf_size = 0;
  this.pending_out = 0;
  this.pending = 0;
  this.wrap = 0;
  this.gzhead = null;
  this.gzindex = 0;
  this.method = Z_DEFLATED;
  this.last_flush = -1;
  this.w_size = 0;
  this.w_bits = 0;
  this.w_mask = 0;
  this.window = null;
  this.window_size = 0;
  this.prev = null;
  this.head = null;
  this.ins_h = 0;
  this.hash_size = 0;
  this.hash_bits = 0;
  this.hash_mask = 0;
  this.hash_shift = 0;
  this.block_start = 0;
  this.match_length = 0;
  this.prev_match = 0;
  this.match_available = 0;
  this.strstart = 0;
  this.match_start = 0;
  this.lookahead = 0;
  this.prev_length = 0;
  this.max_chain_length = 0;
  this.max_lazy_match = 0;
  this.level = 0;
  this.strategy = 0;
  this.good_match = 0;
  this.nice_match = 0;
  this.dyn_ltree = new Buf16(HEAP_SIZE2 * 2);
  this.dyn_dtree = new Buf16((2 * D_CODES2 + 1) * 2);
  this.bl_tree = new Buf16((2 * BL_CODES2 + 1) * 2);
  zero2(this.dyn_ltree);
  zero2(this.dyn_dtree);
  zero2(this.bl_tree);
  this.l_desc = null;
  this.d_desc = null;
  this.bl_desc = null;
  this.bl_count = new Buf16(MAX_BITS2 + 1);
  this.heap = new Buf16(2 * L_CODES2 + 1);
  zero2(this.heap);
  this.heap_len = 0;
  this.heap_max = 0;
  this.depth = new Buf16(2 * L_CODES2 + 1);
  zero2(this.depth);
  this.l_buf = 0;
  this.lit_bufsize = 0;
  this.last_lit = 0;
  this.d_buf = 0;
  this.opt_len = 0;
  this.static_len = 0;
  this.matches = 0;
  this.insert = 0;
  this.bi_buf = 0;
  this.bi_valid = 0;
}
function deflateResetKeep(strm) {
  var s;
  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }
  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN2;
  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;
  if (s.wrap < 0) {
    s.wrap = -s.wrap;
  }
  s.status = s.wrap ? INIT_STATE : BUSY_STATE;
  strm.adler = s.wrap === 2 ? 0 : 1;
  s.last_flush = Z_NO_FLUSH;
  _tr_init(s);
  return Z_OK;
}
function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}
function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) {
    return Z_STREAM_ERROR;
  }
  var wrap = 1;
  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else if (windowBits > 15) {
    wrap = 2;
    windowBits -= 16;
  }
  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED2) {
    return err(strm, Z_STREAM_ERROR);
  }
  if (windowBits === 8) {
    windowBits = 9;
  }
  var s = new DeflateState();
  strm.state = s;
  s.strm = strm;
  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;
  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH2 - 1) / MIN_MATCH2);
  s.window = new Buf8(s.w_size * 2);
  s.head = new Buf16(s.hash_size);
  s.prev = new Buf16(s.w_size);
  s.lit_bufsize = 1 << memLevel + 6;
  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new Buf8(s.pending_buf_size);
  s.d_buf = 1 * s.lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;
  s.level = level;
  s.strategy = strategy;
  s.method = method;
  return deflateReset(strm);
}
function deflate(strm, flush) {
  var old_flush, s;
  var beg, val;
  if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }
  s = strm.state;
  if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
    return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }
  s.strm = strm;
  old_flush = s.last_flush;
  s.last_flush = flush;
  if (s.status === INIT_STATE) {
    if (s.wrap === 2) {
      strm.adler = 0;
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) {
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      } else {
        put_byte(
          s,
          (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 255);
        put_byte(s, s.gzhead.time >> 8 & 255);
        put_byte(s, s.gzhead.time >> 16 & 255);
        put_byte(s, s.gzhead.time >> 24 & 255);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, s.gzhead.os & 255);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 255);
          put_byte(s, s.gzhead.extra.length >> 8 & 255);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    } else {
      var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
      var level_flags = -1;
      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= level_flags << 6;
      if (s.strstart !== 0) {
        header |= PRESET_DICT;
      }
      header += 31 - header % 31;
      s.status = BUSY_STATE;
      putShortMSB(s, header);
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 65535);
      }
      strm.adler = 1;
    }
  }
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra) {
      beg = s.pending;
      while (s.gzindex < (s.gzhead.extra.length & 65535)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 255);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    } else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name) {
      beg = s.pending;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    } else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment) {
      beg = s.pending;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    } else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 255);
        put_byte(s, strm.adler >> 8 & 255);
        strm.adler = 0;
        s.status = BUSY_STATE;
      }
    } else {
      s.status = BUSY_STATE;
    }
  }
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      s.last_flush = -1;
      return Z_OK;
    }
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }
  if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
    var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
      }
      return Z_OK;
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        _tr_align(s);
      } else if (flush !== Z_BLOCK) {
        _tr_stored_block(s, 0, 0, false);
        if (flush === Z_FULL_FLUSH) {
          zero2(s.head);
          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        return Z_OK;
      }
    }
  }
  if (flush !== Z_FINISH) {
    return Z_OK;
  }
  if (s.wrap <= 0) {
    return Z_STREAM_END;
  }
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 255);
    put_byte(s, strm.adler >> 8 & 255);
    put_byte(s, strm.adler >> 16 & 255);
    put_byte(s, strm.adler >> 24 & 255);
    put_byte(s, strm.total_in & 255);
    put_byte(s, strm.total_in >> 8 & 255);
    put_byte(s, strm.total_in >> 16 & 255);
    put_byte(s, strm.total_in >> 24 & 255);
  } else {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 65535);
  }
  flush_pending(strm);
  if (s.wrap > 0) {
    s.wrap = -s.wrap;
  }
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}
function deflateEnd(strm) {
  var status2;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  status2 = strm.state.status;
  if (status2 !== INIT_STATE && status2 !== EXTRA_STATE && status2 !== NAME_STATE && status2 !== COMMENT_STATE && status2 !== HCRC_STATE && status2 !== BUSY_STATE && status2 !== FINISH_STATE) {
    return err(strm, Z_STREAM_ERROR);
  }
  strm.state = null;
  return status2 === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}

// node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/inffast.js
var BAD = 30;
var TYPE = 12;
function inflate_fast(strm, start) {
  var state;
  var _in;
  var last;
  var _out;
  var beg;
  var end;
  var dmax;
  var wsize;
  var whave;
  var wnext;
  var s_window;
  var hold;
  var bits;
  var lcode;
  var dcode;
  var lmask;
  var dmask;
  var here;
  var op;
  var len;
  var dist;
  var from2;
  var from_source;
  var input, output;
  state = strm.state;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
  dmax = state.dmax;
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;
  top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }
      here = lcode[hold & lmask];
      dolen:
        for (; ; ) {
          op = here >>> 24;
          hold >>>= op;
          bits -= op;
          op = here >>> 16 & 255;
          if (op === 0) {
            output[_out++] = here & 65535;
          } else if (op & 16) {
            len = here & 65535;
            op &= 15;
            if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
              len += hold & (1 << op) - 1;
              hold >>>= op;
              bits -= op;
            }
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = dcode[hold & dmask];
            dodist:
              for (; ; ) {
                op = here >>> 24;
                hold >>>= op;
                bits -= op;
                op = here >>> 16 & 255;
                if (op & 16) {
                  dist = here & 65535;
                  op &= 15;
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                    if (bits < op) {
                      hold += input[_in++] << bits;
                      bits += 8;
                    }
                  }
                  dist += hold & (1 << op) - 1;
                  if (dist > dmax) {
                    strm.msg = "invalid distance too far back";
                    state.mode = BAD;
                    break top;
                  }
                  hold >>>= op;
                  bits -= op;
                  op = _out - beg;
                  if (dist > op) {
                    op = dist - op;
                    if (op > whave) {
                      if (state.sane) {
                        strm.msg = "invalid distance too far back";
                        state.mode = BAD;
                        break top;
                      }
                    }
                    from2 = 0;
                    from_source = s_window;
                    if (wnext === 0) {
                      from2 += wsize - op;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from2++];
                        } while (--op);
                        from2 = _out - dist;
                        from_source = output;
                      }
                    } else if (wnext < op) {
                      from2 += wsize + wnext - op;
                      op -= wnext;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from2++];
                        } while (--op);
                        from2 = 0;
                        if (wnext < len) {
                          op = wnext;
                          len -= op;
                          do {
                            output[_out++] = s_window[from2++];
                          } while (--op);
                          from2 = _out - dist;
                          from_source = output;
                        }
                      }
                    } else {
                      from2 += wnext - op;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from2++];
                        } while (--op);
                        from2 = _out - dist;
                        from_source = output;
                      }
                    }
                    while (len > 2) {
                      output[_out++] = from_source[from2++];
                      output[_out++] = from_source[from2++];
                      output[_out++] = from_source[from2++];
                      len -= 3;
                    }
                    if (len) {
                      output[_out++] = from_source[from2++];
                      if (len > 1) {
                        output[_out++] = from_source[from2++];
                      }
                    }
                  } else {
                    from2 = _out - dist;
                    do {
                      output[_out++] = output[from2++];
                      output[_out++] = output[from2++];
                      output[_out++] = output[from2++];
                      len -= 3;
                    } while (len > 2);
                    if (len) {
                      output[_out++] = output[from2++];
                      if (len > 1) {
                        output[_out++] = output[from2++];
                      }
                    }
                  }
                } else if ((op & 64) === 0) {
                  here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                  continue dodist;
                } else {
                  strm.msg = "invalid distance code";
                  state.mode = BAD;
                  break top;
                }
                break;
              }
          } else if ((op & 64) === 0) {
            here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
            continue dolen;
          } else if (op & 32) {
            state.mode = TYPE;
            break top;
          } else {
            strm.msg = "invalid literal/length code";
            state.mode = BAD;
            break top;
          }
          break;
        }
    } while (_in < last && _out < end);
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
  strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
  state.hold = hold;
  state.bits = bits;
  return;
}

// node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/inftrees.js
var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
var CODES = 0;
var LENS = 1;
var DISTS = 2;
var lbase = [
  /* Length codes 257..285 base */
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  15,
  17,
  19,
  23,
  27,
  31,
  35,
  43,
  51,
  59,
  67,
  83,
  99,
  115,
  131,
  163,
  195,
  227,
  258,
  0,
  0
];
var lext = [
  /* Length codes 257..285 extra */
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  17,
  17,
  17,
  17,
  18,
  18,
  18,
  18,
  19,
  19,
  19,
  19,
  20,
  20,
  20,
  20,
  21,
  21,
  21,
  21,
  16,
  72,
  78
];
var dbase = [
  /* Distance codes 0..29 base */
  1,
  2,
  3,
  4,
  5,
  7,
  9,
  13,
  17,
  25,
  33,
  49,
  65,
  97,
  129,
  193,
  257,
  385,
  513,
  769,
  1025,
  1537,
  2049,
  3073,
  4097,
  6145,
  8193,
  12289,
  16385,
  24577,
  0,
  0
];
var dext = [
  /* Distance codes 0..29 extra */
  16,
  16,
  16,
  16,
  17,
  17,
  18,
  18,
  19,
  19,
  20,
  20,
  21,
  21,
  22,
  22,
  23,
  23,
  24,
  24,
  25,
  25,
  26,
  26,
  27,
  27,
  28,
  28,
  29,
  29,
  64,
  64
];
function inflate_table(type, lens, lens_index, codes2, table, table_index, work, opts) {
  var bits = opts.bits;
  var len = 0;
  var sym = 0;
  var min = 0, max = 0;
  var root = 0;
  var curr = 0;
  var drop = 0;
  var left = 0;
  var used = 0;
  var huff = 0;
  var incr;
  var fill2;
  var low;
  var mask;
  var next;
  var base = null;
  var base_index = 0;
  var end;
  var count = new Buf16(MAXBITS + 1);
  var offs = new Buf16(MAXBITS + 1);
  var extra = null;
  var extra_index = 0;
  var here_bits, here_op, here_val;
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes2; sym++) {
    count[lens[lens_index + sym]]++;
  }
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) {
      break;
    }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {
    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    opts.bits = 1;
    return 0;
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) {
      break;
    }
  }
  if (root < min) {
    root = min;
  }
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;
  }
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }
  for (sym = 0; sym < codes2; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }
  if (type === CODES) {
    base = extra = work;
    end = 19;
  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;
  } else {
    base = dbase;
    extra = dext;
    end = -1;
  }
  huff = 0;
  sym = 0;
  len = min;
  next = table_index;
  curr = root;
  drop = 0;
  low = -1;
  used = 1 << root;
  mask = used - 1;
  if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
    return 1;
  }
  var i = 0;
  for (; ; ) {
    i++;
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    } else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    } else {
      here_op = 32 + 64;
      here_val = 0;
    }
    incr = 1 << len - drop;
    fill2 = 1 << curr;
    min = fill2;
    do {
      fill2 -= incr;
      table[next + (huff >> drop) + fill2] = here_bits << 24 | here_op << 16 | here_val | 0;
    } while (fill2 !== 0);
    incr = 1 << len - 1;
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }
    sym++;
    if (--count[len] === 0) {
      if (len === max) {
        break;
      }
      len = lens[lens_index + work[sym]];
    }
    if (len > root && (huff & mask) !== low) {
      if (drop === 0) {
        drop = root;
      }
      next += min;
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) {
          break;
        }
        curr++;
        left <<= 1;
      }
      used += 1 << curr;
      if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
        return 1;
      }
      low = huff & mask;
      table[low] = root << 24 | curr << 16 | next - table_index | 0;
    }
  }
  if (huff !== 0) {
    table[next + huff] = len - drop << 24 | 64 << 16 | 0;
  }
  opts.bits = root;
  return 0;
}

// node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/inflate.js
var CODES2 = 0;
var LENS2 = 1;
var DISTS2 = 2;
var Z_FINISH2 = 4;
var Z_BLOCK2 = 5;
var Z_TREES = 6;
var Z_OK2 = 0;
var Z_STREAM_END2 = 1;
var Z_NEED_DICT = 2;
var Z_STREAM_ERROR2 = -2;
var Z_DATA_ERROR2 = -3;
var Z_MEM_ERROR = -4;
var Z_BUF_ERROR2 = -5;
var Z_DEFLATED2 = 8;
var HEAD = 1;
var FLAGS = 2;
var TIME = 3;
var OS = 4;
var EXLEN = 5;
var EXTRA = 6;
var NAME = 7;
var COMMENT = 8;
var HCRC = 9;
var DICTID = 10;
var DICT = 11;
var TYPE2 = 12;
var TYPEDO = 13;
var STORED = 14;
var COPY_ = 15;
var COPY = 16;
var TABLE = 17;
var LENLENS = 18;
var CODELENS = 19;
var LEN_ = 20;
var LEN = 21;
var LENEXT = 22;
var DIST = 23;
var DISTEXT = 24;
var MATCH = 25;
var LIT = 26;
var CHECK = 27;
var LENGTH = 28;
var DONE = 29;
var BAD2 = 30;
var MEM = 31;
var SYNC = 32;
var ENOUGH_LENS2 = 852;
var ENOUGH_DISTS2 = 592;
function zswap32(q) {
  return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
}
function InflateState() {
  this.mode = 0;
  this.last = false;
  this.wrap = 0;
  this.havedict = false;
  this.flags = 0;
  this.dmax = 0;
  this.check = 0;
  this.total = 0;
  this.head = null;
  this.wbits = 0;
  this.wsize = 0;
  this.whave = 0;
  this.wnext = 0;
  this.window = null;
  this.hold = 0;
  this.bits = 0;
  this.length = 0;
  this.offset = 0;
  this.extra = 0;
  this.lencode = null;
  this.distcode = null;
  this.lenbits = 0;
  this.distbits = 0;
  this.ncode = 0;
  this.nlen = 0;
  this.ndist = 0;
  this.have = 0;
  this.next = null;
  this.lens = new Buf16(320);
  this.work = new Buf16(288);
  this.lendyn = null;
  this.distdyn = null;
  this.sane = 0;
  this.back = 0;
  this.was = 0;
}
function inflateResetKeep(strm) {
  var state;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR2;
  }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = "";
  if (state.wrap) {
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null;
  state.hold = 0;
  state.bits = 0;
  state.lencode = state.lendyn = new Buf32(ENOUGH_LENS2);
  state.distcode = state.distdyn = new Buf32(ENOUGH_DISTS2);
  state.sane = 1;
  state.back = -1;
  return Z_OK2;
}
function inflateReset(strm) {
  var state;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR2;
  }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);
}
function inflateReset2(strm, windowBits) {
  var wrap;
  var state;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR2;
  }
  state = strm.state;
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR2;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}
function inflateInit2(strm, windowBits) {
  var ret;
  var state;
  if (!strm) {
    return Z_STREAM_ERROR2;
  }
  state = new InflateState();
  strm.state = state;
  state.window = null;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK2) {
    strm.state = null;
  }
  return ret;
}
var virgin = true;
var lenfix;
var distfix;
function fixedtables(state) {
  if (virgin) {
    var sym;
    lenfix = new Buf32(512);
    distfix = new Buf32(32);
    sym = 0;
    while (sym < 144) {
      state.lens[sym++] = 8;
    }
    while (sym < 256) {
      state.lens[sym++] = 9;
    }
    while (sym < 280) {
      state.lens[sym++] = 7;
    }
    while (sym < 288) {
      state.lens[sym++] = 8;
    }
    inflate_table(LENS2, state.lens, 0, 288, lenfix, 0, state.work, {
      bits: 9
    });
    sym = 0;
    while (sym < 32) {
      state.lens[sym++] = 5;
    }
    inflate_table(DISTS2, state.lens, 0, 32, distfix, 0, state.work, {
      bits: 5
    });
    virgin = false;
  }
  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}
function updatewindow(strm, src, end, copy2) {
  var dist;
  var state = strm.state;
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;
    state.window = new Buf8(state.wsize);
  }
  if (copy2 >= state.wsize) {
    arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  } else {
    dist = state.wsize - state.wnext;
    if (dist > copy2) {
      dist = copy2;
    }
    arraySet(state.window, src, end - copy2, dist, state.wnext);
    copy2 -= dist;
    if (copy2) {
      arraySet(state.window, src, end - copy2, copy2, 0);
      state.wnext = copy2;
      state.whave = state.wsize;
    } else {
      state.wnext += dist;
      if (state.wnext === state.wsize) {
        state.wnext = 0;
      }
      if (state.whave < state.wsize) {
        state.whave += dist;
      }
    }
  }
  return 0;
}
function inflate(strm, flush) {
  var state;
  var input, output;
  var next;
  var put;
  var have, left;
  var hold;
  var bits;
  var _in, _out;
  var copy2;
  var from2;
  var from_source;
  var here = 0;
  var here_bits, here_op, here_val;
  var last_bits, last_op, last_val;
  var len;
  var ret;
  var hbuf = new Buf8(4);
  var opts;
  var n;
  var order = (
    /* permutation of code lengths */
    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]
  );
  if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
    return Z_STREAM_ERROR2;
  }
  state = strm.state;
  if (state.mode === TYPE2) {
    state.mode = TYPEDO;
  }
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  _in = have;
  _out = left;
  ret = Z_OK2;
  inf_leave:
    for (; ; ) {
      switch (state.mode) {
        case HEAD:
          if (state.wrap === 0) {
            state.mode = TYPEDO;
            break;
          }
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.wrap & 2 && hold === 35615) {
            state.check = 0;
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_default(state.check, hbuf, 2, 0);
            hold = 0;
            bits = 0;
            state.mode = FLAGS;
            break;
          }
          state.flags = 0;
          if (state.head) {
            state.head.done = false;
          }
          if (!(state.wrap & 1) || /* check if zlib header allowed */
          (((hold & 255) << 8) + (hold >> 8)) % 31) {
            strm.msg = "incorrect header check";
            state.mode = BAD2;
            break;
          }
          if ((hold & 15) !== Z_DEFLATED2) {
            strm.msg = "unknown compression method";
            state.mode = BAD2;
            break;
          }
          hold >>>= 4;
          bits -= 4;
          len = (hold & 15) + 8;
          if (state.wbits === 0) {
            state.wbits = len;
          } else if (len > state.wbits) {
            strm.msg = "invalid window size";
            state.mode = BAD2;
            break;
          }
          state.dmax = 1 << len;
          strm.adler = state.check = 1;
          state.mode = hold & 512 ? DICTID : TYPE2;
          hold = 0;
          bits = 0;
          break;
        case FLAGS:
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.flags = hold;
          if ((state.flags & 255) !== Z_DEFLATED2) {
            strm.msg = "unknown compression method";
            state.mode = BAD2;
            break;
          }
          if (state.flags & 57344) {
            strm.msg = "unknown header flags set";
            state.mode = BAD2;
            break;
          }
          if (state.head) {
            state.head.text = hold >> 8 & 1;
          }
          if (state.flags & 512) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_default(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = TIME;
        case TIME:
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.head) {
            state.head.time = hold;
          }
          if (state.flags & 512) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            hbuf[2] = hold >>> 16 & 255;
            hbuf[3] = hold >>> 24 & 255;
            state.check = crc32_default(state.check, hbuf, 4, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = OS;
        case OS:
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.head) {
            state.head.xflags = hold & 255;
            state.head.os = hold >> 8;
          }
          if (state.flags & 512) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_default(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = EXLEN;
        case EXLEN:
          if (state.flags & 1024) {
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.length = hold;
            if (state.head) {
              state.head.extra_len = hold;
            }
            if (state.flags & 512) {
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              state.check = crc32_default(state.check, hbuf, 2, 0);
            }
            hold = 0;
            bits = 0;
          } else if (state.head) {
            state.head.extra = null;
          }
          state.mode = EXTRA;
        case EXTRA:
          if (state.flags & 1024) {
            copy2 = state.length;
            if (copy2 > have) {
              copy2 = have;
            }
            if (copy2) {
              if (state.head) {
                len = state.head.extra_len - state.length;
                if (!state.head.extra) {
                  state.head.extra = new Array(state.head.extra_len);
                }
                arraySet(
                  state.head.extra,
                  input,
                  next,
                  // extra field is limited to 65536 bytes
                  // - no need for additional size check
                  copy2,
                  /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                  len
                );
              }
              if (state.flags & 512) {
                state.check = crc32_default(state.check, input, copy2, next);
              }
              have -= copy2;
              next += copy2;
              state.length -= copy2;
            }
            if (state.length) {
              break inf_leave;
            }
          }
          state.length = 0;
          state.mode = NAME;
        case NAME:
          if (state.flags & 2048) {
            if (have === 0) {
              break inf_leave;
            }
            copy2 = 0;
            do {
              len = input[next + copy2++];
              if (state.head && len && state.length < 65536) {
                state.head.name += String.fromCharCode(len);
              }
            } while (len && copy2 < have);
            if (state.flags & 512) {
              state.check = crc32_default(state.check, input, copy2, next);
            }
            have -= copy2;
            next += copy2;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.name = null;
          }
          state.length = 0;
          state.mode = COMMENT;
        case COMMENT:
          if (state.flags & 4096) {
            if (have === 0) {
              break inf_leave;
            }
            copy2 = 0;
            do {
              len = input[next + copy2++];
              if (state.head && len && state.length < 65536) {
                state.head.comment += String.fromCharCode(len);
              }
            } while (len && copy2 < have);
            if (state.flags & 512) {
              state.check = crc32_default(state.check, input, copy2, next);
            }
            have -= copy2;
            next += copy2;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.comment = null;
          }
          state.mode = HCRC;
        case HCRC:
          if (state.flags & 512) {
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (hold !== (state.check & 65535)) {
              strm.msg = "header crc mismatch";
              state.mode = BAD2;
              break;
            }
            hold = 0;
            bits = 0;
          }
          if (state.head) {
            state.head.hcrc = state.flags >> 9 & 1;
            state.head.done = true;
          }
          strm.adler = state.check = 0;
          state.mode = TYPE2;
          break;
        case DICTID:
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          strm.adler = state.check = zswap32(hold);
          hold = 0;
          bits = 0;
          state.mode = DICT;
        case DICT:
          if (state.havedict === 0) {
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            return Z_NEED_DICT;
          }
          strm.adler = state.check = 1;
          state.mode = TYPE2;
        case TYPE2:
          if (flush === Z_BLOCK2 || flush === Z_TREES) {
            break inf_leave;
          }
        case TYPEDO:
          if (state.last) {
            hold >>>= bits & 7;
            bits -= bits & 7;
            state.mode = CHECK;
            break;
          }
          while (bits < 3) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.last = hold & 1;
          hold >>>= 1;
          bits -= 1;
          switch (hold & 3) {
            case 0:
              state.mode = STORED;
              break;
            case 1:
              fixedtables(state);
              state.mode = LEN_;
              if (flush === Z_TREES) {
                hold >>>= 2;
                bits -= 2;
                break inf_leave;
              }
              break;
            case 2:
              state.mode = TABLE;
              break;
            case 3:
              strm.msg = "invalid block type";
              state.mode = BAD2;
          }
          hold >>>= 2;
          bits -= 2;
          break;
        case STORED:
          hold >>>= bits & 7;
          bits -= bits & 7;
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
            strm.msg = "invalid stored block lengths";
            state.mode = BAD2;
            break;
          }
          state.length = hold & 65535;
          hold = 0;
          bits = 0;
          state.mode = COPY_;
          if (flush === Z_TREES) {
            break inf_leave;
          }
        case COPY_:
          state.mode = COPY;
        case COPY:
          copy2 = state.length;
          if (copy2) {
            if (copy2 > have) {
              copy2 = have;
            }
            if (copy2 > left) {
              copy2 = left;
            }
            if (copy2 === 0) {
              break inf_leave;
            }
            arraySet(output, input, next, copy2, put);
            have -= copy2;
            next += copy2;
            left -= copy2;
            put += copy2;
            state.length -= copy2;
            break;
          }
          state.mode = TYPE2;
          break;
        case TABLE:
          while (bits < 14) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.nlen = (hold & 31) + 257;
          hold >>>= 5;
          bits -= 5;
          state.ndist = (hold & 31) + 1;
          hold >>>= 5;
          bits -= 5;
          state.ncode = (hold & 15) + 4;
          hold >>>= 4;
          bits -= 4;
          if (state.nlen > 286 || state.ndist > 30) {
            strm.msg = "too many length or distance symbols";
            state.mode = BAD2;
            break;
          }
          state.have = 0;
          state.mode = LENLENS;
        case LENLENS:
          while (state.have < state.ncode) {
            while (bits < 3) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.lens[order[state.have++]] = hold & 7;
            hold >>>= 3;
            bits -= 3;
          }
          while (state.have < 19) {
            state.lens[order[state.have++]] = 0;
          }
          state.lencode = state.lendyn;
          state.lenbits = 7;
          opts = {
            bits: state.lenbits
          };
          ret = inflate_table(CODES2, state.lens, 0, 19, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;
          if (ret) {
            strm.msg = "invalid code lengths set";
            state.mode = BAD2;
            break;
          }
          state.have = 0;
          state.mode = CODELENS;
        case CODELENS:
          while (state.have < state.nlen + state.ndist) {
            for (; ; ) {
              here = state.lencode[hold & (1 << state.lenbits) - 1];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (here_val < 16) {
              hold >>>= here_bits;
              bits -= here_bits;
              state.lens[state.have++] = here_val;
            } else {
              if (here_val === 16) {
                n = here_bits + 2;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                if (state.have === 0) {
                  strm.msg = "invalid bit length repeat";
                  state.mode = BAD2;
                  break;
                }
                len = state.lens[state.have - 1];
                copy2 = 3 + (hold & 3);
                hold >>>= 2;
                bits -= 2;
              } else if (here_val === 17) {
                n = here_bits + 3;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy2 = 3 + (hold & 7);
                hold >>>= 3;
                bits -= 3;
              } else {
                n = here_bits + 7;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy2 = 11 + (hold & 127);
                hold >>>= 7;
                bits -= 7;
              }
              if (state.have + copy2 > state.nlen + state.ndist) {
                strm.msg = "invalid bit length repeat";
                state.mode = BAD2;
                break;
              }
              while (copy2--) {
                state.lens[state.have++] = len;
              }
            }
          }
          if (state.mode === BAD2) {
            break;
          }
          if (state.lens[256] === 0) {
            strm.msg = "invalid code -- missing end-of-block";
            state.mode = BAD2;
            break;
          }
          state.lenbits = 9;
          opts = {
            bits: state.lenbits
          };
          ret = inflate_table(LENS2, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;
          if (ret) {
            strm.msg = "invalid literal/lengths set";
            state.mode = BAD2;
            break;
          }
          state.distbits = 6;
          state.distcode = state.distdyn;
          opts = {
            bits: state.distbits
          };
          ret = inflate_table(DISTS2, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
          state.distbits = opts.bits;
          if (ret) {
            strm.msg = "invalid distances set";
            state.mode = BAD2;
            break;
          }
          state.mode = LEN_;
          if (flush === Z_TREES) {
            break inf_leave;
          }
        case LEN_:
          state.mode = LEN;
        case LEN:
          if (have >= 6 && left >= 258) {
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            inflate_fast(strm, _out);
            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state.hold;
            bits = state.bits;
            if (state.mode === TYPE2) {
              state.back = -1;
            }
            break;
          }
          state.back = 0;
          for (; ; ) {
            here = state.lencode[hold & (1 << state.lenbits) - 1];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = here & 65535;
            if (here_bits <= bits) {
              break;
            }
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (here_op && (here_op & 240) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (; ; ) {
              here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (last_bits + here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state.back += here_bits;
          state.length = here_val;
          if (here_op === 0) {
            state.mode = LIT;
            break;
          }
          if (here_op & 32) {
            state.back = -1;
            state.mode = TYPE2;
            break;
          }
          if (here_op & 64) {
            strm.msg = "invalid literal/length code";
            state.mode = BAD2;
            break;
          }
          state.extra = here_op & 15;
          state.mode = LENEXT;
        case LENEXT:
          if (state.extra) {
            n = state.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.length += hold & (1 << state.extra) - 1;
            hold >>>= state.extra;
            bits -= state.extra;
            state.back += state.extra;
          }
          state.was = state.length;
          state.mode = DIST;
        case DIST:
          for (; ; ) {
            here = state.distcode[hold & (1 << state.distbits) - 1];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = here & 65535;
            if (here_bits <= bits) {
              break;
            }
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((here_op & 240) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (; ; ) {
              here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (last_bits + here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state.back += here_bits;
          if (here_op & 64) {
            strm.msg = "invalid distance code";
            state.mode = BAD2;
            break;
          }
          state.offset = here_val;
          state.extra = here_op & 15;
          state.mode = DISTEXT;
        case DISTEXT:
          if (state.extra) {
            n = state.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.offset += hold & (1 << state.extra) - 1;
            hold >>>= state.extra;
            bits -= state.extra;
            state.back += state.extra;
          }
          if (state.offset > state.dmax) {
            strm.msg = "invalid distance too far back";
            state.mode = BAD2;
            break;
          }
          state.mode = MATCH;
        case MATCH:
          if (left === 0) {
            break inf_leave;
          }
          copy2 = _out - left;
          if (state.offset > copy2) {
            copy2 = state.offset - copy2;
            if (copy2 > state.whave) {
              if (state.sane) {
                strm.msg = "invalid distance too far back";
                state.mode = BAD2;
                break;
              }
            }
            if (copy2 > state.wnext) {
              copy2 -= state.wnext;
              from2 = state.wsize - copy2;
            } else {
              from2 = state.wnext - copy2;
            }
            if (copy2 > state.length) {
              copy2 = state.length;
            }
            from_source = state.window;
          } else {
            from_source = output;
            from2 = put - state.offset;
            copy2 = state.length;
          }
          if (copy2 > left) {
            copy2 = left;
          }
          left -= copy2;
          state.length -= copy2;
          do {
            output[put++] = from_source[from2++];
          } while (--copy2);
          if (state.length === 0) {
            state.mode = LEN;
          }
          break;
        case LIT:
          if (left === 0) {
            break inf_leave;
          }
          output[put++] = state.length;
          left--;
          state.mode = LEN;
          break;
        case CHECK:
          if (state.wrap) {
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold |= input[next++] << bits;
              bits += 8;
            }
            _out -= left;
            strm.total_out += _out;
            state.total += _out;
            if (_out) {
              strm.adler = state.check = /*UPDATE(state.check, put - _out, _out);*/
              state.flags ? crc32_default(state.check, output, _out, put - _out) : adler32_default(state.check, output, _out, put - _out);
            }
            _out = left;
            if ((state.flags ? hold : zswap32(hold)) !== state.check) {
              strm.msg = "incorrect data check";
              state.mode = BAD2;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state.mode = LENGTH;
        case LENGTH:
          if (state.wrap && state.flags) {
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (hold !== (state.total & 4294967295)) {
              strm.msg = "incorrect length check";
              state.mode = BAD2;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state.mode = DONE;
        case DONE:
          ret = Z_STREAM_END2;
          break inf_leave;
        case BAD2:
          ret = Z_DATA_ERROR2;
          break inf_leave;
        case MEM:
          return Z_MEM_ERROR;
        case SYNC:
        default:
          return Z_STREAM_ERROR2;
      }
    }
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  if (state.wsize || _out !== strm.avail_out && state.mode < BAD2 && (state.mode < CHECK || flush !== Z_FINISH2)) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
    state.flags ? crc32_default(state.check, output, _out, strm.next_out - _out) : adler32_default(state.check, output, _out, strm.next_out - _out);
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE2 ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if ((_in === 0 && _out === 0 || flush === Z_FINISH2) && ret === Z_OK2) {
    ret = Z_BUF_ERROR2;
  }
  return ret;
}
function inflateEnd(strm) {
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR2;
  }
  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK2;
}

// node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/binding.js
var NONE = 0;
var DEFLATE = 1;
var INFLATE = 2;
var GZIP = 3;
var GUNZIP = 4;
var DEFLATERAW = 5;
var INFLATERAW = 6;
var UNZIP = 7;
var Z_NO_FLUSH2 = 0;
var Z_PARTIAL_FLUSH2 = 1;
var Z_SYNC_FLUSH = 2;
var Z_FULL_FLUSH2 = 3;
var Z_FINISH3 = 4;
var Z_BLOCK3 = 5;
var Z_TREES2 = 6;
var Z_OK3 = 0;
var Z_STREAM_END3 = 1;
var Z_NEED_DICT2 = 2;
var Z_ERRNO = -1;
var Z_STREAM_ERROR3 = -2;
var Z_DATA_ERROR3 = -3;
var Z_BUF_ERROR3 = -5;
var Z_NO_COMPRESSION = 0;
var Z_BEST_SPEED = 1;
var Z_BEST_COMPRESSION = 9;
var Z_DEFAULT_COMPRESSION2 = -1;
var Z_FILTERED2 = 1;
var Z_HUFFMAN_ONLY2 = 2;
var Z_RLE2 = 3;
var Z_FIXED3 = 4;
var Z_DEFAULT_STRATEGY = 0;
var Z_BINARY2 = 0;
var Z_TEXT2 = 1;
var Z_UNKNOWN3 = 2;
var Z_DEFLATED3 = 8;
function Zlib(mode) {
  if (mode < DEFLATE || mode > UNZIP)
    throw new TypeError("Bad argument");
  this.mode = mode;
  this.init_done = false;
  this.write_in_progress = false;
  this.pending_close = false;
  this.windowBits = 0;
  this.level = 0;
  this.memLevel = 0;
  this.strategy = 0;
  this.dictionary = null;
}
Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
  this.windowBits = windowBits;
  this.level = level;
  this.memLevel = memLevel;
  this.strategy = strategy;
  if (this.mode === GZIP || this.mode === GUNZIP)
    this.windowBits += 16;
  if (this.mode === UNZIP)
    this.windowBits += 32;
  if (this.mode === DEFLATERAW || this.mode === INFLATERAW)
    this.windowBits = -this.windowBits;
  this.strm = new zstream_default();
  var status2;
  switch (this.mode) {
    case DEFLATE:
    case GZIP:
    case DEFLATERAW:
      status2 = deflateInit2(
        this.strm,
        this.level,
        Z_DEFLATED3,
        this.windowBits,
        this.memLevel,
        this.strategy
      );
      break;
    case INFLATE:
    case GUNZIP:
    case INFLATERAW:
    case UNZIP:
      status2 = inflateInit2(
        this.strm,
        this.windowBits
      );
      break;
    default:
      throw new Error("Unknown mode " + this.mode);
  }
  if (status2 !== Z_OK3) {
    this._error(status2);
    return;
  }
  this.write_in_progress = false;
  this.init_done = true;
};
Zlib.prototype.params = function() {
  throw new Error("deflateParams Not supported");
};
Zlib.prototype._writeCheck = function() {
  if (!this.init_done)
    throw new Error("write before init");
  if (this.mode === NONE)
    throw new Error("already finalized");
  if (this.write_in_progress)
    throw new Error("write already in progress");
  if (this.pending_close)
    throw new Error("close is pending");
};
Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {
  this._writeCheck();
  this.write_in_progress = true;
  var self2 = this;
  process.nextTick(function() {
    self2.write_in_progress = false;
    var res = self2._write(flush, input, in_off, in_len, out, out_off, out_len);
    self2.callback(res[0], res[1]);
    if (self2.pending_close)
      self2.close();
  });
  return this;
};
function bufferSet(data, offset) {
  for (var i = 0; i < data.length; i++) {
    this[offset + i] = data[i];
  }
}
Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
  this._writeCheck();
  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
};
Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
  this.write_in_progress = true;
  if (flush !== Z_NO_FLUSH2 && flush !== Z_PARTIAL_FLUSH2 && flush !== Z_SYNC_FLUSH && flush !== Z_FULL_FLUSH2 && flush !== Z_FINISH3 && flush !== Z_BLOCK3) {
    throw new Error("Invalid flush value");
  }
  if (input == null) {
    input = new Buffer(0);
    in_len = 0;
    in_off = 0;
  }
  if (out._set)
    out.set = out._set;
  else
    out.set = bufferSet;
  var strm = this.strm;
  strm.avail_in = in_len;
  strm.input = input;
  strm.next_in = in_off;
  strm.avail_out = out_len;
  strm.output = out;
  strm.next_out = out_off;
  var status2;
  switch (this.mode) {
    case DEFLATE:
    case GZIP:
    case DEFLATERAW:
      status2 = deflate(strm, flush);
      break;
    case UNZIP:
    case INFLATE:
    case GUNZIP:
    case INFLATERAW:
      status2 = inflate(strm, flush);
      break;
    default:
      throw new Error("Unknown mode " + this.mode);
  }
  if (status2 !== Z_STREAM_END3 && status2 !== Z_OK3) {
    this._error(status2);
  }
  this.write_in_progress = false;
  return [strm.avail_in, strm.avail_out];
};
Zlib.prototype.close = function() {
  if (this.write_in_progress) {
    this.pending_close = true;
    return;
  }
  this.pending_close = false;
  if (this.mode === DEFLATE || this.mode === GZIP || this.mode === DEFLATERAW) {
    deflateEnd(this.strm);
  } else {
    inflateEnd(this.strm);
  }
  this.mode = NONE;
};
var status;
Zlib.prototype.reset = function() {
  switch (this.mode) {
    case DEFLATE:
    case DEFLATERAW:
      status = deflateReset(this.strm);
      break;
    case INFLATE:
    case INFLATERAW:
      status = inflateReset(this.strm);
      break;
  }
  if (status !== Z_OK3) {
    this._error(status);
  }
};
Zlib.prototype._error = function(status2) {
  this.onerror(messages_default[status2] + ": " + this.strm.msg, status2);
  this.write_in_progress = false;
  if (this.pending_close)
    this.close();
};

// node-modules-polyfills:zlib
function assert(a, msg) {
  if (!a) {
    throw new Error(msg);
  }
}
var binding2 = {};
Object.keys(binding_exports).forEach(function(key) {
  binding2[key] = binding_exports[key];
});
binding2.Z_MIN_WINDOWBITS = 8;
binding2.Z_MAX_WINDOWBITS = 15;
binding2.Z_DEFAULT_WINDOWBITS = 15;
binding2.Z_MIN_CHUNK = 64;
binding2.Z_MAX_CHUNK = Infinity;
binding2.Z_DEFAULT_CHUNK = 16 * 1024;
binding2.Z_MIN_MEMLEVEL = 1;
binding2.Z_MAX_MEMLEVEL = 9;
binding2.Z_DEFAULT_MEMLEVEL = 8;
binding2.Z_MIN_LEVEL = -1;
binding2.Z_MAX_LEVEL = 9;
binding2.Z_DEFAULT_LEVEL = binding2.Z_DEFAULT_COMPRESSION;
var codes = {
  Z_OK: binding2.Z_OK,
  Z_STREAM_END: binding2.Z_STREAM_END,
  Z_NEED_DICT: binding2.Z_NEED_DICT,
  Z_ERRNO: binding2.Z_ERRNO,
  Z_STREAM_ERROR: binding2.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding2.Z_DATA_ERROR,
  Z_MEM_ERROR: binding2.Z_MEM_ERROR,
  Z_BUF_ERROR: binding2.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding2.Z_VERSION_ERROR
};
Object.keys(codes).forEach(function(k) {
  codes[codes[k]] = k;
});
function inflateRawSync(buffer, opts) {
  return zlibBufferSync(new InflateRaw(opts), buffer);
}
function zlibBufferSync(engine, buffer) {
  if (typeof buffer === "string")
    buffer = new Buffer(buffer);
  if (!Buffer.isBuffer(buffer))
    throw new TypeError("Not a string or buffer");
  var flushFlag = binding2.Z_FINISH;
  return engine._processChunk(buffer, flushFlag);
}
function Deflate(opts) {
  if (!(this instanceof Deflate))
    return new Deflate(opts);
  Zlib2.call(this, opts, binding2.DEFLATE);
}
function Inflate(opts) {
  if (!(this instanceof Inflate))
    return new Inflate(opts);
  Zlib2.call(this, opts, binding2.INFLATE);
}
function Gzip(opts) {
  if (!(this instanceof Gzip))
    return new Gzip(opts);
  Zlib2.call(this, opts, binding2.GZIP);
}
function Gunzip(opts) {
  if (!(this instanceof Gunzip))
    return new Gunzip(opts);
  Zlib2.call(this, opts, binding2.GUNZIP);
}
function DeflateRaw(opts) {
  if (!(this instanceof DeflateRaw))
    return new DeflateRaw(opts);
  Zlib2.call(this, opts, binding2.DEFLATERAW);
}
function InflateRaw(opts) {
  if (!(this instanceof InflateRaw))
    return new InflateRaw(opts);
  Zlib2.call(this, opts, binding2.INFLATERAW);
}
function Unzip(opts) {
  if (!(this instanceof Unzip))
    return new Unzip(opts);
  Zlib2.call(this, opts, binding2.UNZIP);
}
function Zlib2(opts, mode) {
  this._opts = opts = opts || {};
  this._chunkSize = opts.chunkSize || binding2.Z_DEFAULT_CHUNK;
  Transform.call(this, opts);
  if (opts.flush) {
    if (opts.flush !== binding2.Z_NO_FLUSH && opts.flush !== binding2.Z_PARTIAL_FLUSH && opts.flush !== binding2.Z_SYNC_FLUSH && opts.flush !== binding2.Z_FULL_FLUSH && opts.flush !== binding2.Z_FINISH && opts.flush !== binding2.Z_BLOCK) {
      throw new Error("Invalid flush flag: " + opts.flush);
    }
  }
  this._flushFlag = opts.flush || binding2.Z_NO_FLUSH;
  if (opts.chunkSize) {
    if (opts.chunkSize < binding2.Z_MIN_CHUNK || opts.chunkSize > binding2.Z_MAX_CHUNK) {
      throw new Error("Invalid chunk size: " + opts.chunkSize);
    }
  }
  if (opts.windowBits) {
    if (opts.windowBits < binding2.Z_MIN_WINDOWBITS || opts.windowBits > binding2.Z_MAX_WINDOWBITS) {
      throw new Error("Invalid windowBits: " + opts.windowBits);
    }
  }
  if (opts.level) {
    if (opts.level < binding2.Z_MIN_LEVEL || opts.level > binding2.Z_MAX_LEVEL) {
      throw new Error("Invalid compression level: " + opts.level);
    }
  }
  if (opts.memLevel) {
    if (opts.memLevel < binding2.Z_MIN_MEMLEVEL || opts.memLevel > binding2.Z_MAX_MEMLEVEL) {
      throw new Error("Invalid memLevel: " + opts.memLevel);
    }
  }
  if (opts.strategy) {
    if (opts.strategy != binding2.Z_FILTERED && opts.strategy != binding2.Z_HUFFMAN_ONLY && opts.strategy != binding2.Z_RLE && opts.strategy != binding2.Z_FIXED && opts.strategy != binding2.Z_DEFAULT_STRATEGY) {
      throw new Error("Invalid strategy: " + opts.strategy);
    }
  }
  if (opts.dictionary) {
    if (!Buffer.isBuffer(opts.dictionary)) {
      throw new Error("Invalid dictionary: it should be a Buffer instance");
    }
  }
  this._binding = new binding2.Zlib(mode);
  var self2 = this;
  this._hadError = false;
  this._binding.onerror = function(message, errno) {
    self2._binding = null;
    self2._hadError = true;
    var error = new Error(message);
    error.errno = errno;
    error.code = binding2.codes[errno];
    self2.emit("error", error);
  };
  var level = binding2.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === "number")
    level = opts.level;
  var strategy = binding2.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === "number")
    strategy = opts.strategy;
  this._binding.init(
    opts.windowBits || binding2.Z_DEFAULT_WINDOWBITS,
    level,
    opts.memLevel || binding2.Z_DEFAULT_MEMLEVEL,
    strategy,
    opts.dictionary
  );
  this._buffer = new Buffer(this._chunkSize);
  this._offset = 0;
  this._closed = false;
  this._level = level;
  this._strategy = strategy;
  this.once("end", this.close);
}
inherits_default(Zlib2, Transform);
Zlib2.prototype.params = function(level, strategy, callback) {
  if (level < binding2.Z_MIN_LEVEL || level > binding2.Z_MAX_LEVEL) {
    throw new RangeError("Invalid compression level: " + level);
  }
  if (strategy != binding2.Z_FILTERED && strategy != binding2.Z_HUFFMAN_ONLY && strategy != binding2.Z_RLE && strategy != binding2.Z_FIXED && strategy != binding2.Z_DEFAULT_STRATEGY) {
    throw new TypeError("Invalid strategy: " + strategy);
  }
  if (this._level !== level || this._strategy !== strategy) {
    var self2 = this;
    this.flush(binding2.Z_SYNC_FLUSH, function() {
      self2._binding.params(level, strategy);
      if (!self2._hadError) {
        self2._level = level;
        self2._strategy = strategy;
        if (callback)
          callback();
      }
    });
  } else {
    process.nextTick(callback);
  }
};
Zlib2.prototype.reset = function() {
  return this._binding.reset();
};
Zlib2.prototype._flush = function(callback) {
  this._transform(new Buffer(0), "", callback);
};
Zlib2.prototype.flush = function(kind, callback) {
  var ws = this._writableState;
  if (typeof kind === "function" || kind === void 0 && !callback) {
    callback = kind;
    kind = binding2.Z_FULL_FLUSH;
  }
  if (ws.ended) {
    if (callback)
      process.nextTick(callback);
  } else if (ws.ending) {
    if (callback)
      this.once("end", callback);
  } else if (ws.needDrain) {
    var self2 = this;
    this.once("drain", function() {
      self2.flush(callback);
    });
  } else {
    this._flushFlag = kind;
    this.write(new Buffer(0), "", callback);
  }
};
Zlib2.prototype.close = function(callback) {
  if (callback)
    process.nextTick(callback);
  if (this._closed)
    return;
  this._closed = true;
  this._binding.close();
  var self2 = this;
  process.nextTick(function() {
    self2.emit("close");
  });
};
Zlib2.prototype._transform = function(chunk, encoding, cb) {
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);
  if (!chunk === null && !Buffer.isBuffer(chunk))
    return cb(new Error("invalid input"));
  if (last)
    flushFlag = binding2.Z_FINISH;
  else {
    flushFlag = this._flushFlag;
    if (chunk.length >= ws.length) {
      this._flushFlag = this._opts.flush || binding2.Z_NO_FLUSH;
    }
  }
  this._processChunk(chunk, flushFlag, cb);
};
Zlib2.prototype._processChunk = function(chunk, flushFlag, cb) {
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;
  var self2 = this;
  var async = typeof cb === "function";
  if (!async) {
    var buffers = [];
    var nread = 0;
    var error;
    this.on("error", function(er) {
      error = er;
    });
    do {
      var res = this._binding.writeSync(
        flushFlag,
        chunk,
        // in
        inOff,
        // in_off
        availInBefore,
        // in_len
        this._buffer,
        // out
        this._offset,
        //out_off
        availOutBefore
      );
    } while (!this._hadError && callback(res[0], res[1]));
    if (this._hadError) {
      throw error;
    }
    var buf = Buffer.concat(buffers, nread);
    this.close();
    return buf;
  }
  var req = this._binding.write(
    flushFlag,
    chunk,
    // in
    inOff,
    // in_off
    availInBefore,
    // in_len
    this._buffer,
    // out
    this._offset,
    //out_off
    availOutBefore
  );
  req.buffer = chunk;
  req.callback = callback;
  function callback(availInAfter, availOutAfter) {
    if (self2._hadError)
      return;
    var have = availOutBefore - availOutAfter;
    assert(have >= 0, "have should not go down");
    if (have > 0) {
      var out = self2._buffer.slice(self2._offset, self2._offset + have);
      self2._offset += have;
      if (async) {
        self2.push(out);
      } else {
        buffers.push(out);
        nread += out.length;
      }
    }
    if (availOutAfter === 0 || self2._offset >= self2._chunkSize) {
      availOutBefore = self2._chunkSize;
      self2._offset = 0;
      self2._buffer = new Buffer(self2._chunkSize);
    }
    if (availOutAfter === 0) {
      inOff += availInBefore - availInAfter;
      availInBefore = availInAfter;
      if (!async)
        return true;
      var newReq = self2._binding.write(
        flushFlag,
        chunk,
        inOff,
        availInBefore,
        self2._buffer,
        self2._offset,
        self2._chunkSize
      );
      newReq.callback = callback;
      newReq.buffer = chunk;
      return;
    }
    if (!async)
      return false;
    cb();
  }
};
inherits_default(Deflate, Zlib2);
inherits_default(Inflate, Zlib2);
inherits_default(Gzip, Zlib2);
inherits_default(Gunzip, Zlib2);
inherits_default(DeflateRaw, Zlib2);
inherits_default(InflateRaw, Zlib2);
inherits_default(Unzip, Zlib2);

// src/backend/ZipFS.ts
var decompressionMethods = {};
var CompressionMethod = /* @__PURE__ */ ((CompressionMethod2) => {
  CompressionMethod2[CompressionMethod2["STORED"] = 0] = "STORED";
  CompressionMethod2[CompressionMethod2["SHRUNK"] = 1] = "SHRUNK";
  CompressionMethod2[CompressionMethod2["REDUCED_1"] = 2] = "REDUCED_1";
  CompressionMethod2[CompressionMethod2["REDUCED_2"] = 3] = "REDUCED_2";
  CompressionMethod2[CompressionMethod2["REDUCED_3"] = 4] = "REDUCED_3";
  CompressionMethod2[CompressionMethod2["REDUCED_4"] = 5] = "REDUCED_4";
  CompressionMethod2[CompressionMethod2["IMPLODE"] = 6] = "IMPLODE";
  CompressionMethod2[CompressionMethod2["DEFLATE"] = 8] = "DEFLATE";
  CompressionMethod2[CompressionMethod2["DEFLATE64"] = 9] = "DEFLATE64";
  CompressionMethod2[CompressionMethod2["TERSE_OLD"] = 10] = "TERSE_OLD";
  CompressionMethod2[CompressionMethod2["BZIP2"] = 12] = "BZIP2";
  CompressionMethod2[CompressionMethod2["LZMA"] = 14] = "LZMA";
  CompressionMethod2[CompressionMethod2["TERSE_NEW"] = 18] = "TERSE_NEW";
  CompressionMethod2[CompressionMethod2["LZ77"] = 19] = "LZ77";
  CompressionMethod2[CompressionMethod2["WAVPACK"] = 97] = "WAVPACK";
  CompressionMethod2[CompressionMethod2["PPMD"] = 98] = "PPMD";
  return CompressionMethod2;
})(CompressionMethod || {});
function msdos2date(time, date) {
  const day = date & 31;
  const month = (date >> 5 & 15) - 1;
  const year = (date >> 9) + 1980;
  const second = time & 31;
  const minute = time >> 5 & 63;
  const hour = time >> 11;
  return new Date(year, month, day, hour, minute, second);
}
function safeToString(buff, useUTF8, start, length) {
  if (length === 0) {
    return "";
  } else if (useUTF8) {
    return buff.toString("utf8", start, start + length);
  } else {
    return ExtendedASCII.byte2str(buff.slice(start, start + length));
  }
}
var FileHeader = class {
  constructor(data) {
    this.data = data;
    if (data.readUInt32LE(0) !== 67324752) {
      throw new ApiError(22 /* EINVAL */, "Invalid Zip file: Local file header has invalid signature: " + this.data.readUInt32LE(0));
    }
  }
  versionNeeded() {
    return this.data.readUInt16LE(4);
  }
  flags() {
    return this.data.readUInt16LE(6);
  }
  compressionMethod() {
    return this.data.readUInt16LE(8);
  }
  lastModFileTime() {
    return msdos2date(this.data.readUInt16LE(10), this.data.readUInt16LE(12));
  }
  rawLastModFileTime() {
    return this.data.readUInt32LE(10);
  }
  crc32() {
    return this.data.readUInt32LE(14);
  }
  /**
   * These two values are COMPLETELY USELESS.
   *
   * Section 4.4.9:
   *   If bit 3 of the general purpose bit flag is set,
   *   these fields are set to zero in the local header and the
   *   correct values are put in the data descriptor and
   *   in the central directory.
   *
   * So we'll just use the central directory's values.
   */
  // public compressedSize(): number { return this.data.readUInt32LE(18); }
  // public uncompressedSize(): number { return this.data.readUInt32LE(22); }
  fileNameLength() {
    return this.data.readUInt16LE(26);
  }
  extraFieldLength() {
    return this.data.readUInt16LE(28);
  }
  fileName() {
    return safeToString(this.data, this.useUTF8(), 30, this.fileNameLength());
  }
  extraField() {
    const start = 30 + this.fileNameLength();
    return this.data.slice(start, start + this.extraFieldLength());
  }
  totalSize() {
    return 30 + this.fileNameLength() + this.extraFieldLength();
  }
  useUTF8() {
    return (this.flags() & 2048) === 2048;
  }
};
var FileData = class {
  constructor(header, record, data) {
    this.header = header;
    this.record = record;
    this.data = data;
  }
  decompress() {
    const compressionMethod = this.header.compressionMethod();
    const fcn = decompressionMethods[compressionMethod];
    if (fcn) {
      return fcn(this.data, this.record.compressedSize(), this.record.uncompressedSize(), this.record.flag());
    } else {
      let name = CompressionMethod[compressionMethod];
      if (!name) {
        name = `Unknown: ${compressionMethod}`;
      }
      throw new ApiError(22 /* EINVAL */, `Invalid compression method on file '${this.header.fileName()}': ${name}`);
    }
  }
  getHeader() {
    return this.header;
  }
  getRecord() {
    return this.record;
  }
  getRawData() {
    return this.data;
  }
};
var CentralDirectory = class {
  constructor(zipData, data) {
    this.zipData = zipData;
    this.data = data;
    if (this.data.readUInt32LE(0) !== 33639248) {
      throw new ApiError(22 /* EINVAL */, `Invalid Zip file: Central directory record has invalid signature: ${this.data.readUInt32LE(0)}`);
    }
    this._filename = this.produceFilename();
  }
  versionMadeBy() {
    return this.data.readUInt16LE(4);
  }
  versionNeeded() {
    return this.data.readUInt16LE(6);
  }
  flag() {
    return this.data.readUInt16LE(8);
  }
  compressionMethod() {
    return this.data.readUInt16LE(10);
  }
  lastModFileTime() {
    return msdos2date(this.data.readUInt16LE(12), this.data.readUInt16LE(14));
  }
  rawLastModFileTime() {
    return this.data.readUInt32LE(12);
  }
  crc32() {
    return this.data.readUInt32LE(16);
  }
  compressedSize() {
    return this.data.readUInt32LE(20);
  }
  uncompressedSize() {
    return this.data.readUInt32LE(24);
  }
  fileNameLength() {
    return this.data.readUInt16LE(28);
  }
  extraFieldLength() {
    return this.data.readUInt16LE(30);
  }
  fileCommentLength() {
    return this.data.readUInt16LE(32);
  }
  diskNumberStart() {
    return this.data.readUInt16LE(34);
  }
  internalAttributes() {
    return this.data.readUInt16LE(36);
  }
  externalAttributes() {
    return this.data.readUInt32LE(38);
  }
  headerRelativeOffset() {
    return this.data.readUInt32LE(42);
  }
  produceFilename() {
    const fileName = safeToString(this.data, this.useUTF8(), 46, this.fileNameLength());
    return fileName.replace(/\\/g, "/");
  }
  fileName() {
    return this._filename;
  }
  rawFileName() {
    return this.data.slice(46, 46 + this.fileNameLength());
  }
  extraField() {
    const start = 44 + this.fileNameLength();
    return this.data.slice(start, start + this.extraFieldLength());
  }
  fileComment() {
    const start = 46 + this.fileNameLength() + this.extraFieldLength();
    return safeToString(this.data, this.useUTF8(), start, this.fileCommentLength());
  }
  rawFileComment() {
    const start = 46 + this.fileNameLength() + this.extraFieldLength();
    return this.data.slice(start, start + this.fileCommentLength());
  }
  totalSize() {
    return 46 + this.fileNameLength() + this.extraFieldLength() + this.fileCommentLength();
  }
  isDirectory() {
    const fileName = this.fileName();
    return (this.externalAttributes() & 16 ? true : false) || fileName.charAt(fileName.length - 1) === "/";
  }
  isFile() {
    return !this.isDirectory();
  }
  useUTF8() {
    return (this.flag() & 2048) === 2048;
  }
  isEncrypted() {
    return (this.flag() & 1) === 1;
  }
  getFileData() {
    const start = this.headerRelativeOffset();
    const header = new FileHeader(this.zipData.slice(start));
    return new FileData(header, this, this.zipData.slice(start + header.totalSize()));
  }
  getData() {
    return this.getFileData().decompress();
  }
  getRawData() {
    return this.getFileData().getRawData();
  }
  getStats() {
    return new Stats(32768 /* FILE */, this.uncompressedSize(), 365, Date.now(), this.lastModFileTime().getTime());
  }
};
var EndOfCentralDirectory = class {
  constructor(data) {
    this.data = data;
    if (this.data.readUInt32LE(0) !== 101010256) {
      throw new ApiError(22 /* EINVAL */, `Invalid Zip file: End of central directory record has invalid signature: ${this.data.readUInt32LE(0)}`);
    }
  }
  diskNumber() {
    return this.data.readUInt16LE(4);
  }
  cdDiskNumber() {
    return this.data.readUInt16LE(6);
  }
  cdDiskEntryCount() {
    return this.data.readUInt16LE(8);
  }
  cdTotalEntryCount() {
    return this.data.readUInt16LE(10);
  }
  cdSize() {
    return this.data.readUInt32LE(12);
  }
  cdOffset() {
    return this.data.readUInt32LE(16);
  }
  cdZipCommentLength() {
    return this.data.readUInt16LE(20);
  }
  cdZipComment() {
    return safeToString(this.data, true, 22, this.cdZipCommentLength());
  }
  rawCdZipComment() {
    return this.data.slice(22, 22 + this.cdZipCommentLength());
  }
};
var ZipTOC = class {
  constructor(index, directoryEntries, eocd, data) {
    this.index = index;
    this.directoryEntries = directoryEntries;
    this.eocd = eocd;
    this.data = data;
  }
};
var _ZipFS = class extends SynchronousFileSystem {
  constructor(input, name = "") {
    super();
    this.name = name;
    this._index = new FileIndex();
    this._directoryEntries = [];
    this._eocd = null;
    this._index = input.index;
    this._directoryEntries = input.directoryEntries;
    this._eocd = input.eocd;
    this.data = input.data;
  }
  /**
   * Constructs a ZipFS instance with the given options.
   */
  static Create(opts, cb) {
    try {
      _ZipFS._computeIndex(opts.zipData, (e, zipTOC) => {
        if (zipTOC) {
          const fs2 = new _ZipFS(zipTOC, opts.name);
          cb(null, fs2);
        } else {
          cb(e);
        }
      });
    } catch (e) {
      cb(e);
    }
  }
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  static isAvailable() {
    return true;
  }
  static RegisterDecompressionMethod(m, fcn) {
    decompressionMethods[m] = fcn;
  }
  /**
   * Locates the end of central directory record at the end of the file.
   * Throws an exception if it cannot be found.
   */
  static _getEOCD(data) {
    const startOffset = 22;
    const endOffset = Math.min(startOffset + 65535, data.length - 1);
    for (let i = startOffset; i < endOffset; i++) {
      if (data.readUInt32LE(data.length - i) === 101010256) {
        return new EndOfCentralDirectory(data.slice(data.length - i));
      }
    }
    throw new ApiError(22 /* EINVAL */, "Invalid ZIP file: Could not locate End of Central Directory signature.");
  }
  static _addToIndex(cd, index) {
    let filename = cd.fileName();
    if (filename.charAt(0) === "/") {
      throw new ApiError(1 /* EPERM */, `Unexpectedly encountered an absolute path in a zip file. Please file a bug.`);
    }
    if (filename.charAt(filename.length - 1) === "/") {
      filename = filename.substr(0, filename.length - 1);
    }
    if (cd.isDirectory()) {
      index.addPathFast("/" + filename, new DirInode(cd));
    } else {
      index.addPathFast("/" + filename, new FileInode(cd));
    }
  }
  static _computeIndex(data, cb) {
    try {
      const index = new FileIndex();
      const eocd = _ZipFS._getEOCD(data);
      if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
        return cb(new ApiError(22 /* EINVAL */, "ZipFS does not support spanned zip files."));
      }
      const cdPtr = eocd.cdOffset();
      if (cdPtr === 4294967295) {
        return cb(new ApiError(22 /* EINVAL */, "ZipFS does not support Zip64."));
      }
      const cdEnd = cdPtr + eocd.cdSize();
      _ZipFS._computeIndexResponsive(data, index, cdPtr, cdEnd, cb, [], eocd);
    } catch (e) {
      cb(e);
    }
  }
  static _computeIndexResponsiveTrampoline(data, index, cdPtr, cdEnd, cb, cdEntries, eocd) {
    try {
      _ZipFS._computeIndexResponsive(data, index, cdPtr, cdEnd, cb, cdEntries, eocd);
    } catch (e) {
      cb(e);
    }
  }
  static _computeIndexResponsive(data, index, cdPtr, cdEnd, cb, cdEntries, eocd) {
    if (cdPtr < cdEnd) {
      let count = 0;
      while (count++ < 200 && cdPtr < cdEnd) {
        const cd = new CentralDirectory(data, data.slice(cdPtr));
        _ZipFS._addToIndex(cd, index);
        cdPtr += cd.totalSize();
        cdEntries.push(cd);
      }
      setImmediate_default(() => {
        _ZipFS._computeIndexResponsiveTrampoline(data, index, cdPtr, cdEnd, cb, cdEntries, eocd);
      });
    } else {
      cb(null, new ZipTOC(index, cdEntries, eocd, data));
    }
  }
  getName() {
    return _ZipFS.Name + (this.name !== "" ? ` ${this.name}` : "");
  }
  /**
   * Get the CentralDirectory object for the given path.
   */
  getCentralDirectoryEntry(path) {
    const inode = this._index.getInode(path);
    if (inode === null) {
      throw ApiError.ENOENT(path);
    }
    if (isFileInode(inode)) {
      return inode.getData();
    } else if (isDirInode(inode)) {
      return inode.getData();
    } else {
      throw ApiError.EPERM(`Invalid inode: ${inode}`);
    }
  }
  getCentralDirectoryEntryAt(index) {
    const dirEntry = this._directoryEntries[index];
    if (!dirEntry) {
      throw new RangeError(`Invalid directory index: ${index}.`);
    }
    return dirEntry;
  }
  getNumberOfCentralDirectoryEntries() {
    return this._directoryEntries.length;
  }
  getEndOfCentralDirectory() {
    return this._eocd;
  }
  diskSpace(path, cb) {
    cb(this.data.length, 0);
  }
  isReadOnly() {
    return true;
  }
  supportsLinks() {
    return false;
  }
  supportsProps() {
    return false;
  }
  supportsSynch() {
    return true;
  }
  statSync(path, isLstat) {
    const inode = this._index.getInode(path);
    if (inode === null) {
      throw ApiError.ENOENT(path);
    }
    let stats;
    if (isFileInode(inode)) {
      stats = inode.getData().getStats();
    } else if (isDirInode(inode)) {
      stats = inode.getStats();
    } else {
      throw new ApiError(22 /* EINVAL */, "Invalid inode.");
    }
    return stats;
  }
  openSync(path, flags, mode) {
    if (flags.isWriteable()) {
      throw new ApiError(1 /* EPERM */, path);
    }
    const inode = this._index.getInode(path);
    if (!inode) {
      throw ApiError.ENOENT(path);
    } else if (isFileInode(inode) || isDirInode(inode)) {
      const stats = !isDirInode(inode) ? inode.getData().getStats() : inode.getStats();
      const data = !isDirInode(inode) ? inode.getData().getData() : inode.getStats().fileData;
      switch (flags.pathExistsAction()) {
        case 1 /* THROW_EXCEPTION */:
        case 2 /* TRUNCATE_FILE */:
          throw ApiError.EEXIST(path);
        case 0 /* NOP */:
          return new NoSyncFile(this, path, flags, stats, data || void 0);
        default:
          throw new ApiError(22 /* EINVAL */, "Invalid FileMode object.");
      }
    } else {
      throw ApiError.EPERM(path);
    }
  }
  readdirSync(path) {
    const inode = this._index.getInode(path);
    if (!inode) {
      throw ApiError.ENOENT(path);
    } else if (isDirInode(inode)) {
      return inode.getListing();
    } else {
      throw ApiError.ENOTDIR(path);
    }
  }
  /**
   * Specially-optimized readfile.
   */
  readFileSync(fname, encoding, flag) {
    const fd = this.openSync(fname, flag, 420);
    try {
      const fdCast = fd;
      const fdBuff = fdCast.getBuffer();
      if (encoding === null) {
        return copyingSlice(fdBuff);
      }
      return fdBuff.toString(encoding);
    } finally {
      fd.closeSync();
    }
  }
};
var ZipFS = _ZipFS;
ZipFS.Name = "ZipFS";
ZipFS.Options = {
  zipData: {
    type: "object",
    description: "The zip file as a Buffer object.",
    validator: bufferValidator
  },
  name: {
    type: "string",
    optional: true,
    description: "The name of the zip file (optional)."
  }
};
ZipFS.CompressionMethod = CompressionMethod;
ZipFS.RegisterDecompressionMethod(8 /* DEFLATE */, (data, compressedSize, uncompressedSize) => {
  return inflateRawSync(data.slice(0, compressedSize), { chunkSize: uncompressedSize });
});
ZipFS.RegisterDecompressionMethod(0 /* STORED */, (data, compressedSize, uncompressedSize) => {
  return copyingSlice(data, 0, uncompressedSize);
});

// src/backend/IsoFS.ts
var rockRidgeIdentifier = "IEEE_P1282";
function getASCIIString(data, startIndex, length) {
  return data.toString("ascii", startIndex, startIndex + length).trim();
}
function getJolietString(data, startIndex, length) {
  if (length === 1) {
    return String.fromCharCode(data[startIndex]);
  }
  const pairs = Math.floor(length / 2);
  const chars = new Array(pairs);
  for (let i = 0; i < pairs; i++) {
    const pos = startIndex + (i << 1);
    chars[i] = String.fromCharCode(data[pos + 1] | data[pos] << 8);
  }
  return chars.join("");
}
function getDate(data, startIndex) {
  const year = parseInt(getASCIIString(data, startIndex, 4), 10);
  const mon = parseInt(getASCIIString(data, startIndex + 4, 2), 10);
  const day = parseInt(getASCIIString(data, startIndex + 6, 2), 10);
  const hour = parseInt(getASCIIString(data, startIndex + 8, 2), 10);
  const min = parseInt(getASCIIString(data, startIndex + 10, 2), 10);
  const sec = parseInt(getASCIIString(data, startIndex + 12, 2), 10);
  const hundrethsSec = parseInt(getASCIIString(data, startIndex + 14, 2), 10);
  return new Date(year, mon, day, hour, min, sec, hundrethsSec * 100);
}
function getShortFormDate(data, startIndex) {
  const yearsSince1900 = data[startIndex];
  const month = data[startIndex + 1];
  const day = data[startIndex + 2];
  const hour = data[startIndex + 3];
  const minute = data[startIndex + 4];
  const second = data[startIndex + 5];
  return new Date(yearsSince1900, month - 1, day, hour, minute, second);
}
function constructSystemUseEntry(bigData, i) {
  const data = bigData.slice(i);
  const sue = new SystemUseEntry(data);
  switch (sue.signatureWord()) {
    case 17221 /* CE */:
      return new CEEntry(data);
    case 20548 /* PD */:
      return new PDEntry(data);
    case 21328 /* SP */:
      return new SPEntry(data);
    case 21332 /* ST */:
      return new STEntry(data);
    case 17746 /* ER */:
      return new EREntry(data);
    case 17747 /* ES */:
      return new ESEntry(data);
    case 20568 /* PX */:
      return new PXEntry(data);
    case 20558 /* PN */:
      return new PNEntry(data);
    case 21324 /* SL */:
      return new SLEntry(data);
    case 20045 /* NM */:
      return new NMEntry(data);
    case 17228 /* CL */:
      return new CLEntry(data);
    case 20556 /* PL */:
      return new PLEntry(data);
    case 21061 /* RE */:
      return new REEntry(data);
    case 21574 /* TF */:
      return new TFEntry(data);
    case 21318 /* SF */:
      return new SFEntry(data);
    case 21074 /* RR */:
      return new RREntry(data);
    default:
      return sue;
  }
}
function constructSystemUseEntries(data, i, len, isoData) {
  len = len - 4;
  let entries = new Array();
  while (i < len) {
    const entry = constructSystemUseEntry(data, i);
    const length = entry.length();
    if (length === 0) {
      return entries;
    }
    i += length;
    if (entry instanceof STEntry) {
      break;
    }
    if (entry instanceof CEEntry) {
      entries = entries.concat(entry.getEntries(isoData));
    } else {
      entries.push(entry);
    }
  }
  return entries;
}
var VolumeDescriptor = class {
  constructor(data) {
    this._data = data;
  }
  type() {
    return this._data[0];
  }
  standardIdentifier() {
    return getASCIIString(this._data, 1, 5);
  }
  version() {
    return this._data[6];
  }
  data() {
    return this._data.slice(7, 2048);
  }
};
var PrimaryOrSupplementaryVolumeDescriptor = class extends VolumeDescriptor {
  constructor(data) {
    super(data);
    this._root = null;
  }
  systemIdentifier() {
    return this._getString32(8);
  }
  volumeIdentifier() {
    return this._getString32(40);
  }
  volumeSpaceSize() {
    return this._data.readUInt32LE(80);
  }
  volumeSetSize() {
    return this._data.readUInt16LE(120);
  }
  volumeSequenceNumber() {
    return this._data.readUInt16LE(124);
  }
  logicalBlockSize() {
    return this._data.readUInt16LE(128);
  }
  pathTableSize() {
    return this._data.readUInt32LE(132);
  }
  locationOfTypeLPathTable() {
    return this._data.readUInt32LE(140);
  }
  locationOfOptionalTypeLPathTable() {
    return this._data.readUInt32LE(144);
  }
  locationOfTypeMPathTable() {
    return this._data.readUInt32BE(148);
  }
  locationOfOptionalTypeMPathTable() {
    return this._data.readUInt32BE(152);
  }
  rootDirectoryEntry(isoData) {
    if (this._root === null) {
      this._root = this._constructRootDirectoryRecord(this._data.slice(156));
      this._root.rootCheckForRockRidge(isoData);
    }
    return this._root;
  }
  volumeSetIdentifier() {
    return this._getString(190, 128);
  }
  publisherIdentifier() {
    return this._getString(318, 128);
  }
  dataPreparerIdentifier() {
    return this._getString(446, 128);
  }
  applicationIdentifier() {
    return this._getString(574, 128);
  }
  copyrightFileIdentifier() {
    return this._getString(702, 38);
  }
  abstractFileIdentifier() {
    return this._getString(740, 36);
  }
  bibliographicFileIdentifier() {
    return this._getString(776, 37);
  }
  volumeCreationDate() {
    return getDate(this._data, 813);
  }
  volumeModificationDate() {
    return getDate(this._data, 830);
  }
  volumeExpirationDate() {
    return getDate(this._data, 847);
  }
  volumeEffectiveDate() {
    return getDate(this._data, 864);
  }
  fileStructureVersion() {
    return this._data[881];
  }
  applicationUsed() {
    return this._data.slice(883, 883 + 512);
  }
  reserved() {
    return this._data.slice(1395, 1395 + 653);
  }
  _getString32(idx) {
    return this._getString(idx, 32);
  }
};
var PrimaryVolumeDescriptor = class extends PrimaryOrSupplementaryVolumeDescriptor {
  constructor(data) {
    super(data);
    if (this.type() !== 1 /* PrimaryVolumeDescriptor */) {
      throw new ApiError(5 /* EIO */, `Invalid primary volume descriptor.`);
    }
  }
  name() {
    return "ISO9660";
  }
  _constructRootDirectoryRecord(data) {
    return new ISODirectoryRecord(data, -1);
  }
  _getString(idx, len) {
    return this._getString(idx, len);
  }
};
var SupplementaryVolumeDescriptor = class extends PrimaryOrSupplementaryVolumeDescriptor {
  constructor(data) {
    super(data);
    if (this.type() !== 2 /* SupplementaryVolumeDescriptor */) {
      throw new ApiError(5 /* EIO */, `Invalid supplementary volume descriptor.`);
    }
    const escapeSequence = this.escapeSequence();
    const third = escapeSequence[2];
    if (escapeSequence[0] !== 37 || escapeSequence[1] !== 47 || third !== 64 && third !== 67 && third !== 69) {
      throw new ApiError(5 /* EIO */, `Unrecognized escape sequence for SupplementaryVolumeDescriptor: ${escapeSequence.toString()}`);
    }
  }
  name() {
    return "Joliet";
  }
  escapeSequence() {
    return this._data.slice(88, 120);
  }
  _constructRootDirectoryRecord(data) {
    return new JolietDirectoryRecord(data, -1);
  }
  _getString(idx, len) {
    return getJolietString(this._data, idx, len);
  }
};
var DirectoryRecord = class {
  constructor(data, rockRidgeOffset) {
    this._suEntries = null;
    this._fileOrDir = null;
    this._data = data;
    this._rockRidgeOffset = rockRidgeOffset;
  }
  hasRockRidge() {
    return this._rockRidgeOffset > -1;
  }
  getRockRidgeOffset() {
    return this._rockRidgeOffset;
  }
  /**
   * !!ONLY VALID ON ROOT NODE!!
   * Checks if Rock Ridge is enabled, and sets the offset.
   */
  rootCheckForRockRidge(isoData) {
    const dir = this.getDirectory(isoData);
    this._rockRidgeOffset = dir.getDotEntry(isoData)._getRockRidgeOffset(isoData);
    if (this._rockRidgeOffset > -1) {
      this._fileOrDir = null;
    }
  }
  length() {
    return this._data[0];
  }
  extendedAttributeRecordLength() {
    return this._data[1];
  }
  lba() {
    return this._data.readUInt32LE(2) * 2048;
  }
  dataLength() {
    return this._data.readUInt32LE(10);
  }
  recordingDate() {
    return getShortFormDate(this._data, 18);
  }
  fileFlags() {
    return this._data[25];
  }
  fileUnitSize() {
    return this._data[26];
  }
  interleaveGapSize() {
    return this._data[27];
  }
  volumeSequenceNumber() {
    return this._data.readUInt16LE(28);
  }
  identifier() {
    return this._getString(33, this._data[32]);
  }
  fileName(isoData) {
    if (this.hasRockRidge()) {
      const fn = this._rockRidgeFilename(isoData);
      if (fn !== null) {
        return fn;
      }
    }
    const ident = this.identifier();
    if (this.isDirectory(isoData)) {
      return ident;
    }
    const versionSeparator = ident.indexOf(";");
    if (versionSeparator === -1) {
      return ident;
    } else if (ident[versionSeparator - 1] === ".") {
      return ident.slice(0, versionSeparator - 1);
    } else {
      return ident.slice(0, versionSeparator);
    }
  }
  isDirectory(isoData) {
    let rv = !!(this.fileFlags() & 2 /* Directory */);
    if (!rv && this.hasRockRidge()) {
      rv = this.getSUEntries(isoData).filter((e) => e instanceof CLEntry).length > 0;
    }
    return rv;
  }
  isSymlink(isoData) {
    return this.hasRockRidge() && this.getSUEntries(isoData).filter((e) => e instanceof SLEntry).length > 0;
  }
  getSymlinkPath(isoData) {
    let p = "";
    const entries = this.getSUEntries(isoData);
    const getStr = this._getGetString();
    for (const entry of entries) {
      if (entry instanceof SLEntry) {
        const components = entry.componentRecords();
        for (const component of components) {
          const flags = component.flags();
          if (flags & 2 /* CURRENT */) {
            p += "./";
          } else if (flags & 4 /* PARENT */) {
            p += "../";
          } else if (flags & 8 /* ROOT */) {
            p += "/";
          } else {
            p += component.content(getStr);
            if (!(flags & 1 /* CONTINUE */)) {
              p += "/";
            }
          }
        }
        if (!entry.continueFlag()) {
          break;
        }
      }
    }
    if (p.length > 1 && p[p.length - 1] === "/") {
      return p.slice(0, p.length - 1);
    } else {
      return p;
    }
  }
  getFile(isoData) {
    if (this.isDirectory(isoData)) {
      throw new Error(`Tried to get a File from a directory.`);
    }
    if (this._fileOrDir === null) {
      this._fileOrDir = isoData.slice(this.lba(), this.lba() + this.dataLength());
    }
    return this._fileOrDir;
  }
  getDirectory(isoData) {
    if (!this.isDirectory(isoData)) {
      throw new Error(`Tried to get a Directory from a file.`);
    }
    if (this._fileOrDir === null) {
      this._fileOrDir = this._constructDirectory(isoData);
    }
    return this._fileOrDir;
  }
  getSUEntries(isoData) {
    if (!this._suEntries) {
      this._constructSUEntries(isoData);
    }
    return this._suEntries;
  }
  _rockRidgeFilename(isoData) {
    const nmEntries = this.getSUEntries(isoData).filter((e) => e instanceof NMEntry);
    if (nmEntries.length === 0 || nmEntries[0].flags() & (2 /* CURRENT */ | 4 /* PARENT */)) {
      return null;
    }
    let str = "";
    const getString = this._getGetString();
    for (const e of nmEntries) {
      str += e.name(getString);
      if (!(e.flags() & 1 /* CONTINUE */)) {
        break;
      }
    }
    return str;
  }
  _constructSUEntries(isoData) {
    let i = 33 + this._data[32];
    if (i % 2 === 1) {
      i++;
    }
    i += this._rockRidgeOffset;
    this._suEntries = constructSystemUseEntries(this._data, i, this.length(), isoData);
  }
  /**
   * !!ONLY VALID ON FIRST ENTRY OF ROOT DIRECTORY!!
   * Returns -1 if rock ridge is not enabled. Otherwise, returns the offset
   * at which system use fields begin.
   */
  _getRockRidgeOffset(isoData) {
    this._rockRidgeOffset = 0;
    const suEntries = this.getSUEntries(isoData);
    if (suEntries.length > 0) {
      const spEntry = suEntries[0];
      if (spEntry instanceof SPEntry && spEntry.checkBytesPass()) {
        for (let i = 1; i < suEntries.length; i++) {
          const entry = suEntries[i];
          if (entry instanceof RREntry || entry instanceof EREntry && entry.extensionIdentifier() === rockRidgeIdentifier) {
            return spEntry.bytesSkipped();
          }
        }
      }
    }
    this._rockRidgeOffset = -1;
    return -1;
  }
};
var ISODirectoryRecord = class extends DirectoryRecord {
  constructor(data, rockRidgeOffset) {
    super(data, rockRidgeOffset);
  }
  _getString(i, len) {
    return getASCIIString(this._data, i, len);
  }
  _constructDirectory(isoData) {
    return new ISODirectory(this, isoData);
  }
  _getGetString() {
    return getASCIIString;
  }
};
var JolietDirectoryRecord = class extends DirectoryRecord {
  constructor(data, rockRidgeOffset) {
    super(data, rockRidgeOffset);
  }
  _getString(i, len) {
    return getJolietString(this._data, i, len);
  }
  _constructDirectory(isoData) {
    return new JolietDirectory(this, isoData);
  }
  _getGetString() {
    return getJolietString;
  }
};
var SystemUseEntry = class {
  constructor(data) {
    this._data = data;
  }
  signatureWord() {
    return this._data.readUInt16BE(0);
  }
  signatureWordString() {
    return getASCIIString(this._data, 0, 2);
  }
  length() {
    return this._data[2];
  }
  suVersion() {
    return this._data[3];
  }
};
var CEEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
    this._entries = null;
  }
  /**
   * Logical block address of the continuation area.
   */
  continuationLba() {
    return this._data.readUInt32LE(4);
  }
  /**
   * Offset into the logical block.
   */
  continuationLbaOffset() {
    return this._data.readUInt32LE(12);
  }
  /**
   * Length of the continuation area.
   */
  continuationLength() {
    return this._data.readUInt32LE(20);
  }
  getEntries(isoData) {
    if (!this._entries) {
      const start = this.continuationLba() * 2048 + this.continuationLbaOffset();
      this._entries = constructSystemUseEntries(isoData, start, this.continuationLength(), isoData);
    }
    return this._entries;
  }
};
var PDEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
};
var SPEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
  checkBytesPass() {
    return this._data[4] === 190 && this._data[5] === 239;
  }
  bytesSkipped() {
    return this._data[6];
  }
};
var STEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
};
var EREntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
  identifierLength() {
    return this._data[4];
  }
  descriptorLength() {
    return this._data[5];
  }
  sourceLength() {
    return this._data[6];
  }
  extensionVersion() {
    return this._data[7];
  }
  extensionIdentifier() {
    return getASCIIString(this._data, 8, this.identifierLength());
  }
  extensionDescriptor() {
    return getASCIIString(this._data, 8 + this.identifierLength(), this.descriptorLength());
  }
  extensionSource() {
    return getASCIIString(this._data, 8 + this.identifierLength() + this.descriptorLength(), this.sourceLength());
  }
};
var ESEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
  extensionSequence() {
    return this._data[4];
  }
};
var RREntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
};
var PXEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
  mode() {
    return this._data.readUInt32LE(4);
  }
  fileLinks() {
    return this._data.readUInt32LE(12);
  }
  uid() {
    return this._data.readUInt32LE(20);
  }
  gid() {
    return this._data.readUInt32LE(28);
  }
  inode() {
    return this._data.readUInt32LE(36);
  }
};
var PNEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
  devTHigh() {
    return this._data.readUInt32LE(4);
  }
  devTLow() {
    return this._data.readUInt32LE(12);
  }
};
var SLEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
  flags() {
    return this._data[4];
  }
  continueFlag() {
    return this.flags() & 1;
  }
  componentRecords() {
    const records = new Array();
    let i = 5;
    while (i < this.length()) {
      const record = new SLComponentRecord(this._data.slice(i));
      records.push(record);
      i += record.length();
    }
    return records;
  }
};
var SLComponentRecord = class {
  constructor(data) {
    this._data = data;
  }
  flags() {
    return this._data[0];
  }
  length() {
    return 2 + this.componentLength();
  }
  componentLength() {
    return this._data[1];
  }
  content(getString) {
    return getString(this._data, 2, this.componentLength());
  }
};
var NMEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
  flags() {
    return this._data[4];
  }
  name(getString) {
    return getString(this._data, 5, this.length() - 5);
  }
};
var CLEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
  childDirectoryLba() {
    return this._data.readUInt32LE(4);
  }
};
var PLEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
  parentDirectoryLba() {
    return this._data.readUInt32LE(4);
  }
};
var REEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
};
var TFEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
  flags() {
    return this._data[4];
  }
  creation() {
    if (this.flags() & 1 /* CREATION */) {
      if (this._longFormDates()) {
        return getDate(this._data, 5);
      } else {
        return getShortFormDate(this._data, 5);
      }
    } else {
      return null;
    }
  }
  modify() {
    if (this.flags() & 2 /* MODIFY */) {
      const previousDates = this.flags() & 1 /* CREATION */ ? 1 : 0;
      if (this._longFormDates()) {
        return getDate(this._data, 5 + previousDates * 17);
      } else {
        return getShortFormDate(this._data, 5 + previousDates * 7);
      }
    } else {
      return null;
    }
  }
  access() {
    if (this.flags() & 4 /* ACCESS */) {
      let previousDates = this.flags() & 1 /* CREATION */ ? 1 : 0;
      previousDates += this.flags() & 2 /* MODIFY */ ? 1 : 0;
      if (this._longFormDates()) {
        return getDate(this._data, 5 + previousDates * 17);
      } else {
        return getShortFormDate(this._data, 5 + previousDates * 7);
      }
    } else {
      return null;
    }
  }
  backup() {
    if (this.flags() & 16 /* BACKUP */) {
      let previousDates = this.flags() & 1 /* CREATION */ ? 1 : 0;
      previousDates += this.flags() & 2 /* MODIFY */ ? 1 : 0;
      previousDates += this.flags() & 4 /* ACCESS */ ? 1 : 0;
      if (this._longFormDates()) {
        return getDate(this._data, 5 + previousDates * 17);
      } else {
        return getShortFormDate(this._data, 5 + previousDates * 7);
      }
    } else {
      return null;
    }
  }
  expiration() {
    if (this.flags() & 32 /* EXPIRATION */) {
      let previousDates = this.flags() & 1 /* CREATION */ ? 1 : 0;
      previousDates += this.flags() & 2 /* MODIFY */ ? 1 : 0;
      previousDates += this.flags() & 4 /* ACCESS */ ? 1 : 0;
      previousDates += this.flags() & 16 /* BACKUP */ ? 1 : 0;
      if (this._longFormDates()) {
        return getDate(this._data, 5 + previousDates * 17);
      } else {
        return getShortFormDate(this._data, 5 + previousDates * 7);
      }
    } else {
      return null;
    }
  }
  effective() {
    if (this.flags() & 64 /* EFFECTIVE */) {
      let previousDates = this.flags() & 1 /* CREATION */ ? 1 : 0;
      previousDates += this.flags() & 2 /* MODIFY */ ? 1 : 0;
      previousDates += this.flags() & 4 /* ACCESS */ ? 1 : 0;
      previousDates += this.flags() & 16 /* BACKUP */ ? 1 : 0;
      previousDates += this.flags() & 32 /* EXPIRATION */ ? 1 : 0;
      if (this._longFormDates()) {
        return getDate(this._data, 5 + previousDates * 17);
      } else {
        return getShortFormDate(this._data, 5 + previousDates * 7);
      }
    } else {
      return null;
    }
  }
  _longFormDates() {
    return !!(this.flags() && 128 /* LONG_FORM */);
  }
};
var SFEntry = class extends SystemUseEntry {
  constructor(data) {
    super(data);
  }
  virtualSizeHigh() {
    return this._data.readUInt32LE(4);
  }
  virtualSizeLow() {
    return this._data.readUInt32LE(12);
  }
  tableDepth() {
    return this._data[20];
  }
};
var Directory = class {
  constructor(record, isoData) {
    this._fileList = [];
    this._fileMap = {};
    this._record = record;
    let i = record.lba();
    let iLimit = i + record.dataLength();
    if (!(record.fileFlags() & 2 /* Directory */)) {
      const cl = record.getSUEntries(isoData).filter((e) => e instanceof CLEntry)[0];
      i = cl.childDirectoryLba() * 2048;
      iLimit = Infinity;
    }
    while (i < iLimit) {
      const len = isoData[i];
      if (len === 0) {
        i++;
        continue;
      }
      const r = this._constructDirectoryRecord(isoData.slice(i));
      const fname = r.fileName(isoData);
      if (fname !== "\0" && fname !== "") {
        if (!r.hasRockRidge() || r.getSUEntries(isoData).filter((e) => e instanceof REEntry).length === 0) {
          this._fileMap[fname] = r;
          this._fileList.push(fname);
        }
      } else if (iLimit === Infinity) {
        iLimit = i + r.dataLength();
      }
      i += r.length();
    }
  }
  /**
   * Get the record with the given name.
   * Returns undefined if not present.
   */
  getRecord(name) {
    return this._fileMap[name];
  }
  getFileList() {
    return this._fileList;
  }
  getDotEntry(isoData) {
    return this._constructDirectoryRecord(isoData.slice(this._record.lba()));
  }
};
var ISODirectory = class extends Directory {
  constructor(record, isoData) {
    super(record, isoData);
  }
  _constructDirectoryRecord(data) {
    return new ISODirectoryRecord(data, this._record.getRockRidgeOffset());
  }
};
var JolietDirectory = class extends Directory {
  constructor(record, isoData) {
    super(record, isoData);
  }
  _constructDirectoryRecord(data) {
    return new JolietDirectoryRecord(data, this._record.getRockRidgeOffset());
  }
};
var _IsoFS = class extends SynchronousFileSystem {
  /**
   * **Deprecated. Please use IsoFS.Create() method instead.**
   *
   * Constructs a read-only file system from the given ISO.
   * @param data The ISO file in a buffer.
   * @param name The name of the ISO (optional; used for debug messages / identification via getName()).
   */
  constructor(data, name = "") {
    super();
    this._data = data;
    let vdTerminatorFound = false;
    let i = 16 * 2048;
    const candidateVDs = new Array();
    while (!vdTerminatorFound) {
      const slice2 = data.slice(i);
      const vd = new VolumeDescriptor(slice2);
      switch (vd.type()) {
        case 1 /* PrimaryVolumeDescriptor */:
          candidateVDs.push(new PrimaryVolumeDescriptor(slice2));
          break;
        case 2 /* SupplementaryVolumeDescriptor */:
          candidateVDs.push(new SupplementaryVolumeDescriptor(slice2));
          break;
        case 255 /* VolumeDescriptorSetTerminator */:
          vdTerminatorFound = true;
          break;
      }
      i += 2048;
    }
    if (candidateVDs.length === 0) {
      throw new ApiError(5 /* EIO */, `Unable to find a suitable volume descriptor.`);
    }
    candidateVDs.forEach((v) => {
      if (!this._pvd || this._pvd.type() !== 2 /* SupplementaryVolumeDescriptor */) {
        this._pvd = v;
      }
    });
    this._root = this._pvd.rootDirectoryEntry(data);
    this._name = name;
  }
  /**
   * Creates an IsoFS instance with the given options.
   */
  static Create(opts, cb) {
    try {
      cb(null, new _IsoFS(opts.data, opts.name));
    } catch (e) {
      cb(e);
    }
  }
  static CreateAsync(opts) {
    return new Promise((resolve2, reject) => {
      this.Create(opts, (error, fs2) => {
        if (error || !fs2) {
          reject(error);
        } else {
          resolve2(fs2);
        }
      });
    });
  }
  static isAvailable() {
    return true;
  }
  getName() {
    let name = `IsoFS${this._name}${this._pvd ? `-${this._pvd.name()}` : ""}`;
    if (this._root && this._root.hasRockRidge()) {
      name += `-RockRidge`;
    }
    return name;
  }
  diskSpace(path, cb) {
    cb(this._data.length, 0);
  }
  isReadOnly() {
    return true;
  }
  supportsLinks() {
    return false;
  }
  supportsProps() {
    return false;
  }
  supportsSynch() {
    return true;
  }
  statSync(p, isLstat) {
    const record = this._getDirectoryRecord(p);
    if (record === null) {
      throw ApiError.ENOENT(p);
    }
    return this._getStats(p, record);
  }
  openSync(p, flags, mode) {
    if (flags.isWriteable()) {
      throw new ApiError(1 /* EPERM */, p);
    }
    const record = this._getDirectoryRecord(p);
    if (!record) {
      throw ApiError.ENOENT(p);
    } else if (record.isSymlink(this._data)) {
      return this.openSync(resolve(p, record.getSymlinkPath(this._data)), flags, mode);
    } else {
      const data = !record.isDirectory(this._data) ? record.getFile(this._data) : void 0;
      const stats = this._getStats(p, record);
      switch (flags.pathExistsAction()) {
        case 1 /* THROW_EXCEPTION */:
        case 2 /* TRUNCATE_FILE */:
          throw ApiError.EEXIST(p);
        case 0 /* NOP */:
          return new NoSyncFile(this, p, flags, stats, data);
        default:
          throw new ApiError(22 /* EINVAL */, "Invalid FileMode object.");
      }
    }
  }
  readdirSync(path) {
    const record = this._getDirectoryRecord(path);
    if (!record) {
      throw ApiError.ENOENT(path);
    } else if (record.isDirectory(this._data)) {
      return record.getDirectory(this._data).getFileList().slice(0);
    } else {
      throw ApiError.ENOTDIR(path);
    }
  }
  /**
   * Specially-optimized readfile.
   */
  readFileSync(fname, encoding, flag) {
    const fd = this.openSync(fname, flag, 420);
    try {
      const fdCast = fd;
      const fdBuff = fdCast.getBuffer();
      if (encoding === null) {
        return copyingSlice(fdBuff);
      }
      return fdBuff.toString(encoding);
    } finally {
      fd.closeSync();
    }
  }
  _getDirectoryRecord(path) {
    if (path === "/") {
      return this._root;
    }
    const components = path.split("/").slice(1);
    let dir = this._root;
    for (const component of components) {
      if (dir.isDirectory(this._data)) {
        dir = dir.getDirectory(this._data).getRecord(component);
        if (!dir) {
          return null;
        }
      } else {
        return null;
      }
    }
    return dir;
  }
  _getStats(p, record) {
    if (record.isSymlink(this._data)) {
      const newP = resolve(p, record.getSymlinkPath(this._data));
      const dirRec = this._getDirectoryRecord(newP);
      if (!dirRec) {
        return null;
      }
      return this._getStats(newP, dirRec);
    } else {
      const len = record.dataLength();
      let mode = 365;
      const date = record.recordingDate().getTime();
      let atime = date;
      let mtime = date;
      let ctime = date;
      if (record.hasRockRidge()) {
        const entries = record.getSUEntries(this._data);
        for (const entry of entries) {
          if (entry instanceof PXEntry) {
            mode = entry.mode();
          } else if (entry instanceof TFEntry) {
            const flags = entry.flags();
            if (flags & 4 /* ACCESS */) {
              atime = entry.access().getTime();
            }
            if (flags & 2 /* MODIFY */) {
              mtime = entry.modify().getTime();
            }
            if (flags & 1 /* CREATION */) {
              ctime = entry.creation().getTime();
            }
          }
        }
      }
      mode = mode & 365;
      return new Stats(record.isDirectory(this._data) ? 16384 /* DIRECTORY */ : 32768 /* FILE */, len, mode, atime, mtime, ctime);
    }
  }
};
var IsoFS = _IsoFS;
IsoFS.Name = "IsoFS";
IsoFS.Options = {
  data: {
    type: "object",
    description: "The ISO file in a buffer",
    validator: bufferValidator
  }
};

// src/core/backends.ts
[AsyncMirror, DropboxFileSystem, EmscriptenFileSystem, FileSystemAccessFileSystem, FolderAdapter, InMemoryFileSystem, IndexedDBFileSystem, IsoFS, LocalStorageFileSystem, MountableFileSystem, OverlayFS, WorkerFS, HTTPRequest, ZipFS].forEach(
  (fsType) => {
    const create = fsType.Create;
    fsType.Create = function(opts, cb) {
      const oneArg = typeof opts === "function";
      const normalizedCb = oneArg ? opts : cb;
      const normalizedOpts = oneArg ? {} : opts;
      function wrappedCb(e) {
        if (e) {
          normalizedCb(e);
        } else {
          create.call(fsType, normalizedOpts, normalizedCb);
        }
      }
      checkOptions(fsType, normalizedOpts, wrappedCb);
    };
  }
);
var Backends = {
  AsyncMirror,
  Dropbox: DropboxFileSystem,
  Emscripten: EmscriptenFileSystem,
  FileSystemAccess: FileSystemAccessFileSystem,
  FolderAdapter,
  InMemory: InMemoryFileSystem,
  IndexedDB: IndexedDBFileSystem,
  IsoFS,
  LocalStorage: LocalStorageFileSystem,
  MountableFileSystem,
  OverlayFS,
  WorkerFS,
  HTTPRequest,
  XmlHttpRequest: HTTPRequest,
  ZipFS
};
var backends_default = Backends;

// src/core/browserfs.ts
if (process_exports && void 0) {
  (void 0)();
}
function install(obj) {
  obj.Buffer = Buffer;
  obj.process = process_exports;
  const oldRequire = obj.require ? obj.require : null;
  obj.require = function(arg) {
    const rv = BFSRequire(arg);
    if (!rv) {
      return oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));
    } else {
      return rv;
    }
  };
}
function registerFileSystem(name, fs2) {
  backends_default[name] = fs2;
}
var BFSRequire = (module2) => {
  switch (module2) {
    case "fs":
      return node_fs_default;
    case "path":
      return path_exports;
    case "buffer":
      return buffer_exports;
    case "process":
      return process_exports;
    case "bfs_utils":
    case "bfs-utils":
      return util_exports;
    default:
      return backends_default[module2];
  }
};
function initialize(rootfs, uid = 0, gid = 0) {
  const cred = new Cred(uid, gid, uid, gid, uid, gid);
  return node_fs_default.initialize(rootfs, cred);
}
function configure(config2, cb) {
  getFileSystem(config2, (e, fs2) => {
    if (fs2) {
      initialize(fs2);
      cb();
    } else {
      cb(e);
    }
  });
}
function configureAsync(config2) {
  return new Promise((resolve2, reject) => {
    getFileSystem(config2, (e, fs2) => {
      if (fs2) {
        initialize(fs2);
        resolve2(fs2);
      } else {
        reject(e);
      }
    });
  });
}
function getFileSystem(config2, cb) {
  const fsName = config2["fs"];
  if (!fsName) {
    return cb(new ApiError(1 /* EPERM */, 'Missing "fs" property on configuration object.'));
  }
  const options = config2["options"];
  let waitCount = 0;
  let called = false;
  function finish() {
    if (!called) {
      called = true;
      const fsc = backends_default[fsName];
      if (!fsc) {
        cb(new ApiError(1 /* EPERM */, `File system ${fsName} is not available in BrowserFS.`));
      } else {
        fsc.Create(options, cb);
      }
    }
  }
  if (options !== null && typeof options === "object") {
    let finishedIterating = false;
    const props = Object.keys(options).filter((k) => k !== "fs");
    props.forEach((p) => {
      const d = options[p];
      if (d !== null && typeof d === "object" && d["fs"]) {
        waitCount++;
        getFileSystem(d, function(e, fs2) {
          waitCount--;
          if (e) {
            if (called) {
              return;
            }
            called = true;
            cb(e);
          } else {
            options[p] = fs2;
            if (waitCount === 0 && finishedIterating) {
              finish();
            }
          }
        });
      }
    });
    finishedIterating = true;
  }
  if (waitCount === 0) {
    finish();
  }
}
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
//# sourceMappingURL=data:application/json;base64,
