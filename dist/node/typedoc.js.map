{"version":3,"file":"typedoc.js","sourceRoot":"","sources":["../../src/typedoc.ts"],"names":[],"mappings":"","sourcesContent":["import { FileSystem } from './core/file_system';\n\n/**\n * We use typedoc in 'file' mode to avoid many issues.\n * Unfortunately, it does not process export statements properly in some circumstances.\n * Here, we redefine the main BrowserFS object for documentation purposes.\n */\n\nimport { FileSystem as Backends, BFSRequire } from './index';\n\n/**\n * BrowserFS's main interface.\n *\n * In the browser, this is exposed as the `BrowserFS` global.\n *\n * In node, this is the object you receive when you `require('browserfs')`.\n */\nexport interface BrowserFS {\n\t/**\n\t * Exposes all of the file system backends available in BrowserFS.\n\t */\n\tFileSystem: typeof Backends;\n\t/**\n\t * Emulates Node's `require()` function for filesystem-related modules (`'fs'`, `'path'`, `'buffer'`, etc).\n\t */\n\tBFSRequire: typeof BFSRequire;\n\t/**\n\t * You must call this function with a properly-instantiated root file system\n\t * before using any file system API method.\n\t * @param rootFS The root filesystem to use for the\n\t *   entire BrowserFS file system.\n\t */\n\tinitialize(rootFS: FileSystem): void;\n\t/**\n\t * Installs BrowserFS onto the given object.\n\t * We recommend that you run install with the 'window' object to make things\n\t * global, as in Node.\n\t *\n\t * Properties installed:\n\t *\n\t * * Buffer\n\t * * process\n\t * * require (we monkey-patch it)\n\t *\n\t * This allows you to write code as if you were running inside Node.\n\t * @param obj The object to install things onto (e.g. window)\n\t */\n\tinstall(obj: any): void;\n}\n"]}