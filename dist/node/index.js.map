{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;;;AAEH,8CAA8C;AAC9C,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC5B,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,UAAU,MAAkD;QACtF,OAAO,UAAwB,KAAa,EAAE,MAAe;YAC5D,iEAAiE;YACjE,0BAA0B;YAC1B,IAAI,KAAK,GAAG,CAAC,EAAE;gBACd,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;aAC5B;YACD,6BAA6B;YAC7B,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACzC,CAAC,CAAC;IACH,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;CAC5B;AAED,2CAA2C;AAC3C,mDAAmD;AACnD,IAAI,OAAO,WAAW,KAAK,WAAW,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;IAC5E,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;QACnC,UAAU,CAAC,SAAS,CAAC,KAAK,GAAG,UAA4B,KAAiB,EAAE,GAAyB;YAA5C,sBAAA,EAAA,SAAiB;YAAE,oBAAA,EAAA,MAAc,IAAI,CAAC,MAAM;YACpG,IAAM,IAAI,GAAe,IAAI,CAAC;YAC9B,IAAI,KAAK,GAAG,CAAC,EAAE;gBACd,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBAC5B,IAAI,KAAK,GAAG,CAAC,EAAE;oBACd,KAAK,GAAG,CAAC,CAAC;iBACV;aACD;YACD,IAAI,GAAG,GAAG,CAAC,EAAE;gBACZ,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;gBACxB,IAAI,GAAG,GAAG,CAAC,EAAE;oBACZ,GAAG,GAAG,CAAC,CAAC;iBACR;aACD;YACD,IAAI,GAAG,GAAG,KAAK,EAAE;gBAChB,GAAG,GAAG,KAAK,CAAC;aACZ;YACD,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,GAAG,KAAK,EAAE,GAAG,GAAG,KAAK,CAAC,CAAC;QAC1E,CAAC,CAAC;KACF;CACD;AAED,mDAAiC","sourcesContent":["/**\n * BrowserFS's main entry point.\n * It installs all of the needed polyfills, and requires() the main module.\n */\n\n// IE substr does not support negative indices\nif ('ab'.substr(-1) !== 'b') {\n\tString.prototype.substr = (function (substr: (start: number, length?: number) => string) {\n\t\treturn function (this: string, start: number, length?: number): string {\n\t\t\t// did we get a negative start, calculate how much it is from the\n\t\t\t// beginning of the string\n\t\t\tif (start < 0) {\n\t\t\t\tstart = this.length + start;\n\t\t\t}\n\t\t\t// call the original function\n\t\t\treturn substr.call(this, start, length);\n\t\t};\n\t})(String.prototype.substr);\n}\n\n// Polyfill for Uint8Array.prototype.slice.\n// Safari and some other browsers do not define it.\nif (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined') {\n\tif (!Uint8Array.prototype['slice']) {\n\t\tUint8Array.prototype.slice = function (this: Uint8Array, start: number = 0, end: number = this.length): Uint8Array {\n\t\t\tconst self: Uint8Array = this;\n\t\t\tif (start < 0) {\n\t\t\t\tstart = this.length + start;\n\t\t\t\tif (start < 0) {\n\t\t\t\t\tstart = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (end < 0) {\n\t\t\t\tend = this.length + end;\n\t\t\t\tif (end < 0) {\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (end < start) {\n\t\t\t\tend = start;\n\t\t\t}\n\t\t\treturn new Uint8Array(self.buffer, self.byteOffset + start, end - start);\n\t\t};\n\t}\n}\n\nexport * from './core/browserfs';\n"]}