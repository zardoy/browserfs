{"version":3,"file":"HTML5FS.js","sourceRoot":"","sources":["../../../src/backend/HTML5FS.ts"],"names":[],"mappings":"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","sourcesContent":["import PreloadFile from '../generic/preload_file';\r\nimport {BaseFileSystem, FileSystem as IFileSystem, BFSOneArgCallback, BFSCallback, FileSystemOptions} from '../core/file_system';\r\nimport {ApiError, ErrorCode} from '../core/api_error';\r\nimport {FileFlag, ActionType} from '../core/file_flag';\r\nimport {default as Stats, FileType} from '../core/node_fs_stats';\r\nimport {File as IFile} from '../core/file';\r\nimport * as path from 'path';\r\nimport global from '../core/global';\r\nimport {each as asyncEach} from 'async';\r\nimport {buffer2ArrayBuffer, arrayBuffer2Buffer, deprecationMessage} from '../core/util';\r\n\r\n/**\r\n * @hidden\r\n */\r\nfunction isDirectoryEntry(entry: Entry): entry is DirectoryEntry {\r\n  return entry.isDirectory;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nconst _getFS: (type: number, size: number, successCallback: FileSystemCallback, errorCallback?: ErrorCallback) => void = global.webkitRequestFileSystem || global.requestFileSystem || null;\r\n\r\n/**\r\n * @hidden\r\n */\r\nfunction _requestQuota(type: number, size: number, success: (size: number) => void, errorCallback: ErrorCallback) {\r\n  // We cast navigator and window to '<any>' because everything here is\r\n  // nonstandard functionality, despite the fact that Chrome has the only\r\n  // implementation of the HTML5FS and is likely driving the standardization\r\n  // process. Thus, these objects defined off of navigator and window are not\r\n  // present in the DefinitelyTyped TypeScript typings for FileSystem.\r\n  if (typeof (<any> navigator)['webkitPersistentStorage'] !== 'undefined') {\r\n    switch (type) {\r\n      case global.PERSISTENT:\r\n        (<any> navigator).webkitPersistentStorage.requestQuota(size, success, errorCallback);\r\n        break;\r\n      case global.TEMPORARY:\r\n        (<any> navigator).webkitTemporaryStorage.requestQuota(size, success, errorCallback);\r\n        break;\r\n      default:\r\n        errorCallback(new TypeError(`Invalid storage type: ${type}`));\r\n        break;\r\n    }\r\n  } else {\r\n    (<any> global).webkitStorageInfo.requestQuota(type, size, success, errorCallback);\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nfunction _toArray(list?: any[]): any[] {\r\n  return Array.prototype.slice.call(list || [], 0);\r\n}\r\n\r\n/**\r\n * Converts the given DOMError into an appropriate ApiError.\r\n * @url https://developer.mozilla.org/en-US/docs/Web/API/DOMError\r\n * @hidden\r\n */\r\nfunction convertError(err: DOMError, p: string, expectedDir: boolean): ApiError {\r\n  switch (err.name) {\r\n    /* The user agent failed to create a file or directory due to the existence of a file or\r\n        directory with the same path.  */\r\n    case \"PathExistsError\":\r\n      return ApiError.EEXIST(p);\r\n    /* The operation failed because it would cause the application to exceed its storage quota.  */\r\n    case 'QuotaExceededError':\r\n      return ApiError.FileError(ErrorCode.ENOSPC, p);\r\n    /*  A required file or directory could not be found at the time an operation was processed.   */\r\n    case 'NotFoundError':\r\n      return ApiError.ENOENT(p);\r\n    /* This is a security error code to be used in situations not covered by any other error codes.\r\n        - A required file was unsafe for access within a Web application\r\n        - Too many calls are being made on filesystem resources */\r\n    case 'SecurityError':\r\n      return ApiError.FileError(ErrorCode.EACCES, p);\r\n    /* The modification requested was illegal. Examples of invalid modifications include moving a\r\n        directory into its own child, moving a file into its parent directory without changing its name,\r\n        or copying a directory to a path occupied by a file.  */\r\n    case 'InvalidModificationError':\r\n      return ApiError.FileError(ErrorCode.EPERM, p);\r\n    /* The user has attempted to look up a file or directory, but the Entry found is of the wrong type\r\n        [e.g. is a DirectoryEntry when the user requested a FileEntry].  */\r\n    case 'TypeMismatchError':\r\n      return ApiError.FileError(expectedDir ? ErrorCode.ENOTDIR : ErrorCode.EISDIR, p);\r\n    /* A path or URL supplied to the API was malformed.  */\r\n    case \"EncodingError\":\r\n    /* An operation depended on state cached in an interface object, but that state that has changed\r\n        since it was read from disk.  */\r\n    case \"InvalidStateError\":\r\n    /* The user attempted to write to a file or directory which could not be modified due to the state\r\n        of the underlying filesystem.  */\r\n    case \"NoModificationAllowedError\":\r\n    default:\r\n      return ApiError.FileError(ErrorCode.EINVAL, p);\r\n  }\r\n}\r\n\r\n// A note about getFile and getDirectory options:\r\n// These methods are called at numerous places in this file, and are passed\r\n// some combination of these two options:\r\n//   - create: If true, the entry will be created if it doesn't exist.\r\n//             If false, an error will be thrown if it doesn't exist.\r\n//   - exclusive: If true, only create the entry if it doesn't already exist,\r\n//                and throw an error if it does.\r\n\r\nexport class HTML5FSFile extends PreloadFile<HTML5FS> implements IFile {\r\n  private _entry: FileEntry;\r\n\r\n  constructor(fs: HTML5FS, entry: FileEntry, path: string, flag: FileFlag, stat: Stats, contents?: Buffer) {\r\n    super(fs, path, flag, stat, contents);\r\n    this._entry = entry;\r\n  }\r\n\r\n  public sync(cb: BFSOneArgCallback): void {\r\n    if (!this.isDirty()) {\r\n      return cb();\r\n    }\r\n\r\n    this._entry.createWriter((writer) => {\r\n      const buffer = this.getBuffer();\r\n      const blob = new Blob([buffer2ArrayBuffer(buffer)]);\r\n      const length = blob.size;\r\n      writer.onwriteend = (err?: any) => {\r\n        writer.onwriteend = <any> null;\r\n        writer.onerror = <any> null;\r\n        writer.truncate(length);\r\n        this.resetDirty();\r\n        cb();\r\n      };\r\n      writer.onerror = (err: any) => {\r\n        cb(convertError(err, this.getPath(), false));\r\n      };\r\n      writer.write(blob);\r\n    });\r\n  }\r\n\r\n  public close(cb: BFSOneArgCallback): void {\r\n    this.sync(cb);\r\n  }\r\n}\r\n\r\nexport interface HTML5FSOptions {\r\n  // storage quota to request, in megabytes. Allocated value may be less.\r\n  size?: number;\r\n  // window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT.\r\n  type?: number;\r\n}\r\n\r\n/**\r\n * A read-write filesystem backed by the HTML5 FileSystem API.\r\n *\r\n * As the HTML5 FileSystem is only implemented in Blink, this interface is\r\n * only available in Chrome.\r\n */\r\nexport default class HTML5FS extends BaseFileSystem implements IFileSystem {\r\n  public static readonly Name = \"HTML5FS\";\r\n\r\n  public static readonly Options: FileSystemOptions = {\r\n    size: {\r\n      type: \"number\",\r\n      optional: true,\r\n      description: \"Storage quota to request, in megabytes. Allocated value may be less. Defaults to 5.\"\r\n    },\r\n    type: {\r\n      type: \"number\",\r\n      optional: true,\r\n      description: \"window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT.\"\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Creates an HTML5FS instance with the given options.\r\n   */\r\n  public static Create(opts: HTML5FSOptions, cb: BFSCallback<HTML5FS>): void {\r\n    const fs = new HTML5FS(opts.size, opts.type, false);\r\n    fs.allocate((e) => e ? cb(e) : cb(null, fs), false);\r\n  }\r\n  public static isAvailable(): boolean {\r\n    return !!_getFS;\r\n  }\r\n\r\n  // HTML5File reaches into HTML5FS. :/\r\n  public fs: FileSystem;\r\n  private size: number;\r\n  private type: number;\r\n  /**\r\n   * **Deprecated. Please use HTML5FS.Create() method instead.**\r\n   *\r\n   * Creates a new HTML5 FileSystem-backed BrowserFS file system of the given size\r\n   * and storage type.\r\n   *\r\n   * **IMPORTANT**: You must call `allocate` on the resulting object before the file system\r\n   * can be used.\r\n   *\r\n   * @param size storage quota to request, in megabytes. Allocated value may be less.\r\n   * @param type window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT.\r\n   */\r\n  constructor(size: number = 5, type: number = global.PERSISTENT, deprecateMsg = true) {\r\n    super();\r\n    // Convert MB to bytes.\r\n    this.size = 1024 * 1024 * size;\r\n    this.type = type;\r\n    deprecationMessage(deprecateMsg, HTML5FS.Name, {size: size, type: type});\r\n  }\r\n\r\n  public getName(): string {\r\n    return HTML5FS.Name;\r\n  }\r\n\r\n  public isReadOnly(): boolean {\r\n    return false;\r\n  }\r\n\r\n  public supportsSymlinks(): boolean {\r\n    return false;\r\n  }\r\n\r\n  public supportsProps(): boolean {\r\n    return false;\r\n  }\r\n\r\n  public supportsSynch(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * **Deprecated. Please use Create() method instead to create and allocate an HTML5FS.**\r\n   *\r\n   * Requests a storage quota from the browser to back this FS.\r\n   * Must be called before file system can be used!\r\n   */\r\n  public allocate(cb: BFSOneArgCallback = () => {/*nop*/}, deprecateMsg = true): void {\r\n    if (deprecateMsg) {\r\n      console.warn(`[HTML5FS] HTML5FS.allocate() is deprecated and will be removed in the next major release. Please use 'HTML5FS.Create({type: ${this.type}, size: ${this.size}}, cb)' to create and allocate HTML5FS instances.`);\r\n    }\r\n    const success = (fs: FileSystem): void => {\r\n      this.fs = fs;\r\n      cb();\r\n    };\r\n    const error = (err: DOMException): void => {\r\n      cb(convertError(err, \"/\", true));\r\n    };\r\n    if (this.type === global.PERSISTENT) {\r\n      _requestQuota(this.type, this.size, (granted: number) => {\r\n        _getFS(this.type, granted, success, error);\r\n      }, error);\r\n    } else {\r\n      _getFS(this.type, this.size, success, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes everything in the FS. Used for testing.\r\n   * Karma clears the storage after you quit it but not between runs of the test\r\n   * suite, and the tests expect an empty FS every time.\r\n   */\r\n  public empty(mainCb: BFSOneArgCallback): void {\r\n    // Get a list of all entries in the root directory to delete them\r\n    this._readdir('/', (err: ApiError, entries?: Entry[]): void => {\r\n      if (err) {\r\n        console.error('Failed to empty FS');\r\n        mainCb(err);\r\n      } else {\r\n        // Called when every entry has been operated on\r\n        const finished = (er: any): void => {\r\n          if (err) {\r\n            console.error(\"Failed to empty FS\");\r\n            mainCb(err);\r\n          } else {\r\n            mainCb();\r\n          }\r\n        };\r\n        // Removes files and recursively removes directories\r\n        const deleteEntry = (entry: Entry, cb: (e?: any) => void): void => {\r\n          const succ = () => {\r\n            cb();\r\n          };\r\n          const error = (err: DOMException) => {\r\n            cb(convertError(err, entry.fullPath, !entry.isDirectory));\r\n          };\r\n          if (isDirectoryEntry(entry)) {\r\n            entry.removeRecursively(succ, error);\r\n          } else {\r\n            entry.remove(succ, error);\r\n          }\r\n        };\r\n        // Loop through the entries and remove them, then call the callback\r\n        // when they're all finished.\r\n        asyncEach(entries!, deleteEntry, finished);\r\n      }\r\n    });\r\n  }\r\n\r\n  public rename(oldPath: string, newPath: string, cb: BFSOneArgCallback): void {\r\n    let semaphore: number = 2;\r\n    let successCount: number = 0;\r\n    const root: DirectoryEntry = this.fs.root;\r\n    let currentPath: string = oldPath;\r\n    const error = (err: DOMException): void => {\r\n      if (--semaphore <= 0) {\r\n          cb(convertError(err, currentPath, false));\r\n      }\r\n    };\r\n    const success = (file: Entry): void => {\r\n      if (++successCount === 2) {\r\n        return cb(new ApiError(ErrorCode.EINVAL, \"Something was identified as both a file and a directory. This should never happen.\"));\r\n      }\r\n\r\n      // SPECIAL CASE: If newPath === oldPath, and the path exists, then\r\n      // this operation trivially succeeds.\r\n      if (oldPath === newPath) {\r\n        return cb();\r\n      }\r\n\r\n      // Get the new parent directory.\r\n      currentPath = path.dirname(newPath);\r\n      root.getDirectory(currentPath, {}, (parentDir: DirectoryEntry): void => {\r\n        currentPath = path.basename(newPath);\r\n        file.moveTo(parentDir, currentPath, (entry: Entry): void => { cb(); }, (err: DOMException): void => {\r\n          // SPECIAL CASE: If oldPath is a directory, and newPath is a\r\n          // file, rename should delete the file and perform the move.\r\n          if (file.isDirectory) {\r\n            currentPath = newPath;\r\n            // Unlink only works on files. Try to delete newPath.\r\n            this.unlink(newPath, (e?): void => {\r\n              if (e) {\r\n                // newPath is probably a directory.\r\n                error(err);\r\n              } else {\r\n                // Recur, now that newPath doesn't exist.\r\n                this.rename(oldPath, newPath, cb);\r\n              }\r\n            });\r\n          } else {\r\n            error(err);\r\n          }\r\n        });\r\n      }, error);\r\n    };\r\n\r\n    // We don't know if oldPath is a *file* or a *directory*, and there's no\r\n    // way to stat items. So launch both requests, see which one succeeds.\r\n    root.getFile(oldPath, {}, success, error);\r\n    root.getDirectory(oldPath, {}, success, error);\r\n  }\r\n\r\n  public stat(path: string, isLstat: boolean, cb: BFSCallback<Stats>): void {\r\n    // Throw an error if the entry doesn't exist, because then there's nothing\r\n    // to stat.\r\n    const opts = {\r\n      create: false\r\n    };\r\n    // Called when the path has been successfully loaded as a file.\r\n    const loadAsFile = (entry: FileEntry): void => {\r\n      const fileFromEntry = (file: File): void => {\r\n        const stat = new Stats(FileType.FILE, file.size);\r\n        cb(null, stat);\r\n      };\r\n      entry.file(fileFromEntry, failedToLoad);\r\n    };\r\n    // Called when the path has been successfully loaded as a directory.\r\n    const loadAsDir = (dir: DirectoryEntry): void => {\r\n      // Directory entry size can't be determined from the HTML5 FS API, and is\r\n      // implementation-dependant anyway, so a dummy value is used.\r\n      const size = 4096;\r\n      const stat = new Stats(FileType.DIRECTORY, size);\r\n      cb(null, stat);\r\n    };\r\n    // Called when the path couldn't be opened as a directory or a file.\r\n    const failedToLoad = (err: DOMException): void => {\r\n      cb(convertError(err, path, false /* Unknown / irrelevant */));\r\n    };\r\n    // Called when the path couldn't be opened as a file, but might still be a\r\n    // directory.\r\n    const failedToLoadAsFile = (): void => {\r\n      this.fs.root.getDirectory(path, opts, loadAsDir, failedToLoad);\r\n    };\r\n    // No method currently exists to determine whether a path refers to a\r\n    // directory or a file, so this implementation tries both and uses the first\r\n    // one that succeeds.\r\n    this.fs.root.getFile(path, opts, loadAsFile, failedToLoadAsFile);\r\n  }\r\n\r\n  public open(p: string, flags: FileFlag, mode: number, cb: BFSCallback<IFile>): void {\r\n    // XXX: err is a DOMError\r\n    const error = (err: any): void => {\r\n      if (err.name === 'InvalidModificationError' && flags.isExclusive()) {\r\n        cb(ApiError.EEXIST(p));\r\n      } else {\r\n        cb(convertError(err, p, false));\r\n      }\r\n    };\r\n\r\n    this.fs.root.getFile(p, {\r\n      create: flags.pathNotExistsAction() === ActionType.CREATE_FILE,\r\n      exclusive: flags.isExclusive()\r\n    }, (entry: FileEntry): void => {\r\n      // Try to fetch corresponding file.\r\n      entry.file((file: File): void => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = (event: Event): void => {\r\n          const bfsFile = this._makeFile(p, entry, flags, file, <ArrayBuffer> reader.result);\r\n          cb(null, bfsFile);\r\n        };\r\n        reader.onerror = (ev: Event) => {\r\n          error(reader.error);\r\n        };\r\n        reader.readAsArrayBuffer(file);\r\n      }, error);\r\n    }, error);\r\n  }\r\n\r\n  public unlink(path: string, cb: BFSOneArgCallback): void {\r\n    this._remove(path, cb, true);\r\n  }\r\n\r\n  public rmdir(path: string, cb: BFSOneArgCallback): void {\r\n    // Check if directory is non-empty, first.\r\n    this.readdir(path, (e, files?) => {\r\n      if (e) {\r\n        cb(e);\r\n      } else if (files!.length > 0) {\r\n        cb(ApiError.ENOTEMPTY(path));\r\n      } else {\r\n        this._remove(path, cb, false);\r\n      }\r\n    });\r\n  }\r\n\r\n  public mkdir(path: string, mode: number, cb: BFSOneArgCallback): void {\r\n    // Create the directory, but throw an error if it already exists, as per\r\n    // mkdir(1)\r\n    const opts = {\r\n      create: true,\r\n      exclusive: true\r\n    };\r\n    const success = (dir: DirectoryEntry): void => {\r\n      cb();\r\n    };\r\n    const error = (err: DOMException): void => {\r\n      cb(convertError(err, path, true));\r\n    };\r\n    this.fs.root.getDirectory(path, opts, success, error);\r\n  }\r\n\r\n  /**\r\n   * Map _readdir's list of `FileEntry`s to their names and return that.\r\n   */\r\n  public readdir(path: string, cb: BFSCallback<string[]>): void {\r\n    this._readdir(path, (e: ApiError, entries?: Entry[]): void => {\r\n      if (entries) {\r\n        const rv: string[] = [];\r\n        for (const entry of entries) {\r\n          rv.push(entry.name);\r\n        }\r\n        cb(null, rv);\r\n      } else {\r\n        return cb(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a BrowserFS object representing a File.\r\n   */\r\n  private _makeFile(path: string, entry: FileEntry, flag: FileFlag, stat: File, data: ArrayBuffer = new ArrayBuffer(0)): HTML5FSFile {\r\n    const stats = new Stats(FileType.FILE, stat.size);\r\n    const buffer = arrayBuffer2Buffer(data);\r\n    return new HTML5FSFile(this, entry, path, flag, stats, buffer);\r\n  }\r\n\r\n  /**\r\n   * Returns an array of `FileEntry`s. Used internally by empty and readdir.\r\n   */\r\n  private _readdir(path: string, cb: BFSCallback<Entry[]>): void {\r\n    const error = (err: DOMException): void => {\r\n      cb(convertError(err, path, true));\r\n    };\r\n    // Grab the requested directory.\r\n    this.fs.root.getDirectory(path, { create: false }, (dirEntry: DirectoryEntry) => {\r\n      const reader = dirEntry.createReader();\r\n      let entries: Entry[] = [];\r\n\r\n      // Call the reader.readEntries() until no more results are returned.\r\n      const readEntries = () => {\r\n        reader.readEntries(((results) => {\r\n          if (results.length) {\r\n            entries = entries.concat(_toArray(results));\r\n            readEntries();\r\n          } else {\r\n            cb(null, entries);\r\n          }\r\n        }), error);\r\n      };\r\n      readEntries();\r\n    }, error);\r\n  }\r\n\r\n  /**\r\n   * Delete a file or directory from the file system\r\n   * isFile should reflect which call was made to remove the it (`unlink` or\r\n   * `rmdir`). If this doesn't match what's actually at `path`, an error will be\r\n   * returned\r\n   */\r\n  private _remove(path: string, cb: BFSOneArgCallback, isFile: boolean): void {\r\n    const success = (entry: Entry): void => {\r\n      const succ = () => {\r\n        cb();\r\n      };\r\n      const err = (err: DOMException) => {\r\n        cb(convertError(err, path, !isFile));\r\n      };\r\n      entry.remove(succ, err);\r\n    };\r\n    const error = (err: DOMException): void => {\r\n      cb(convertError(err, path, !isFile));\r\n    };\r\n    // Deleting the entry, so don't create it\r\n    const opts = {\r\n      create: false\r\n    };\r\n\r\n    if (isFile) {\r\n      this.fs.root.getFile(path, opts, success, error);\r\n    } else {\r\n      this.fs.root.getDirectory(path, opts, success, error);\r\n    }\r\n  }\r\n}\r\n"]}