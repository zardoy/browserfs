{"version":3,"file":"MountableFileSystem.js","sourceRoot":"","sources":["../../../src/backend/MountableFileSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import { FileSystem, BaseFileSystem, BFSOneArgCallback, BFSCallback, FileSystemOptions } from '../core/file_system';\nimport InMemoryFileSystem from './InMemory';\nimport { ApiError, ErrorCode } from '../core/api_error';\nimport fs from '../core/node_fs';\nimport * as path from 'path';\nimport { mkdirpSync } from '../core/util';\nimport Cred from '../core/cred';\n/**\n * Configuration options for the MountableFileSystem backend.\n */\nexport interface MountableFileSystemOptions {\n\t// Locations of mount points. Can be empty.\n\t[mountPoint: string]: FileSystem;\n}\n\n/**\n * The MountableFileSystem allows you to mount multiple backend types or\n * multiple instantiations of the same backend into a single file system tree.\n * The file systems do not need to know about each other; all interactions are\n * automatically facilitated through this interface.\n *\n * For example, if a file system is mounted at /mnt/blah, and a request came in\n * for /mnt/blah/foo.txt, the file system would see a request for /foo.txt.\n *\n * You can mount file systems when you configure the file system:\n * ```javascript\n * BrowserFS.configure({\n *   fs: \"MountableFileSystem\",\n *   options: {\n *     '/data': { fs: 'HTTPRequest', options: { index: \"http://mysite.com/files/index.json\" } },\n *     '/home': { fs: 'LocalStorage' }\n *   }\n * }, function(e) {\n *\n * });\n * ```\n *\n * For advanced users, you can also mount file systems *after* MFS is constructed:\n * ```javascript\n * BrowserFS.FileSystem.HTTPRequest.Create({\n *   index: \"http://mysite.com/files/index.json\"\n * }, function(e, xhrfs) {\n *   BrowserFS.FileSystem.MountableFileSystem.Create({\n *     '/data': xhrfs\n *   }, function(e, mfs) {\n *     BrowserFS.initialize(mfs);\n *\n *     // Added after-the-fact...\n *     BrowserFS.FileSystem.LocalStorage.Create(function(e, lsfs) {\n *       mfs.mount('/home', lsfs);\n *     });\n *   });\n * });\n * ```\n *\n * Since MountableFileSystem simply proxies requests to mounted file systems, it supports all of the operations that the mounted file systems support.\n *\n * With no mounted file systems, `MountableFileSystem` acts as a simple `InMemory` filesystem.\n */\nexport default class MountableFileSystem extends BaseFileSystem implements FileSystem {\n\tpublic static readonly Name = 'MountableFileSystem';\n\n\tpublic static readonly Options: FileSystemOptions = {};\n\n\t/**\n\t * Creates a MountableFileSystem instance with the given options.\n\t */\n\tpublic static Create(opts: MountableFileSystemOptions, cb: BFSCallback<MountableFileSystem>): void {\n\t\tInMemoryFileSystem.Create({}, (e, imfs?) => {\n\t\t\tif (imfs) {\n\t\t\t\tconst fs = new MountableFileSystem(imfs);\n\t\t\t\ttry {\n\t\t\t\t\tfor (const mountPoint of Object.keys(opts)) {\n\t\t\t\t\t\tfs.mount(mountPoint, opts[mountPoint], Cred.Root);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn cb(e);\n\t\t\t\t}\n\t\t\t\tcb(null, fs);\n\t\t\t} else {\n\t\t\t\tcb(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic static CreateAsync(opts: MountableFileSystemOptions): Promise<MountableFileSystem> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.Create(opts, (error, fs) => {\n\t\t\t\tif (error || !fs) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(fs);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic static isAvailable(): boolean {\n\t\treturn true;\n\t}\n\n\tprivate mntMap: { [path: string]: FileSystem };\n\t// Contains the list of mount points in mntMap, sorted by string length in decreasing order.\n\t// Ensures that we scan the most specific mount points for a match first, which lets us\n\t// nest mount points.\n\tprivate mountList: string[] = [];\n\tprivate rootFs: FileSystem;\n\n\t/**\n\t * Creates a new, empty MountableFileSystem.\n\t */\n\tprivate constructor(rootFs: FileSystem) {\n\t\tsuper();\n\t\tthis.mntMap = {};\n\t\tthis.rootFs = rootFs;\n\t}\n\n\t/**\n\t * Mounts the file system at the given mount point.\n\t */\n\tpublic mount(mountPoint: string, fs: FileSystem, cred: Cred): void {\n\t\tif (mountPoint[0] !== '/') {\n\t\t\tmountPoint = `/${mountPoint}`;\n\t\t}\n\t\tmountPoint = path.resolve(mountPoint);\n\t\tif (this.mntMap[mountPoint]) {\n\t\t\tthrow new ApiError(ErrorCode.EINVAL, 'Mount point ' + mountPoint + ' is already in use.');\n\t\t}\n\t\tmkdirpSync(mountPoint, 0x1ff, cred, this.rootFs);\n\t\tthis.mntMap[mountPoint] = fs;\n\t\tthis.mountList.push(mountPoint);\n\t\tthis.mountList = this.mountList.sort((a, b) => b.length - a.length);\n\t}\n\n\tpublic umount(mountPoint: string, cred: Cred): void {\n\t\tif (mountPoint[0] !== '/') {\n\t\t\tmountPoint = `/${mountPoint}`;\n\t\t}\n\t\tmountPoint = path.resolve(mountPoint);\n\t\tif (!this.mntMap[mountPoint]) {\n\t\t\tthrow new ApiError(ErrorCode.EINVAL, 'Mount point ' + mountPoint + ' is already unmounted.');\n\t\t}\n\t\tdelete this.mntMap[mountPoint];\n\t\tthis.mountList.splice(this.mountList.indexOf(mountPoint), 1);\n\n\t\twhile (mountPoint !== '/') {\n\t\t\tif (this.rootFs.readdirSync(mountPoint, cred).length === 0) {\n\t\t\t\tthis.rootFs.rmdirSync(mountPoint, cred);\n\t\t\t\tmountPoint = path.dirname(mountPoint);\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the file system that the path points to.\n\t */\n\tpublic _getFs(path: string): { fs: FileSystem; path: string; mountPoint: string } {\n\t\tconst mountList = this.mountList,\n\t\t\tlen = mountList.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst mountPoint = mountList[i];\n\t\t\t// We know path is normalized, so it is a substring of the mount point.\n\t\t\tif (mountPoint.length <= path.length && path.indexOf(mountPoint) === 0) {\n\t\t\t\tpath = path.substr(mountPoint.length > 1 ? mountPoint.length : 0);\n\t\t\t\tif (path === '') {\n\t\t\t\t\tpath = '/';\n\t\t\t\t}\n\t\t\t\treturn { fs: this.mntMap[mountPoint], path: path, mountPoint: mountPoint };\n\t\t\t}\n\t\t}\n\t\t// Query our root file system.\n\t\treturn { fs: this.rootFs, path: path, mountPoint: '/' };\n\t}\n\n\t// Global information methods\n\n\tpublic getName(): string {\n\t\treturn MountableFileSystem.Name;\n\t}\n\n\tpublic diskSpace(path: string, cb: (total: number, free: number) => void): void {\n\t\tcb(0, 0);\n\t}\n\n\tpublic isReadOnly(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic supportsLinks(): boolean {\n\t\t// I'm not ready for cross-FS links yet.\n\t\treturn false;\n\t}\n\n\tpublic supportsProps(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic supportsSynch(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Fixes up error messages so they mention the mounted file location relative\n\t * to the MFS root, not to the particular FS's root.\n\t * Mutates the input error, and returns it.\n\t */\n\tpublic standardizeError(err: ApiError, path: string, realPath: string): ApiError {\n\t\tconst index = err.message.indexOf(path);\n\t\tif (index !== -1) {\n\t\t\terr.message = err.message.substr(0, index) + realPath + err.message.substr(index + path.length);\n\t\t\terr.path = realPath;\n\t\t}\n\t\treturn err;\n\t}\n\n\t// The following methods involve multiple file systems, and thus have custom\n\t// logic.\n\t// Note that we go through the Node API to use its robust default argument\n\t// processing.\n\n\tpublic rename(oldPath: string, newPath: string, cred: Cred, cb: BFSOneArgCallback): void {\n\t\t// Scenario 1: old and new are on same FS.\n\t\tconst fs1rv = this._getFs(oldPath);\n\t\tconst fs2rv = this._getFs(newPath);\n\t\tif (fs1rv.fs === fs2rv.fs) {\n\t\t\treturn fs1rv.fs.rename(fs1rv.path, fs2rv.path, cred, (e?: ApiError) => {\n\t\t\t\tif (e) {\n\t\t\t\t\tthis.standardizeError(this.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);\n\t\t\t\t}\n\t\t\t\tcb(e);\n\t\t\t});\n\t\t}\n\n\t\t// Scenario 2: Different file systems.\n\t\t// Read old file, write new file, delete old file.\n\t\treturn fs.readFile(oldPath, function (err: ApiError, data?: any) {\n\t\t\tif (err) {\n\t\t\t\treturn cb(err);\n\t\t\t}\n\t\t\tfs.writeFile(newPath, data, function (err: ApiError) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn cb(err);\n\t\t\t\t}\n\t\t\t\tfs.unlink(oldPath, cb);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic renameSync(oldPath: string, newPath: string, cred: Cred): void {\n\t\t// Scenario 1: old and new are on same FS.\n\t\tconst fs1rv = this._getFs(oldPath);\n\t\tconst fs2rv = this._getFs(newPath);\n\t\tif (fs1rv.fs === fs2rv.fs) {\n\t\t\ttry {\n\t\t\t\treturn fs1rv.fs.renameSync(fs1rv.path, fs2rv.path, cred);\n\t\t\t} catch (e) {\n\t\t\t\tthis.standardizeError(this.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\t// Scenario 2: Different file systems.\n\t\tconst data = fs.readFileSync(oldPath);\n\t\tfs.writeFileSync(newPath, data);\n\t\treturn fs.unlinkSync(oldPath);\n\t}\n\n\tpublic readdirSync(p: string, cred: Cred): string[] {\n\t\tconst fsInfo = this._getFs(p);\n\n\t\t// If null, rootfs did not have the directory\n\t\t// (or the target FS is the root fs).\n\t\tlet rv: string[] | null = null;\n\t\t// Mount points are all defined in the root FS.\n\t\t// Ensure that we list those, too.\n\t\tif (fsInfo.fs !== this.rootFs) {\n\t\t\ttry {\n\t\t\t\trv = this.rootFs.readdirSync(p, cred);\n\t\t\t} catch (e) {\n\t\t\t\t// Ignore.\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst rv2 = fsInfo.fs.readdirSync(fsInfo.path, cred);\n\t\t\tif (rv === null) {\n\t\t\t\treturn rv2;\n\t\t\t} else {\n\t\t\t\t// Filter out duplicates.\n\t\t\t\treturn rv2.concat(rv.filter(val => rv2.indexOf(val) === -1));\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (rv === null) {\n\t\t\t\tthrow this.standardizeError(e, fsInfo.path, p);\n\t\t\t} else {\n\t\t\t\t// The root FS had something.\n\t\t\t\treturn rv;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic readdir(p: string, cred: Cred, cb: BFSCallback<string[]>): void {\n\t\tconst fsInfo = this._getFs(p);\n\t\tfsInfo.fs.readdir(fsInfo.path, cred, (err, files) => {\n\t\t\tif (fsInfo.fs !== this.rootFs) {\n\t\t\t\ttry {\n\t\t\t\t\tconst rv = this.rootFs.readdirSync(p, cred);\n\t\t\t\t\tif (files) {\n\t\t\t\t\t\t// Filter out duplicates.\n\t\t\t\t\t\tfiles = files.concat(rv.filter(val => files!.indexOf(val) === -1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfiles = rv;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Root FS and target FS did not have directory.\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn cb(this.standardizeError(err, fsInfo.path, p));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (err) {\n\t\t\t\t// Root FS and target FS are the same, and did not have directory.\n\t\t\t\treturn cb(this.standardizeError(err, fsInfo.path, p));\n\t\t\t}\n\n\t\t\tcb(null, files);\n\t\t});\n\t}\n\n\tpublic realpathSync(p: string, cache: { [path: string]: string }, cred: Cred): string {\n\t\tconst fsInfo = this._getFs(p);\n\n\t\ttry {\n\t\t\tconst mountedPath = fsInfo.fs.realpathSync(fsInfo.path, {}, cred);\n\t\t\t// resolve is there to remove any trailing slash that may be present\n\t\t\treturn path.resolve(path.join(fsInfo.mountPoint, mountedPath));\n\t\t} catch (e) {\n\t\t\tthrow this.standardizeError(e, fsInfo.path, p);\n\t\t}\n\t}\n\n\tpublic realpath(p: string, cache: { [path: string]: string }, cred: Cred, cb: BFSCallback<string>): void {\n\t\tconst fsInfo = this._getFs(p);\n\n\t\tfsInfo.fs.realpath(fsInfo.path, {}, cred, (err, rv) => {\n\t\t\tif (err) {\n\t\t\t\tcb(this.standardizeError(err, fsInfo.path, p));\n\t\t\t} else {\n\t\t\t\t// resolve is there to remove any trailing slash that may be present\n\t\t\t\tcb(null, path.resolve(path.join(fsInfo.mountPoint, rv!)));\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic rmdirSync(p: string, cred: Cred): void {\n\t\tconst fsInfo = this._getFs(p);\n\t\tif (this._containsMountPt(p)) {\n\t\t\tthrow ApiError.ENOTEMPTY(p);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tfsInfo.fs.rmdirSync(fsInfo.path, cred);\n\t\t\t} catch (e) {\n\t\t\t\tthrow this.standardizeError(e, fsInfo.path, p);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic rmdir(p: string, cred: Cred, cb: BFSOneArgCallback): void {\n\t\tconst fsInfo = this._getFs(p);\n\t\tif (this._containsMountPt(p)) {\n\t\t\tcb(ApiError.ENOTEMPTY(p));\n\t\t} else {\n\t\t\tfsInfo.fs.rmdir(fsInfo.path, cred, (err?) => {\n\t\t\t\tcb(err ? this.standardizeError(err, fsInfo.path, p) : null);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if the given path contains a mount point.\n\t */\n\tprivate _containsMountPt(p: string): boolean {\n\t\tconst mountPoints = this.mountList,\n\t\t\tlen = mountPoints.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst pt = mountPoints[i];\n\t\t\tif (pt.length >= p.length && pt.slice(0, p.length) === p) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\n/**\n * Tricky: Define all of the functions that merely forward arguments to the\n * relevant file system, or return/throw an error.\n * Take advantage of the fact that the *first* argument is always the path, and\n * the *last* is the callback function (if async).\n * @todo Can use numArgs to make proxying more efficient.\n * @hidden\n */\nfunction defineFcn(name: string, isSync: boolean, numArgs: number): (...args: any[]) => any {\n\tif (isSync) {\n\t\treturn function (this: MountableFileSystem, ...args: any[]) {\n\t\t\tconst path = args[0];\n\t\t\tconst rv = this._getFs(path);\n\t\t\targs[0] = rv.path;\n\t\t\ttry {\n\t\t\t\treturn (<any>rv.fs)[name].apply(rv.fs, args);\n\t\t\t} catch (e) {\n\t\t\t\tthis.standardizeError(e, rv.path, path);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t};\n\t} else {\n\t\treturn function (this: MountableFileSystem, ...args: any[]) {\n\t\t\tconst path = args[0];\n\t\t\tconst rv = this._getFs(path);\n\t\t\targs[0] = rv.path;\n\t\t\tif (typeof args[args.length - 1] === 'function') {\n\t\t\t\tconst cb = args[args.length - 1];\n\t\t\t\targs[args.length - 1] = (...args: any[]) => {\n\t\t\t\t\tif (args.length > 0 && args[0] instanceof ApiError) {\n\t\t\t\t\t\tthis.standardizeError(args[0], rv.path, path);\n\t\t\t\t\t}\n\t\t\t\t\tcb.apply(null, args);\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn (<any>rv.fs)[name].apply(rv.fs, args);\n\t\t};\n\t}\n}\n\n/**\n * @hidden\n */\nconst fsCmdMap = [\n\t// 1 arg functions\n\t['exists', 'unlink', 'readlink'],\n\t// 2 arg functions\n\t['stat', 'mkdir', 'truncate'],\n\t// 3 arg functions\n\t['open', 'readFile', 'chmod', 'utimes'],\n\t// 4 arg functions\n\t['chown'],\n\t// 5 arg functions\n\t['writeFile', 'appendFile'],\n];\n\nfor (let i = 0; i < fsCmdMap.length; i++) {\n\tconst cmds = fsCmdMap[i];\n\tfor (const fnName of cmds) {\n\t\t(<any>MountableFileSystem.prototype)[fnName] = defineFcn(fnName, false, i + 1);\n\t\t(<any>MountableFileSystem.prototype)[fnName + 'Sync'] = defineFcn(fnName + 'Sync', true, i + 1);\n\t}\n}\n"]}