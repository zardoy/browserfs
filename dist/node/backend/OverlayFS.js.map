{"version":3,"file":"OverlayFS.js","sourceRoot":"","sources":["../../../src/backend/OverlayFS.ts"],"names":[],"mappings":"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","sourcesContent":["import { FileSystem, BaseFileSystem, BFSOneArgCallback, BFSCallback, FileSystemOptions } from '../core/file_system';\nimport { ApiError, ErrorCode } from '../core/api_error';\nimport { FileFlag, ActionType } from '../core/file_flag';\nimport { File } from '../core/file';\nimport { default as Stats } from '../core/stats';\nimport PreloadFile from '../generic/preload_file';\nimport LockedFS from '../generic/locked_fs';\nimport * as path from 'path';\nimport Cred from '../core/cred';\nimport type { Buffer } from 'buffer';\n/**\n * @hidden\n */\nconst deletionLogPath = '/.deletedFiles.log';\n\n/**\n * Given a read-only mode, makes it writable.\n * @hidden\n */\nfunction makeModeWritable(mode: number): number {\n\treturn 0o222 | mode;\n}\n\n/**\n * @hidden\n */\nfunction getFlag(f: string): FileFlag {\n\treturn FileFlag.getFileFlag(f);\n}\n\n/**\n * Overlays a RO file to make it writable.\n */\nclass OverlayFile extends PreloadFile<UnlockedOverlayFS> implements File {\n\tconstructor(fs: UnlockedOverlayFS, path: string, flag: FileFlag, stats: Stats, data: Buffer) {\n\t\tsuper(fs, path, flag, stats, data);\n\t}\n\n\tpublic sync(cb: BFSOneArgCallback): void {\n\t\tif (!this.isDirty()) {\n\t\t\tcb(null);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._fs._syncAsync(this, (err: ApiError) => {\n\t\t\tthis.resetDirty();\n\t\t\tcb(err);\n\t\t});\n\t}\n\n\tpublic syncSync(): void {\n\t\tif (this.isDirty()) {\n\t\t\tthis._fs._syncSync(this);\n\t\t\tthis.resetDirty();\n\t\t}\n\t}\n\n\tpublic close(cb: BFSOneArgCallback): void {\n\t\tthis.sync(cb);\n\t}\n\n\tpublic closeSync(): void {\n\t\tthis.syncSync();\n\t}\n}\n\n/**\n * *INTERNAL, DO NOT USE DIRECTLY!*\n *\n * Core OverlayFS class that contains no locking whatsoever. We wrap these objects\n * in a LockedFS to prevent races.\n */\nexport class UnlockedOverlayFS extends BaseFileSystem implements FileSystem {\n\tpublic static isAvailable(): boolean {\n\t\treturn true;\n\t}\n\n\tprivate _writable: FileSystem;\n\tprivate _readable: FileSystem;\n\tprivate _isInitialized: boolean = false;\n\tprivate _initializeCallbacks: BFSOneArgCallback[] = [];\n\tprivate _deletedFiles: { [path: string]: boolean } = {};\n\tprivate _deleteLog: string = '';\n\t// If 'true', we have scheduled a delete log update.\n\tprivate _deleteLogUpdatePending: boolean = false;\n\t// If 'true', a delete log update is needed after the scheduled delete log\n\t// update finishes.\n\tprivate _deleteLogUpdateNeeded: boolean = false;\n\t// If there was an error updating the delete log...\n\tprivate _deleteLogError: ApiError | null = null;\n\n\tconstructor(writable: FileSystem, readable: FileSystem) {\n\t\tsuper();\n\t\tthis._writable = writable;\n\t\tthis._readable = readable;\n\t\tif (this._writable.isReadOnly()) {\n\t\t\tthrow new ApiError(ErrorCode.EINVAL, 'Writable file system must be writable.');\n\t\t}\n\t}\n\n\tpublic getOverlayedFileSystems(): { readable: FileSystem; writable: FileSystem } {\n\t\treturn {\n\t\t\treadable: this._readable,\n\t\t\twritable: this._writable,\n\t\t};\n\t}\n\n\tpublic _syncAsync(file: PreloadFile<UnlockedOverlayFS>, cb: BFSOneArgCallback): void {\n\t\tconst stats = file.getStats();\n\t\tthis.createParentDirectoriesAsync(file.getPath(), stats.getCred(0, 0), (err?: ApiError) => {\n\t\t\tif (err) {\n\t\t\t\treturn cb(err);\n\t\t\t}\n\t\t\tthis._writable.writeFile(file.getPath(), file.getBuffer(), null, getFlag('w'), stats.mode, stats.getCred(0, 0), cb);\n\t\t});\n\t}\n\n\tpublic _syncSync(file: PreloadFile<UnlockedOverlayFS>): void {\n\t\tconst stats = file.getStats();\n\t\tthis.createParentDirectories(file.getPath(), stats.getCred(0, 0));\n\t\tthis._writable.writeFileSync(file.getPath(), file.getBuffer(), null, getFlag('w'), stats.mode, stats.getCred(0, 0));\n\t}\n\n\tpublic getName() {\n\t\treturn OverlayFS.Name;\n\t}\n\n\t/**\n\t * **INTERNAL METHOD**\n\t *\n\t * Called once to load up metadata stored on the writable file system.\n\t */\n\tpublic _initialize(cb: BFSOneArgCallback): void {\n\t\tconst callbackArray = this._initializeCallbacks;\n\n\t\tconst end = (e?: ApiError): void => {\n\t\t\tthis._isInitialized = !e;\n\t\t\tthis._initializeCallbacks = [];\n\t\t\tcallbackArray.forEach(cb => cb(e));\n\t\t};\n\n\t\t// if we're already initialized, immediately invoke the callback\n\t\tif (this._isInitialized) {\n\t\t\treturn cb();\n\t\t}\n\n\t\tcallbackArray.push(cb);\n\t\t// The first call to initialize initializes, the rest wait for it to complete.\n\t\tif (callbackArray.length !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Read deletion log, process into metadata.\n\t\tthis._writable.readFile(deletionLogPath, 'utf8', getFlag('r'), Cred.Root, (err: ApiError, data?: string) => {\n\t\t\tif (err) {\n\t\t\t\t// ENOENT === Newly-instantiated file system, and thus empty log.\n\t\t\t\tif (err.errno !== ErrorCode.ENOENT) {\n\t\t\t\t\treturn end(err);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._deleteLog = data!;\n\t\t\t}\n\t\t\tthis._reparseDeletionLog();\n\t\t\tend();\n\t\t});\n\t}\n\n\tpublic isReadOnly(): boolean {\n\t\treturn false;\n\t}\n\tpublic supportsSynch(): boolean {\n\t\treturn this._readable.supportsSynch() && this._writable.supportsSynch();\n\t}\n\tpublic supportsLinks(): boolean {\n\t\treturn false;\n\t}\n\tpublic supportsProps(): boolean {\n\t\treturn this._readable.supportsProps() && this._writable.supportsProps();\n\t}\n\n\tpublic getDeletionLog(): string {\n\t\treturn this._deleteLog;\n\t}\n\n\tpublic restoreDeletionLog(log: string, cred: Cred): void {\n\t\tthis._deleteLog = log;\n\t\tthis._reparseDeletionLog();\n\t\tthis.updateLog('', cred);\n\t}\n\n\tpublic rename(oldPath: string, newPath: string, cred: Cred, cb: BFSOneArgCallback): void {\n\t\tif (!this.checkInitAsync(cb) || this.checkPathAsync(oldPath, cb) || this.checkPathAsync(newPath, cb)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (oldPath === deletionLogPath || newPath === deletionLogPath) {\n\t\t\treturn cb(ApiError.EPERM('Cannot rename deletion log.'));\n\t\t}\n\n\t\t// nothing to do if paths match\n\t\tif (oldPath === newPath) {\n\t\t\treturn cb();\n\t\t}\n\n\t\tthis.stat(oldPath, false, cred, (oldErr: ApiError, oldStats?: Stats) => {\n\t\t\tif (oldErr) {\n\t\t\t\treturn cb(oldErr);\n\t\t\t}\n\n\t\t\treturn this.stat(newPath, false, cred, (newErr: ApiError, newStats?: Stats) => {\n\t\t\t\tconst self = this;\n\t\t\t\t// precondition: both oldPath and newPath exist and are dirs.\n\t\t\t\t// decreases: |files|\n\t\t\t\t// Need to move *every file/folder* currently stored on\n\t\t\t\t// readable to its new location on writable.\n\t\t\t\tfunction copyDirContents(files: string[]): void {\n\t\t\t\t\tconst file = files.shift();\n\t\t\t\t\tif (!file) {\n\t\t\t\t\t\treturn cb();\n\t\t\t\t\t}\n\n\t\t\t\t\tconst oldFile = path.resolve(oldPath, file);\n\t\t\t\t\tconst newFile = path.resolve(newPath, file);\n\n\t\t\t\t\t// Recursion! Should work for any nested files / folders.\n\t\t\t\t\tself.rename(oldFile, newFile, cred, (err?: ApiError) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn cb(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcopyDirContents(files);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tlet mode = 0o777;\n\n\t\t\t\t// from linux's rename(2) manpage: oldpath can specify a\n\t\t\t\t// directory.  In this case, newpath must either not exist, or\n\t\t\t\t// it must specify an empty directory.\n\t\t\t\tif (oldStats!.isDirectory()) {\n\t\t\t\t\tif (newErr) {\n\t\t\t\t\t\tif (newErr.errno !== ErrorCode.ENOENT) {\n\t\t\t\t\t\t\treturn cb(newErr);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn this._writable.exists(oldPath, cred, (exists: boolean) => {\n\t\t\t\t\t\t\t// simple case - both old and new are on the writable layer\n\t\t\t\t\t\t\tif (exists) {\n\t\t\t\t\t\t\t\treturn this._writable.rename(oldPath, newPath, cred, cb);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis._writable.mkdir(newPath, mode, cred, (mkdirErr?: ApiError) => {\n\t\t\t\t\t\t\t\tif (mkdirErr) {\n\t\t\t\t\t\t\t\t\treturn cb(mkdirErr);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis._readable.readdir(oldPath, cred, (err: ApiError, files?: string[]) => {\n\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\treturn cb();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcopyDirContents(files!);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tmode = newStats!.mode;\n\t\t\t\t\tif (!newStats!.isDirectory()) {\n\t\t\t\t\t\treturn cb(ApiError.ENOTDIR(newPath));\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.readdir(newPath, cred, (readdirErr: ApiError, files?: string[]) => {\n\t\t\t\t\t\tif (files && files.length) {\n\t\t\t\t\t\t\treturn cb(ApiError.ENOTEMPTY(newPath));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._readable.readdir(oldPath, cred, (err: ApiError, files?: string[]) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treturn cb();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcopyDirContents(files!);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (newStats && newStats.isDirectory()) {\n\t\t\t\t\treturn cb(ApiError.EISDIR(newPath));\n\t\t\t\t}\n\n\t\t\t\tthis.readFile(oldPath, null, getFlag('r'), cred, (err: ApiError, data?: any) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn cb(err);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.writeFile(newPath, data, null, getFlag('w'), oldStats!.mode, cred, (err: ApiError) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn cb(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.unlink(oldPath, cred, cb);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic renameSync(oldPath: string, newPath: string, cred: Cred): void {\n\t\tthis.checkInitialized();\n\t\tthis.checkPath(oldPath);\n\t\tthis.checkPath(newPath);\n\t\tif (oldPath === deletionLogPath || newPath === deletionLogPath) {\n\t\t\tthrow ApiError.EPERM('Cannot rename deletion log.');\n\t\t}\n\t\t// Write newPath using oldPath's contents, delete oldPath.\n\t\tconst oldStats = this.statSync(oldPath, false, cred);\n\t\tif (oldStats.isDirectory()) {\n\t\t\t// Optimization: Don't bother moving if old === new.\n\t\t\tif (oldPath === newPath) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet mode = 0o777;\n\t\t\tif (this.existsSync(newPath, cred)) {\n\t\t\t\tconst stats = this.statSync(newPath, false, cred);\n\t\t\t\tmode = stats.mode;\n\t\t\t\tif (stats.isDirectory()) {\n\t\t\t\t\tif (this.readdirSync(newPath, cred).length > 0) {\n\t\t\t\t\t\tthrow ApiError.ENOTEMPTY(newPath);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow ApiError.ENOTDIR(newPath);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take care of writable first. Move any files there, or create an empty directory\n\t\t\t// if it doesn't exist.\n\t\t\tif (this._writable.existsSync(oldPath, cred)) {\n\t\t\t\tthis._writable.renameSync(oldPath, newPath, cred);\n\t\t\t} else if (!this._writable.existsSync(newPath, cred)) {\n\t\t\t\tthis._writable.mkdirSync(newPath, mode, cred);\n\t\t\t}\n\n\t\t\t// Need to move *every file/folder* currently stored on readable to its new location\n\t\t\t// on writable.\n\t\t\tif (this._readable.existsSync(oldPath, cred)) {\n\t\t\t\tthis._readable.readdirSync(oldPath, cred).forEach(name => {\n\t\t\t\t\t// Recursion! Should work for any nested files / folders.\n\t\t\t\t\tthis.renameSync(path.resolve(oldPath, name), path.resolve(newPath, name), cred);\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.existsSync(newPath, cred) && this.statSync(newPath, false, cred).isDirectory()) {\n\t\t\t\tthrow ApiError.EISDIR(newPath);\n\t\t\t}\n\n\t\t\tthis.writeFileSync(newPath, this.readFileSync(oldPath, null, getFlag('r'), cred), null, getFlag('w'), oldStats.mode, cred);\n\t\t}\n\n\t\tif (oldPath !== newPath && this.existsSync(oldPath, cred)) {\n\t\t\tthis.unlinkSync(oldPath, cred);\n\t\t}\n\t}\n\n\tpublic stat(p: string, isLstat: boolean, cred: Cred, cb: BFSCallback<Stats>): void {\n\t\tif (!this.checkInitAsync(cb)) {\n\t\t\treturn;\n\t\t}\n\t\tthis._writable.stat(p, isLstat, cred, (err: ApiError, stat?: Stats) => {\n\t\t\tif (err && err.errno === ErrorCode.ENOENT) {\n\t\t\t\tif (this._deletedFiles[p]) {\n\t\t\t\t\tcb(ApiError.ENOENT(p));\n\t\t\t\t}\n\t\t\t\tthis._readable.stat(p, isLstat, cred, (err: ApiError, stat?: Stats) => {\n\t\t\t\t\tif (stat) {\n\t\t\t\t\t\t// Make the oldStat's mode writable. Preserve the topmost\n\t\t\t\t\t\t// part of the mode, which specifies if it is a file or a\n\t\t\t\t\t\t// directory.\n\t\t\t\t\t\tstat = Stats.clone(stat);\n\t\t\t\t\t\tstat.mode = makeModeWritable(stat.mode);\n\t\t\t\t\t}\n\t\t\t\t\tcb(err, stat);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcb(err, stat);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic statSync(p: string, isLstat: boolean, cred: Cred): Stats {\n\t\tthis.checkInitialized();\n\t\ttry {\n\t\t\treturn this._writable.statSync(p, isLstat, cred);\n\t\t} catch (e) {\n\t\t\tif (this._deletedFiles[p]) {\n\t\t\t\tthrow ApiError.ENOENT(p);\n\t\t\t}\n\t\t\tconst oldStat = Stats.clone(this._readable.statSync(p, isLstat, cred));\n\t\t\t// Make the oldStat's mode writable. Preserve the topmost part of the\n\t\t\t// mode, which specifies if it is a file or a directory.\n\t\t\toldStat.mode = makeModeWritable(oldStat.mode);\n\t\t\treturn oldStat;\n\t\t}\n\t}\n\n\tpublic open(p: string, flag: FileFlag, mode: number, cred: Cred, cb: BFSCallback<File>): void {\n\t\tif (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.stat(p, false, cred, (err: ApiError, stats?: Stats) => {\n\t\t\tif (stats) {\n\t\t\t\tswitch (flag.pathExistsAction()) {\n\t\t\t\t\tcase ActionType.TRUNCATE_FILE:\n\t\t\t\t\t\treturn this.createParentDirectoriesAsync(p, cred, (err?: ApiError) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treturn cb(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._writable.open(p, flag, mode, cred, cb);\n\t\t\t\t\t\t});\n\t\t\t\t\tcase ActionType.NOP:\n\t\t\t\t\t\treturn this._writable.exists(p, cred, (exists: boolean) => {\n\t\t\t\t\t\t\tif (exists) {\n\t\t\t\t\t\t\t\tthis._writable.open(p, flag, mode, cred, cb);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// at this point we know the stats object we got is from\n\t\t\t\t\t\t\t\t// the readable FS.\n\t\t\t\t\t\t\t\tstats = Stats.clone(stats!);\n\t\t\t\t\t\t\t\tstats.mode = mode;\n\t\t\t\t\t\t\t\tthis._readable.readFile(p, null, getFlag('r'), cred, (readFileErr: ApiError, data?: any) => {\n\t\t\t\t\t\t\t\t\tif (readFileErr) {\n\t\t\t\t\t\t\t\t\t\treturn cb(readFileErr);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (stats!.size === -1) {\n\t\t\t\t\t\t\t\t\t\tstats!.size = data.length;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconst f = new OverlayFile(this, p, flag, stats!, data);\n\t\t\t\t\t\t\t\t\tcb(null, f);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn cb(ApiError.EEXIST(p));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tswitch (flag.pathNotExistsAction()) {\n\t\t\t\t\tcase ActionType.CREATE_FILE:\n\t\t\t\t\t\treturn this.createParentDirectoriesAsync(p, cred, (err?: ApiError) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treturn cb(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn this._writable.open(p, flag, mode, cred, cb);\n\t\t\t\t\t\t});\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn cb(ApiError.ENOENT(p));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic openSync(p: string, flag: FileFlag, mode: number, cred: Cred): File {\n\t\tthis.checkInitialized();\n\t\tthis.checkPath(p);\n\t\tif (p === deletionLogPath) {\n\t\t\tthrow ApiError.EPERM('Cannot open deletion log.');\n\t\t}\n\t\tif (this.existsSync(p, cred)) {\n\t\t\tswitch (flag.pathExistsAction()) {\n\t\t\t\tcase ActionType.TRUNCATE_FILE:\n\t\t\t\t\tthis.createParentDirectories(p, cred);\n\t\t\t\t\treturn this._writable.openSync(p, flag, mode, cred);\n\t\t\t\tcase ActionType.NOP:\n\t\t\t\t\tif (this._writable.existsSync(p, cred)) {\n\t\t\t\t\t\treturn this._writable.openSync(p, flag, mode, cred);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Create an OverlayFile.\n\t\t\t\t\t\tconst buf = this._readable.readFileSync(p, null, getFlag('r'), cred);\n\t\t\t\t\t\tconst stats = Stats.clone(this._readable.statSync(p, false, cred));\n\t\t\t\t\t\tstats.mode = mode;\n\t\t\t\t\t\treturn new OverlayFile(this, p, flag, stats, buf);\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthrow ApiError.EEXIST(p);\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (flag.pathNotExistsAction()) {\n\t\t\t\tcase ActionType.CREATE_FILE:\n\t\t\t\t\tthis.createParentDirectories(p, cred);\n\t\t\t\t\treturn this._writable.openSync(p, flag, mode, cred);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow ApiError.ENOENT(p);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic unlink(p: string, cred: Cred, cb: BFSOneArgCallback): void {\n\t\tif (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.exists(p, cred, (exists: boolean) => {\n\t\t\tif (!exists) {\n\t\t\t\treturn cb(ApiError.ENOENT(p));\n\t\t\t}\n\n\t\t\tthis._writable.exists(p, cred, (writableExists: boolean) => {\n\t\t\t\tif (writableExists) {\n\t\t\t\t\treturn this._writable.unlink(p, cred, (err: ApiError) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn cb(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.exists(p, cred, (readableExists: boolean) => {\n\t\t\t\t\t\t\tif (readableExists) {\n\t\t\t\t\t\t\t\tthis.deletePath(p, cred);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcb(null);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// if this only exists on the readable FS, add it to the\n\t\t\t\t\t// delete map.\n\t\t\t\t\tthis.deletePath(p, cred);\n\t\t\t\t\tcb(null);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic unlinkSync(p: string, cred: Cred): void {\n\t\tthis.checkInitialized();\n\t\tthis.checkPath(p);\n\t\tif (this.existsSync(p, cred)) {\n\t\t\tif (this._writable.existsSync(p, cred)) {\n\t\t\t\tthis._writable.unlinkSync(p, cred);\n\t\t\t}\n\n\t\t\t// if it still exists add to the delete log\n\t\t\tif (this.existsSync(p, cred)) {\n\t\t\t\tthis.deletePath(p, cred);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow ApiError.ENOENT(p);\n\t\t}\n\t}\n\n\tpublic rmdir(p: string, cred: Cred, cb: BFSOneArgCallback): void {\n\t\tif (!this.checkInitAsync(cb)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rmdirLower = (): void => {\n\t\t\tthis.readdir(p, cred, (err: ApiError, files: string[]): void => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn cb(err);\n\t\t\t\t}\n\n\t\t\t\tif (files.length) {\n\t\t\t\t\treturn cb(ApiError.ENOTEMPTY(p));\n\t\t\t\t}\n\n\t\t\t\tthis.deletePath(p, cred);\n\t\t\t\tcb(null);\n\t\t\t});\n\t\t};\n\n\t\tthis.exists(p, cred, (exists: boolean) => {\n\t\t\tif (!exists) {\n\t\t\t\treturn cb(ApiError.ENOENT(p));\n\t\t\t}\n\n\t\t\tthis._writable.exists(p, cred, (writableExists: boolean) => {\n\t\t\t\tif (writableExists) {\n\t\t\t\t\tthis._writable.rmdir(p, cred, (err: ApiError) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn cb(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._readable.exists(p, cred, (readableExists: boolean) => {\n\t\t\t\t\t\t\tif (readableExists) {\n\t\t\t\t\t\t\t\trmdirLower();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\trmdirLower();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic rmdirSync(p: string, cred: Cred): void {\n\t\tthis.checkInitialized();\n\t\tif (this.existsSync(p, cred)) {\n\t\t\tif (this._writable.existsSync(p, cred)) {\n\t\t\t\tthis._writable.rmdirSync(p, cred);\n\t\t\t}\n\t\t\tif (this.existsSync(p, cred)) {\n\t\t\t\t// Check if directory is empty.\n\t\t\t\tif (this.readdirSync(p, cred).length > 0) {\n\t\t\t\t\tthrow ApiError.ENOTEMPTY(p);\n\t\t\t\t} else {\n\t\t\t\t\tthis.deletePath(p, cred);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow ApiError.ENOENT(p);\n\t\t}\n\t}\n\n\tpublic mkdir(p: string, mode: number, cred: Cred, cb: BFSCallback<Stats>): void {\n\t\tif (!this.checkInitAsync(cb)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.exists(p, cred, (exists: boolean) => {\n\t\t\tif (exists) {\n\t\t\t\treturn cb(ApiError.EEXIST(p));\n\t\t\t}\n\n\t\t\t// The below will throw should any of the parent directories\n\t\t\t// fail to exist on _writable.\n\t\t\tthis.createParentDirectoriesAsync(p, cred, (err: ApiError) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn cb(err);\n\t\t\t\t}\n\t\t\t\tthis._writable.mkdir(p, mode, cred, cb);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic mkdirSync(p: string, mode: number, cred: Cred): void {\n\t\tthis.checkInitialized();\n\t\tif (this.existsSync(p, cred)) {\n\t\t\tthrow ApiError.EEXIST(p);\n\t\t} else {\n\t\t\t// The below will throw should any of the parent directories fail to exist\n\t\t\t// on _writable.\n\t\t\tthis.createParentDirectories(p, cred);\n\t\t\tthis._writable.mkdirSync(p, mode, cred);\n\t\t}\n\t}\n\n\tpublic readdir(p: string, cred: Cred, cb: BFSCallback<string[]>): void {\n\t\tif (!this.checkInitAsync(cb)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.stat(p, false, cred, (err: ApiError, dirStats?: Stats) => {\n\t\t\tif (err) {\n\t\t\t\treturn cb(err);\n\t\t\t}\n\n\t\t\tif (!dirStats!.isDirectory()) {\n\t\t\t\treturn cb(ApiError.ENOTDIR(p));\n\t\t\t}\n\n\t\t\tthis._writable.readdir(p, cred, (err: ApiError, wFiles: string[]) => {\n\t\t\t\tif (err && err.code !== 'ENOENT') {\n\t\t\t\t\treturn cb(err);\n\t\t\t\t} else if (err || !wFiles) {\n\t\t\t\t\twFiles = [];\n\t\t\t\t}\n\n\t\t\t\tthis._readable.readdir(p, cred, (err: ApiError, rFiles: string[]) => {\n\t\t\t\t\t// if the directory doesn't exist on the lower FS set rFiles\n\t\t\t\t\t// here to simplify the following code.\n\t\t\t\t\tif (err || !rFiles) {\n\t\t\t\t\t\trFiles = [];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Readdir in both, check delete log on read-only file system's files, merge, return.\n\t\t\t\t\tconst seenMap: { [name: string]: boolean } = {};\n\t\t\t\t\tconst filtered: string[] = wFiles.concat(rFiles.filter((fPath: string) => !this._deletedFiles[`${p}/${fPath}`])).filter((fPath: string) => {\n\t\t\t\t\t\t// Remove duplicates.\n\t\t\t\t\t\tconst result = !seenMap[fPath];\n\t\t\t\t\t\tseenMap[fPath] = true;\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t});\n\t\t\t\t\tcb(null, filtered);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic readdirSync(p: string, cred: Cred): string[] {\n\t\tthis.checkInitialized();\n\t\tconst dirStats = this.statSync(p, false, cred);\n\t\tif (!dirStats.isDirectory()) {\n\t\t\tthrow ApiError.ENOTDIR(p);\n\t\t}\n\n\t\t// Readdir in both, check delete log on RO file system's listing, merge, return.\n\t\tlet contents: string[] = [];\n\t\ttry {\n\t\t\tcontents = contents.concat(this._writable.readdirSync(p, cred));\n\t\t} catch (e) {\n\t\t\t// NOP.\n\t\t}\n\t\ttry {\n\t\t\tcontents = contents.concat(this._readable.readdirSync(p, cred).filter((fPath: string) => !this._deletedFiles[`${p}/${fPath}`]));\n\t\t} catch (e) {\n\t\t\t// NOP.\n\t\t}\n\t\tconst seenMap: { [name: string]: boolean } = {};\n\t\treturn contents.filter((fileP: string) => {\n\t\t\tconst result = !seenMap[fileP];\n\t\t\tseenMap[fileP] = true;\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic exists(p: string, cred: Cred, cb: (exists: boolean) => void): void {\n\t\t// Cannot pass an error back to callback, so throw an exception instead\n\t\t// if not initialized.\n\t\tthis.checkInitialized();\n\t\tthis._writable.exists(p, cred, (existsWritable: boolean) => {\n\t\t\tif (existsWritable) {\n\t\t\t\treturn cb(true);\n\t\t\t}\n\n\t\t\tthis._readable.exists(p, cred, (existsReadable: boolean) => {\n\t\t\t\tcb(existsReadable && this._deletedFiles[p] !== true);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic existsSync(p: string, cred: Cred): boolean {\n\t\tthis.checkInitialized();\n\t\treturn this._writable.existsSync(p, cred) || (this._readable.existsSync(p, cred) && this._deletedFiles[p] !== true);\n\t}\n\n\tpublic chmod(p: string, isLchmod: boolean, mode: number, cred: Cred, cb: BFSOneArgCallback): void {\n\t\tif (!this.checkInitAsync(cb)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.operateOnWritableAsync(p, cred, (err?: ApiError) => {\n\t\t\tif (err) {\n\t\t\t\treturn cb(err);\n\t\t\t} else {\n\t\t\t\tthis._writable.chmod(p, isLchmod, mode, cred, cb);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic chmodSync(p: string, isLchmod: boolean, mode: number, cred: Cred): void {\n\t\tthis.checkInitialized();\n\t\tthis.operateOnWritable(p, cred, () => {\n\t\t\tthis._writable.chmodSync(p, isLchmod, mode, cred);\n\t\t});\n\t}\n\n\tpublic chown(p: string, isLchmod: boolean, new_uid: number, new_gid: number, cred: Cred, cb: BFSOneArgCallback): void {\n\t\tif (!this.checkInitAsync(cb)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.operateOnWritableAsync(p, cred, (err?: ApiError) => {\n\t\t\tif (err) {\n\t\t\t\treturn cb(err);\n\t\t\t} else {\n\t\t\t\tthis._writable.chown(p, isLchmod, new_uid, new_gid, cred, cb);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic chownSync(p: string, isLchown: boolean, new_uid: number, new_gid: number, cred: Cred): void {\n\t\tthis.checkInitialized();\n\t\tthis.operateOnWritable(p, cred, () => {\n\t\t\tthis._writable.chownSync(p, isLchown, new_uid, new_gid, cred);\n\t\t});\n\t}\n\n\tpublic utimes(p: string, atime: Date, mtime: Date, cred: Cred, cb: BFSOneArgCallback): void {\n\t\tif (!this.checkInitAsync(cb)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.operateOnWritableAsync(p, cred, (err?: ApiError) => {\n\t\t\tif (err) {\n\t\t\t\treturn cb(err);\n\t\t\t} else {\n\t\t\t\tthis._writable.utimes(p, atime, mtime, cred, cb);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic utimesSync(p: string, atime: Date, mtime: Date, cred: Cred): void {\n\t\tthis.checkInitialized();\n\t\tthis.operateOnWritable(p, cred, () => {\n\t\t\tthis._writable.utimesSync(p, atime, mtime, cred);\n\t\t});\n\t}\n\n\tprivate deletePath(p: string, cred: Cred): void {\n\t\tthis._deletedFiles[p] = true;\n\t\tthis.updateLog(`d${p}\\n`, cred);\n\t}\n\n\tprivate updateLog(addition: string, cred: Cred) {\n\t\tthis._deleteLog += addition;\n\t\tif (this._deleteLogUpdatePending) {\n\t\t\tthis._deleteLogUpdateNeeded = true;\n\t\t} else {\n\t\t\tthis._deleteLogUpdatePending = true;\n\t\t\tthis._writable.writeFile(deletionLogPath, this._deleteLog, 'utf8', FileFlag.getFileFlag('w'), 0o644, cred, e => {\n\t\t\t\tthis._deleteLogUpdatePending = false;\n\t\t\t\tif (e) {\n\t\t\t\t\tthis._deleteLogError = e;\n\t\t\t\t} else if (this._deleteLogUpdateNeeded) {\n\t\t\t\t\tthis._deleteLogUpdateNeeded = false;\n\t\t\t\t\tthis.updateLog('', cred);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _reparseDeletionLog(): void {\n\t\tthis._deletedFiles = {};\n\t\tthis._deleteLog.split('\\n').forEach((path: string) => {\n\t\t\t// If the log entry begins w/ 'd', it's a deletion.\n\t\t\tthis._deletedFiles[path.slice(1)] = path.slice(0, 1) === 'd';\n\t\t});\n\t}\n\n\tprivate checkInitialized(): void {\n\t\tif (!this._isInitialized) {\n\t\t\tthrow new ApiError(ErrorCode.EPERM, 'OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.');\n\t\t} else if (this._deleteLogError !== null) {\n\t\t\tconst e = this._deleteLogError;\n\t\t\tthis._deleteLogError = null;\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprivate checkInitAsync(cb: BFSOneArgCallback): boolean {\n\t\tif (!this._isInitialized) {\n\t\t\tcb(new ApiError(ErrorCode.EPERM, 'OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.'));\n\t\t\treturn false;\n\t\t} else if (this._deleteLogError !== null) {\n\t\t\tconst e = this._deleteLogError;\n\t\t\tthis._deleteLogError = null;\n\t\t\tcb(e);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate checkPath(p: string): void {\n\t\tif (p === deletionLogPath) {\n\t\t\tthrow ApiError.EPERM(p);\n\t\t}\n\t}\n\n\tprivate checkPathAsync(p: string, cb: BFSOneArgCallback): boolean {\n\t\tif (p === deletionLogPath) {\n\t\t\tcb(ApiError.EPERM(p));\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate createParentDirectoriesAsync(p: string, cred: Cred, cb: BFSOneArgCallback): void {\n\t\tlet parent = path.dirname(p);\n\t\tconst toCreate: string[] = [];\n\t\tconst self = this;\n\n\t\tthis._writable.stat(parent, false, cred, statDone);\n\t\tfunction statDone(err: ApiError, stat?: Stats): void {\n\t\t\tif (err) {\n\t\t\t\tif (parent === '/') {\n\t\t\t\t\tcb(new ApiError(ErrorCode.EBUSY, 'Invariant failed: root does not exist!'));\n\t\t\t\t} else {\n\t\t\t\t\ttoCreate.push(parent);\n\t\t\t\t\tparent = path.dirname(parent);\n\t\t\t\t\tself._writable.stat(parent, false, cred, statDone);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcreateParents();\n\t\t\t}\n\t\t}\n\n\t\tfunction createParents(): void {\n\t\t\tif (!toCreate.length) {\n\t\t\t\treturn cb();\n\t\t\t}\n\n\t\t\tconst dir = toCreate.pop();\n\t\t\tself._readable.stat(dir!, false, cred, (err: ApiError, stats?: Stats) => {\n\t\t\t\t// stop if we couldn't read the dir\n\t\t\t\tif (!stats) {\n\t\t\t\t\treturn cb();\n\t\t\t\t}\n\n\t\t\t\tself._writable.mkdir(dir!, stats.mode, cred, (err?: ApiError) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn cb(err);\n\t\t\t\t\t}\n\t\t\t\t\tcreateParents();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * With the given path, create the needed parent directories on the writable storage\n\t * should they not exist. Use modes from the read-only storage.\n\t */\n\tprivate createParentDirectories(p: string, cred: Cred): void {\n\t\tlet parent = path.dirname(p),\n\t\t\ttoCreate: string[] = [];\n\t\twhile (!this._writable.existsSync(parent, cred)) {\n\t\t\ttoCreate.push(parent);\n\t\t\tparent = path.dirname(parent);\n\t\t}\n\t\ttoCreate = toCreate.reverse();\n\n\t\ttoCreate.forEach((p: string) => {\n\t\t\tthis._writable.mkdirSync(p, this.statSync(p, false, cred).mode, cred);\n\t\t});\n\t}\n\n\t/**\n\t * Helper function:\n\t * - Ensures p is on writable before proceeding. Throws an error if it doesn't exist.\n\t * - Calls f to perform operation on writable.\n\t */\n\tprivate operateOnWritable(p: string, cred: Cred, f: () => void): void {\n\t\tif (this.existsSync(p, cred)) {\n\t\t\tif (!this._writable.existsSync(p, cred)) {\n\t\t\t\t// File is on readable storage. Copy to writable storage before\n\t\t\t\t// changing its mode.\n\t\t\t\tthis.copyToWritable(p, cred);\n\t\t\t}\n\t\t\tf();\n\t\t} else {\n\t\t\tthrow ApiError.ENOENT(p);\n\t\t}\n\t}\n\n\tprivate operateOnWritableAsync(p: string, cred: Cred, cb: BFSOneArgCallback): void {\n\t\tthis.exists(p, cred, (exists: boolean) => {\n\t\t\tif (!exists) {\n\t\t\t\treturn cb(ApiError.ENOENT(p));\n\t\t\t}\n\n\t\t\tthis._writable.exists(p, cred, (existsWritable: boolean) => {\n\t\t\t\tif (existsWritable) {\n\t\t\t\t\tcb();\n\t\t\t\t} else {\n\t\t\t\t\treturn this.copyToWritableAsync(p, cred, cb);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Copy from readable to writable storage.\n\t * PRECONDITION: File does not exist on writable storage.\n\t */\n\tprivate copyToWritable(p: string, cred: Cred): void {\n\t\tconst pStats = this.statSync(p, false, cred);\n\t\tif (pStats.isDirectory()) {\n\t\t\tthis._writable.mkdirSync(p, pStats.mode, cred);\n\t\t} else {\n\t\t\tthis.writeFileSync(p, this._readable.readFileSync(p, null, getFlag('r'), cred), null, getFlag('w'), this.statSync(p, false, cred).mode, cred);\n\t\t}\n\t}\n\n\tprivate copyToWritableAsync(p: string, cred: Cred, cb: BFSOneArgCallback): void {\n\t\tthis.stat(p, false, cred, (err: ApiError, pStats?: Stats) => {\n\t\t\tif (err) {\n\t\t\t\treturn cb(err);\n\t\t\t}\n\n\t\t\tif (pStats!.isDirectory()) {\n\t\t\t\treturn this._writable.mkdir(p, pStats!.mode, cred, cb);\n\t\t\t}\n\n\t\t\t// need to copy file.\n\t\t\tthis._readable.readFile(p, null, getFlag('r'), cred, (err: ApiError, data?: Buffer) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn cb(err);\n\t\t\t\t}\n\n\t\t\t\tthis.writeFile(p, data, null, getFlag('w'), pStats!.mode, cred, cb);\n\t\t\t});\n\t\t});\n\t}\n}\n\n/**\n * Configuration options for OverlayFS instances.\n */\nexport interface OverlayFSOptions {\n\t// The file system to write modified files to.\n\twritable: FileSystem;\n\t// The file system that initially populates this file system.\n\treadable: FileSystem;\n}\n\n/**\n * OverlayFS makes a read-only filesystem writable by storing writes on a second,\n * writable file system. Deletes are persisted via metadata stored on the writable\n * file system.\n */\nexport default class OverlayFS extends LockedFS<UnlockedOverlayFS> {\n\tpublic static readonly Name = 'OverlayFS';\n\n\tpublic static readonly Options: FileSystemOptions = {\n\t\twritable: {\n\t\t\ttype: 'object',\n\t\t\tdescription: 'The file system to write modified files to.',\n\t\t},\n\t\treadable: {\n\t\t\ttype: 'object',\n\t\t\tdescription: 'The file system that initially populates this file system.',\n\t\t},\n\t};\n\n\t/**\n\t * Constructs and initializes an OverlayFS instance with the given options.\n\t */\n\tpublic static Create(opts: OverlayFSOptions, cb: BFSCallback<OverlayFS>): void {\n\t\ttry {\n\t\t\tconst fs = new OverlayFS(opts.writable, opts.readable);\n\t\t\tfs._initialize((e?) => {\n\t\t\t\tcb(e, fs);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tcb(e);\n\t\t}\n\t}\n\n\tpublic static CreateAsync(opts: OverlayFSOptions): Promise<OverlayFS> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.Create(opts, (error, fs) => {\n\t\t\t\tif (error || !fs) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(fs);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic static isAvailable(): boolean {\n\t\treturn UnlockedOverlayFS.isAvailable();\n\t}\n\n\t/**\n\t * @param writable The file system to write modified files to.\n\t * @param readable The file system that initially populates this file system.\n\t */\n\tconstructor(writable: FileSystem, readable: FileSystem) {\n\t\tsuper(new UnlockedOverlayFS(writable, readable));\n\t}\n\n\tpublic getOverlayedFileSystems(): { readable: FileSystem; writable: FileSystem } {\n\t\treturn super.getFSUnlocked().getOverlayedFileSystems();\n\t}\n\n\tpublic unwrap(): UnlockedOverlayFS {\n\t\treturn super.getFSUnlocked();\n\t}\n\n\tprivate _initialize(cb: BFSOneArgCallback): void {\n\t\tsuper.getFSUnlocked()._initialize(cb);\n\t}\n}\n"]}