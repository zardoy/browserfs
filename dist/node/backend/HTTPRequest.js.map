{"version":3,"file":"HTTPRequest.js","sourceRoot":"","sources":["../../../src/backend/HTTPRequest.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseFileSystem, FileSystem, BFSCallback, FileSystemOptions } from '../core/file_system';\nimport { ApiError, ErrorCode } from '../core/api_error';\nimport { FileFlag, ActionType } from '../core/file_flag';\nimport { copyingSlice } from '../core/util';\nimport { File } from '../core/file';\nimport { default as Stats, FilePerm } from '../core/stats';\nimport { NoSyncFile } from '../generic/preload_file';\nimport { xhrIsAvailable, asyncDownloadFile, syncDownloadFile, getFileSizeAsync, getFileSizeSync } from '../generic/xhr';\nimport { fetchIsAvailable, fetchFileAsync, fetchFileSizeAsync } from '../generic/fetch';\nimport { FileIndex, isFileInode, isDirInode } from '../generic/file_index';\nimport Cred from '../core/cred';\nimport type { Buffer } from 'buffer';\n\n/**\n * Try to convert the given buffer into a string, and pass it to the callback.\n * Optimization that removes the needed try/catch into a helper function, as\n * this is an uncommon case.\n * @hidden\n */\nfunction tryToString(buff: Buffer, encoding: BufferEncoding, cb: BFSCallback<string>) {\n\ttry {\n\t\tcb(null, buff.toString(encoding));\n\t} catch (e) {\n\t\tcb(e);\n\t}\n}\n\n/**\n * Configuration options for a HTTPRequest file system.\n */\nexport interface HTTPRequestOptions {\n\t// URL to a file index as a JSON file or the file index object itself, generated with the make_http_index script.\n\t// Defaults to `index.json`.\n\tindex?: string | object;\n\t// Used as the URL prefix for fetched files.\n\t// Default: Fetch files relative to the index.\n\tbaseUrl?: string;\n\t// Whether to prefer XmlHttpRequest or fetch for async operations if both are available.\n\t// Default: false\n\tpreferXHR?: boolean;\n}\n\ninterface AsyncDownloadFileMethod {\n\t(p: string, type: 'buffer', cb: BFSCallback<Buffer>): void;\n\t(p: string, type: 'json', cb: BFSCallback<any>): void;\n\t(p: string, type: string, cb: BFSCallback<any>): void;\n}\n\ninterface SyncDownloadFileMethod {\n\t(p: string, type: 'buffer'): Buffer;\n\t(p: string, type: 'json'): any;\n\t(p: string, type: string): any;\n}\n\nfunction syncNotAvailableError(): never {\n\tthrow new ApiError(ErrorCode.ENOTSUP, `Synchronous HTTP download methods are not available in this environment.`);\n}\n\n/**\n * A simple filesystem backed by HTTP downloads. You must create a directory listing using the\n * `make_http_index` tool provided by BrowserFS.\n *\n * If you install BrowserFS globally with `npm i -g browserfs`, you can generate a listing by\n * running `make_http_index` in your terminal in the directory you would like to index:\n *\n * ```\n * make_http_index > index.json\n * ```\n *\n * Listings objects look like the following:\n *\n * ```json\n * {\n *   \"home\": {\n *     \"jvilk\": {\n *       \"someFile.txt\": null,\n *       \"someDir\": {\n *         // Empty directory\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * *This example has the folder `/home/jvilk` with subfile `someFile.txt` and subfolder `someDir`.*\n */\nexport default class HTTPRequest extends BaseFileSystem implements FileSystem {\n\tpublic static readonly Name = 'HTTPRequest';\n\n\tpublic static readonly Options: FileSystemOptions = {\n\t\tindex: {\n\t\t\ttype: ['string', 'object'],\n\t\t\toptional: true,\n\t\t\tdescription: 'URL to a file index as a JSON file or the file index object itself, generated with the make_http_index script. Defaults to `index.json`.',\n\t\t},\n\t\tbaseUrl: {\n\t\t\ttype: 'string',\n\t\t\toptional: true,\n\t\t\tdescription: 'Used as the URL prefix for fetched files. Default: Fetch files relative to the index.',\n\t\t},\n\t\tpreferXHR: {\n\t\t\ttype: 'boolean',\n\t\t\toptional: true,\n\t\t\tdescription: 'Whether to prefer XmlHttpRequest or fetch for async operations if both are available. Default: false',\n\t\t},\n\t};\n\n\t/**\n\t * Construct an HTTPRequest file system backend with the given options.\n\t */\n\tpublic static Create(opts: HTTPRequestOptions, cb: BFSCallback<HTTPRequest>): void {\n\t\tif (opts.index === undefined) {\n\t\t\topts.index = `index.json`;\n\t\t}\n\t\tif (typeof opts.index === 'string') {\n\t\t\tasyncDownloadFile(opts.index, 'json', (e, data?) => {\n\t\t\t\tif (e) {\n\t\t\t\t\tcb(e);\n\t\t\t\t} else {\n\t\t\t\t\tcb(null, new HTTPRequest(data, opts.baseUrl));\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, new HTTPRequest(opts.index, opts.baseUrl));\n\t\t}\n\t}\n\n\tpublic static CreateAsync(opts: HTTPRequestOptions): Promise<HTTPRequest> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.Create(opts, (error, fs) => {\n\t\t\t\tif (error || !fs) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(fs);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic static isAvailable(): boolean {\n\t\treturn xhrIsAvailable || fetchIsAvailable;\n\t}\n\n\tpublic readonly prefixUrl: string;\n\tprivate _index: FileIndex<{}>;\n\tprivate _requestFileAsyncInternal: AsyncDownloadFileMethod;\n\tprivate _requestFileSizeAsyncInternal: (p: string, cb: BFSCallback<number>) => void;\n\tprivate _requestFileSyncInternal: SyncDownloadFileMethod;\n\tprivate _requestFileSizeSyncInternal: (p: string) => number;\n\n\tprivate constructor(index: object, prefixUrl: string = '', preferXHR: boolean = false) {\n\t\tsuper();\n\t\t// prefix_url must end in a directory separator.\n\t\tif (prefixUrl.length > 0 && prefixUrl.charAt(prefixUrl.length - 1) !== '/') {\n\t\t\tprefixUrl = prefixUrl + '/';\n\t\t}\n\t\tthis.prefixUrl = prefixUrl;\n\t\tthis._index = FileIndex.fromListing(index);\n\n\t\tif (fetchIsAvailable && (!preferXHR || !xhrIsAvailable)) {\n\t\t\tthis._requestFileAsyncInternal = fetchFileAsync;\n\t\t\tthis._requestFileSizeAsyncInternal = fetchFileSizeAsync;\n\t\t} else {\n\t\t\tthis._requestFileAsyncInternal = asyncDownloadFile;\n\t\t\tthis._requestFileSizeAsyncInternal = getFileSizeAsync;\n\t\t}\n\n\t\tif (xhrIsAvailable) {\n\t\t\tthis._requestFileSyncInternal = syncDownloadFile;\n\t\t\tthis._requestFileSizeSyncInternal = getFileSizeSync;\n\t\t} else {\n\t\t\tthis._requestFileSyncInternal = syncNotAvailableError;\n\t\t\tthis._requestFileSizeSyncInternal = syncNotAvailableError;\n\t\t}\n\t}\n\n\tpublic empty(): void {\n\t\tthis._index.fileIterator(function (file: Stats) {\n\t\t\tfile.fileData = null;\n\t\t});\n\t}\n\n\tpublic getName(): string {\n\t\treturn HTTPRequest.Name;\n\t}\n\n\tpublic diskSpace(path: string, cb: (total: number, free: number) => void): void {\n\t\t// Read-only file system. We could calculate the total space, but that's not\n\t\t// important right now.\n\t\tcb(0, 0);\n\t}\n\n\tpublic isReadOnly(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic supportsLinks(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic supportsProps(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic supportsSynch(): boolean {\n\t\t// Synchronous operations are only available via the XHR interface for now.\n\t\treturn xhrIsAvailable;\n\t}\n\n\t/**\n\t * Special HTTPFS function: Preload the given file into the index.\n\t * @param [String] path\n\t * @param [BrowserFS.Buffer] buffer\n\t */\n\tpublic preloadFile(path: string, buffer: Buffer): void {\n\t\tconst inode = this._index.getInode(path);\n\t\tif (isFileInode<Stats>(inode)) {\n\t\t\tif (inode === null) {\n\t\t\t\tthrow ApiError.ENOENT(path);\n\t\t\t}\n\t\t\tconst stats = inode.getData();\n\t\t\tstats.size = buffer.length;\n\t\t\tstats.fileData = buffer;\n\t\t} else {\n\t\t\tthrow ApiError.EISDIR(path);\n\t\t}\n\t}\n\n\tpublic stat(path: string, isLstat: boolean, cred: Cred, cb: BFSCallback<Stats>): void {\n\t\tconst inode = this._index.getInode(path);\n\t\tif (inode === null) {\n\t\t\treturn cb(ApiError.ENOENT(path));\n\t\t}\n\t\tlet stats: Stats;\n\t\tif (!inode!.toStats().hasAccess(FilePerm.READ, cred)) {\n\t\t\treturn cb(ApiError.EACCES(path));\n\t\t}\n\t\tif (isFileInode<Stats>(inode)) {\n\t\t\tstats = inode.getData();\n\t\t\t// At this point, a non-opened file will still have default stats from the listing.\n\t\t\tif (stats.size < 0) {\n\t\t\t\tthis._requestFileSizeAsync(path, function (e: ApiError, size?: number) {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\treturn cb(e);\n\t\t\t\t\t}\n\t\t\t\t\tstats.size = size!;\n\t\t\t\t\tcb(null, Stats.clone(stats));\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcb(null, Stats.clone(stats));\n\t\t\t}\n\t\t} else if (isDirInode(inode)) {\n\t\t\tstats = inode.getStats();\n\t\t\tcb(null, stats);\n\t\t} else {\n\t\t\tcb(ApiError.FileError(ErrorCode.EINVAL, path));\n\t\t}\n\t}\n\n\tpublic statSync(path: string, isLstat: boolean, cred: Cred): Stats {\n\t\tconst inode = this._index.getInode(path);\n\t\tif (inode === null) {\n\t\t\tthrow ApiError.ENOENT(path);\n\t\t}\n\t\tif (!inode.toStats().hasAccess(FilePerm.READ, cred)) {\n\t\t\tthrow ApiError.EACCES(path);\n\t\t}\n\t\tlet stats: Stats;\n\t\tif (isFileInode<Stats>(inode)) {\n\t\t\tstats = inode.getData();\n\t\t\t// At this point, a non-opened file will still have default stats from the listing.\n\t\t\tif (stats.size < 0) {\n\t\t\t\tstats.size = this._requestFileSizeSync(path);\n\t\t\t}\n\t\t} else if (isDirInode(inode)) {\n\t\t\tstats = inode.getStats();\n\t\t} else {\n\t\t\tthrow ApiError.FileError(ErrorCode.EINVAL, path);\n\t\t}\n\t\treturn stats;\n\t}\n\n\tpublic open(path: string, flags: FileFlag, mode: number, cred: Cred, cb: BFSCallback<File>): void {\n\t\t// INVARIANT: You can't write to files on this file system.\n\t\tif (flags.isWriteable()) {\n\t\t\treturn cb(new ApiError(ErrorCode.EPERM, path));\n\t\t}\n\t\tconst self = this;\n\t\t// Check if the path exists, and is a file.\n\t\tconst inode = this._index.getInode(path);\n\t\tif (inode === null) {\n\t\t\treturn cb(ApiError.ENOENT(path));\n\t\t}\n\t\tif (!inode.toStats().hasAccess(flags.getMode(), cred)) {\n\t\t\treturn cb(ApiError.EACCES(path));\n\t\t}\n\t\tif (isFileInode<Stats>(inode) || isDirInode<Stats>(inode)) {\n\t\t\tswitch (flags.pathExistsAction()) {\n\t\t\t\tcase ActionType.THROW_EXCEPTION:\n\t\t\t\tcase ActionType.TRUNCATE_FILE:\n\t\t\t\t\treturn cb(ApiError.EEXIST(path));\n\t\t\t\tcase ActionType.NOP:\n\t\t\t\t\tif (isDirInode<Stats>(inode)) {\n\t\t\t\t\t\tconst stats = inode.getStats();\n\t\t\t\t\t\treturn cb(null, new NoSyncFile(self, path, flags, stats, stats.fileData || undefined));\n\t\t\t\t\t}\n\t\t\t\t\tconst stats = inode.getData();\n\t\t\t\t\t// Use existing file contents.\n\t\t\t\t\t// XXX: Uh, this maintains the previously-used flag.\n\t\t\t\t\tif (stats.fileData) {\n\t\t\t\t\t\treturn cb(null, new NoSyncFile(self, path, flags, Stats.clone(stats), stats.fileData));\n\t\t\t\t\t}\n\t\t\t\t\t// @todo be lazier about actually requesting the file\n\t\t\t\t\tthis._requestFileAsync(path, 'buffer', function (err: ApiError, buffer?: Buffer) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn cb(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// we don't initially have file sizes\n\t\t\t\t\t\tstats.size = buffer!.length;\n\t\t\t\t\t\tstats.fileData = buffer!;\n\t\t\t\t\t\treturn cb(null, new NoSyncFile(self, path, flags, Stats.clone(stats), buffer));\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.'));\n\t\t\t}\n\t\t} else {\n\t\t\treturn cb(ApiError.EPERM(path));\n\t\t}\n\t}\n\n\tpublic openSync(path: string, flags: FileFlag, mode: number, cred: Cred): File {\n\t\t// INVARIANT: You can't write to files on this file system.\n\t\tif (flags.isWriteable()) {\n\t\t\tthrow new ApiError(ErrorCode.EPERM, path);\n\t\t}\n\t\t// Check if the path exists, and is a file.\n\t\tconst inode = this._index.getInode(path);\n\t\tif (inode === null) {\n\t\t\tthrow ApiError.ENOENT(path);\n\t\t}\n\t\tif (!inode.toStats().hasAccess(flags.getMode(), cred)) {\n\t\t\tthrow ApiError.EACCES(path);\n\t\t}\n\t\tif (isFileInode<Stats>(inode) || isDirInode<Stats>(inode)) {\n\t\t\tswitch (flags.pathExistsAction()) {\n\t\t\t\tcase ActionType.THROW_EXCEPTION:\n\t\t\t\tcase ActionType.TRUNCATE_FILE:\n\t\t\t\t\tthrow ApiError.EEXIST(path);\n\t\t\t\tcase ActionType.NOP:\n\t\t\t\t\tif (isDirInode<Stats>(inode)) {\n\t\t\t\t\t\tconst stats = inode.getStats();\n\t\t\t\t\t\treturn new NoSyncFile(this, path, flags, stats, stats.fileData || undefined);\n\t\t\t\t\t}\n\t\t\t\t\tconst stats = inode.getData();\n\t\t\t\t\t// Use existing file contents.\n\t\t\t\t\t// XXX: Uh, this maintains the previously-used flag.\n\t\t\t\t\tif (stats.fileData) {\n\t\t\t\t\t\treturn new NoSyncFile(this, path, flags, Stats.clone(stats), stats.fileData);\n\t\t\t\t\t}\n\t\t\t\t\t// @todo be lazier about actually requesting the file\n\t\t\t\t\tconst buffer = this._requestFileSync(path, 'buffer');\n\t\t\t\t\t// we don't initially have file sizes\n\t\t\t\t\tstats.size = buffer.length;\n\t\t\t\t\tstats.fileData = buffer;\n\t\t\t\t\treturn new NoSyncFile(this, path, flags, Stats.clone(stats), buffer);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');\n\t\t\t}\n\t\t} else {\n\t\t\tthrow ApiError.EPERM(path);\n\t\t}\n\t}\n\n\tpublic readdir(path: string, cred: Cred, cb: BFSCallback<string[]>): void {\n\t\ttry {\n\t\t\tcb(null, this.readdirSync(path, cred));\n\t\t} catch (e) {\n\t\t\tcb(e);\n\t\t}\n\t}\n\n\tpublic readdirSync(path: string, cred: Cred): string[] {\n\t\t// Check if it exists.\n\t\tconst inode = this._index.getInode(path);\n\t\tif (inode === null) {\n\t\t\tthrow ApiError.ENOENT(path);\n\t\t} else if (!inode.toStats().hasAccess(FilePerm.READ, cred)) {\n\t\t\tthrow ApiError.EACCES(path);\n\t\t} else if (isDirInode(inode)) {\n\t\t\treturn inode.getListing();\n\t\t} else {\n\t\t\tthrow ApiError.ENOTDIR(path);\n\t\t}\n\t}\n\n\t/**\n\t * We have the entire file as a buffer; optimize readFile.\n\t */\n\tpublic readFile(fname: string, encoding: BufferEncoding, flag: FileFlag, cred: Cred, cb: BFSCallback<string | Buffer>): void {\n\t\t// Wrap cb in file closing code.\n\t\tconst oldCb = cb;\n\t\t// Get file.\n\t\tthis.open(fname, flag, 0x1a4, cred, function (err: ApiError, fd?: File) {\n\t\t\tif (err) {\n\t\t\t\treturn cb(err);\n\t\t\t}\n\t\t\tcb = function (err: ApiError, arg?: Buffer) {\n\t\t\t\tfd!.close(function (err2: any) {\n\t\t\t\t\tif (!err) {\n\t\t\t\t\t\terr = err2;\n\t\t\t\t\t}\n\t\t\t\t\treturn oldCb(err, arg);\n\t\t\t\t});\n\t\t\t};\n\t\t\tconst fdCast = <NoSyncFile<HTTPRequest>>fd;\n\t\t\tconst fdBuff = <Buffer>fdCast.getBuffer();\n\t\t\tif (encoding === null) {\n\t\t\t\tcb(err, copyingSlice(fdBuff));\n\t\t\t} else {\n\t\t\t\ttryToString(fdBuff, encoding, cb);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Specially-optimized readfile.\n\t */\n\tpublic readFileSync(fname: string, encoding: BufferEncoding, flag: FileFlag, cred: Cred): any {\n\t\t// Get file.\n\t\tconst fd = this.openSync(fname, flag, 0x1a4, cred);\n\t\ttry {\n\t\t\tconst fdCast = <NoSyncFile<HTTPRequest>>fd;\n\t\t\tconst fdBuff = <Buffer>fdCast.getBuffer();\n\t\t\tif (encoding === null) {\n\t\t\t\treturn copyingSlice(fdBuff);\n\t\t\t}\n\t\t\treturn fdBuff.toString(encoding);\n\t\t} finally {\n\t\t\tfd.closeSync();\n\t\t}\n\t}\n\n\tprivate _getHTTPPath(filePath: string): string {\n\t\tif (filePath.charAt(0) === '/') {\n\t\t\tfilePath = filePath.slice(1);\n\t\t}\n\t\treturn this.prefixUrl + filePath;\n\t}\n\n\t/**\n\t * Asynchronously download the given file.\n\t */\n\tprivate _requestFileAsync(p: string, type: 'buffer', cb: BFSCallback<Buffer>): void;\n\tprivate _requestFileAsync(p: string, type: 'json', cb: BFSCallback<any>): void;\n\tprivate _requestFileAsync(p: string, type: string, cb: BFSCallback<any>): void;\n\tprivate _requestFileAsync(p: string, type: string, cb: BFSCallback<any>): void {\n\t\tthis._requestFileAsyncInternal(this._getHTTPPath(p), type, cb);\n\t}\n\n\t/**\n\t * Synchronously download the given file.\n\t */\n\tprivate _requestFileSync(p: string, type: 'buffer'): Buffer;\n\tprivate _requestFileSync(p: string, type: 'json'): any;\n\tprivate _requestFileSync(p: string, type: string): any;\n\tprivate _requestFileSync(p: string, type: string): any {\n\t\treturn this._requestFileSyncInternal(this._getHTTPPath(p), type);\n\t}\n\n\t/**\n\t * Only requests the HEAD content, for the file size.\n\t */\n\tprivate _requestFileSizeAsync(path: string, cb: BFSCallback<number>): void {\n\t\tthis._requestFileSizeAsyncInternal(this._getHTTPPath(path), cb);\n\t}\n\n\tprivate _requestFileSizeSync(path: string): number {\n\t\treturn this._requestFileSizeSyncInternal(this._getHTTPPath(path));\n\t}\n}\n"]}