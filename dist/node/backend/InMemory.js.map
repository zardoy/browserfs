{"version":3,"file":"InMemory.js","sourceRoot":"","sources":["../../../src/backend/InMemory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AACA,wEAAiK;AAGjK;;GAEG;AACH;IAAA;QACS,UAAK,GAAwB,IAAI,GAAG,EAAkB,CAAC;IA4BhE,CAAC;IA1BO,4BAAI,GAAX;QACC,OAAO,kBAAkB,CAAC,IAAI,CAAC;IAChC,CAAC;IACM,6BAAK,GAAZ;QACC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC;IAEM,wCAAgB,GAAvB,UAAwB,IAAY;QACnC,OAAO,IAAI,8CAAuB,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IAEM,2BAAG,GAAV,UAAW,GAAW;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAEM,2BAAG,GAAV,UAAW,GAAW,EAAE,IAAY,EAAE,SAAkB;QACvD,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACtC,OAAO,KAAK,CAAC;SACb;QACD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC1B,OAAO,IAAI,CAAC;IACb,CAAC;IAEM,2BAAG,GAAV,UAAW,GAAW;QACrB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IACF,oBAAC;AAAD,CAAC,AA7BD,IA6BC;AA7BY,sCAAa;AA+B1B;;;GAGG;AACH;IAAgD,sCAAsB;IAwBrE;eACC,kBAAM,EAAE,KAAK,EAAE,IAAI,aAAa,EAAE,EAAE,CAAC;IACtC,CAAC;IArBD;;OAEG;IACW,yBAAM,GAApB,UAAqB,OAAY,EAAE,EAAmC;QACrE,EAAE,CAAC,IAAI,EAAE,IAAI,kBAAkB,EAAE,CAAC,CAAC;IACpC,CAAC;IAEa,8BAAW,GAAzB,UAA0B,IAAS;QAAnC,iBAUC;QATA,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAClC,KAAI,CAAC,MAAM,CAAC,IAAI,EAAE,UAAC,KAAK,EAAE,EAAE;gBAC3B,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE;oBACjB,MAAM,CAAC,KAAK,CAAC,CAAC;iBACd;qBAAM;oBACN,OAAO,CAAC,EAAE,CAAC,CAAC;iBACZ;YACF,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IArBsB,uBAAI,GAAG,UAAU,CAAC;IAElB,0BAAO,GAAsB,EAAE,CAAC;IAwBxD,yBAAC;CAAA,AA3BD,CAAgD,6CAAsB,GA2BrE;kBA3BoB,kBAAkB","sourcesContent":["import { BFSCallback, FileSystemOptions } from '../core/file_system';\nimport { SyncKeyValueStore, SimpleSyncStore, SimpleSyncRWTransaction, SyncKeyValueRWTransaction, SyncKeyValueFileSystem } from '../generic/key_value_filesystem';\nimport type { Buffer } from 'buffer';\n\n/**\n * A simple in-memory key-value store backed by a JavaScript object.\n */\nexport class InMemoryStore implements SyncKeyValueStore, SimpleSyncStore {\n\tprivate store: Map<string, Buffer> = new Map<string, Buffer>();\n\n\tpublic name() {\n\t\treturn InMemoryFileSystem.Name;\n\t}\n\tpublic clear() {\n\t\tthis.store.clear();\n\t}\n\n\tpublic beginTransaction(type: string): SyncKeyValueRWTransaction {\n\t\treturn new SimpleSyncRWTransaction(this);\n\t}\n\n\tpublic get(key: string): Buffer {\n\t\treturn this.store.get(key);\n\t}\n\n\tpublic put(key: string, data: Buffer, overwrite: boolean): boolean {\n\t\tif (!overwrite && this.store.has(key)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.store.set(key, data);\n\t\treturn true;\n\t}\n\n\tpublic del(key: string): void {\n\t\tthis.store.delete(key);\n\t}\n}\n\n/**\n * A simple in-memory file system backed by an InMemoryStore.\n * Files are not persisted across page loads.\n */\nexport default class InMemoryFileSystem extends SyncKeyValueFileSystem {\n\tpublic static readonly Name = 'InMemory';\n\n\tpublic static readonly Options: FileSystemOptions = {};\n\n\t/**\n\t * Creates an InMemoryFileSystem instance.\n\t */\n\tpublic static Create(options: any, cb: BFSCallback<InMemoryFileSystem>): void {\n\t\tcb(null, new InMemoryFileSystem());\n\t}\n\n\tpublic static CreateAsync(opts: any): Promise<InMemoryFileSystem> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.Create(opts, (error, fs) => {\n\t\t\t\tif (error || !fs) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(fs);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate constructor() {\n\t\tsuper({ store: new InMemoryStore() });\n\t}\n}\n"]}