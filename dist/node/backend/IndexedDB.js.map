{"version":3,"file":"IndexedDB.js","sourceRoot":"","sources":["../../../src/backend/IndexedDB.ts"],"names":[],"mappings":"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","sourcesContent":["import { BFSOneArgCallback, BFSCallback, FileSystemOptions } from '../core/file_system';\nimport { AsyncKeyValueROTransaction, AsyncKeyValueRWTransaction, AsyncKeyValueStore, AsyncKeyValueFileSystem } from '../generic/key_value_filesystem';\nimport { ApiError, ErrorCode } from '../core/api_error';\nimport { arrayBuffer2Buffer, buffer2ArrayBuffer } from '../core/util';\nimport type { Buffer } from 'buffer';\n/**\n * Get the indexedDB constructor for the current browser.\n * @hidden\n */\nconst indexedDB: IDBFactory = (() => {\n\ttry {\n\t\treturn globalThis.indexedDB || (<any>globalThis).mozIndexedDB || (<any>globalThis).webkitIndexedDB || globalThis.msIndexedDB;\n\t} catch {\n\t\treturn null;\n\t}\n})();\n\n/**\n * Converts a DOMException or a DOMError from an IndexedDB event into a\n * standardized BrowserFS API error.\n * @hidden\n */\nfunction convertError(e: { name: string }, message: string = e.toString()): ApiError {\n\tswitch (e.name) {\n\t\tcase 'NotFoundError':\n\t\t\treturn new ApiError(ErrorCode.ENOENT, message);\n\t\tcase 'QuotaExceededError':\n\t\t\treturn new ApiError(ErrorCode.ENOSPC, message);\n\t\tdefault:\n\t\t\t// The rest do not seem to map cleanly to standard error codes.\n\t\t\treturn new ApiError(ErrorCode.EIO, message);\n\t}\n}\n\n/**\n * Produces a new onerror handler for IDB. Our errors are always fatal, so we\n * handle them generically: Call the user-supplied callback with a translated\n * version of the error, and let the error bubble up.\n * @hidden\n */\nfunction onErrorHandler(cb: (e: ApiError) => void, code: ErrorCode = ErrorCode.EIO, message: string | null = null): (e?: any) => void {\n\treturn function (e?: any): void {\n\t\t// Prevent the error from canceling the transaction.\n\t\te.preventDefault();\n\t\tcb(new ApiError(code, message !== null ? message : undefined));\n\t};\n}\n\n/**\n * @hidden\n */\nexport class IndexedDBROTransaction implements AsyncKeyValueROTransaction {\n\tconstructor(public tx: IDBTransaction, public store: IDBObjectStore) {}\n\n\tpublic get(key: string, cb: BFSCallback<Buffer>): void {\n\t\ttry {\n\t\t\tconst r: IDBRequest = this.store.get(key);\n\t\t\tr.onerror = onErrorHandler(cb);\n\t\t\tr.onsuccess = event => {\n\t\t\t\t// IDB returns the value 'undefined' when you try to get keys that\n\t\t\t\t// don't exist. The caller expects this behavior.\n\t\t\t\tconst result: any = (<any>event.target).result;\n\t\t\t\tif (result === undefined) {\n\t\t\t\t\tcb(null, result);\n\t\t\t\t} else {\n\t\t\t\t\t// IDB data is stored as an ArrayBuffer\n\t\t\t\t\tcb(null, arrayBuffer2Buffer(result));\n\t\t\t\t}\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tcb(convertError(e));\n\t\t}\n\t}\n}\n\n/**\n * @hidden\n */\nexport class IndexedDBRWTransaction extends IndexedDBROTransaction implements AsyncKeyValueRWTransaction, AsyncKeyValueROTransaction {\n\tconstructor(tx: IDBTransaction, store: IDBObjectStore) {\n\t\tsuper(tx, store);\n\t}\n\n\tpublic put(key: string, data: Buffer, overwrite: boolean, cb: BFSCallback<boolean>): void {\n\t\ttry {\n\t\t\tconst arraybuffer = buffer2ArrayBuffer(data);\n\t\t\tlet r: IDBRequest;\n\t\t\t// Note: 'add' will never overwrite an existing key.\n\t\t\tr = overwrite ? this.store.put(arraybuffer, key) : this.store.add(arraybuffer, key);\n\t\t\t// XXX: NEED TO RETURN FALSE WHEN ADD HAS A KEY CONFLICT. NO ERROR.\n\t\t\tr.onerror = onErrorHandler(cb);\n\t\t\tr.onsuccess = event => {\n\t\t\t\tcb(null, true);\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tcb(convertError(e));\n\t\t}\n\t}\n\n\tpublic del(key: string, cb: BFSOneArgCallback): void {\n\t\ttry {\n\t\t\t// NOTE: IE8 has a bug with identifiers named 'delete' unless used as a string\n\t\t\t// like this.\n\t\t\t// http://stackoverflow.com/a/26479152\n\t\t\tconst r: IDBRequest = this.store['delete'](key);\n\t\t\tr.onerror = onErrorHandler(cb);\n\t\t\tr.onsuccess = event => {\n\t\t\t\tcb();\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tcb(convertError(e));\n\t\t}\n\t}\n\n\tpublic commit(cb: BFSOneArgCallback): void {\n\t\t// Return to the event loop to commit the transaction.\n\t\tsetTimeout(cb, 0);\n\t}\n\n\tpublic abort(cb: BFSOneArgCallback): void {\n\t\tlet _e: ApiError | null = null;\n\t\ttry {\n\t\t\tthis.tx.abort();\n\t\t} catch (e) {\n\t\t\t_e = convertError(e);\n\t\t} finally {\n\t\t\tcb(_e);\n\t\t}\n\t}\n}\n\nexport class IndexedDBStore implements AsyncKeyValueStore {\n\tpublic static Create(storeName: string, cb: BFSCallback<IndexedDBStore>): void {\n\t\tconst openReq: IDBOpenDBRequest = indexedDB.open(storeName, 1);\n\n\t\topenReq.onupgradeneeded = event => {\n\t\t\tconst db: IDBDatabase = (<any>event.target).result;\n\t\t\t// Huh. This should never happen; we're at version 1. Why does another\n\t\t\t// database exist?\n\t\t\tif (db.objectStoreNames.contains(storeName)) {\n\t\t\t\tdb.deleteObjectStore(storeName);\n\t\t\t}\n\t\t\tdb.createObjectStore(storeName);\n\t\t};\n\n\t\topenReq.onsuccess = event => {\n\t\t\tcb(null, new IndexedDBStore((<any>event.target).result, storeName));\n\t\t};\n\n\t\topenReq.onerror = onErrorHandler(cb, ErrorCode.EACCES);\n\t}\n\n\tconstructor(private db: IDBDatabase, private storeName: string) {}\n\n\tpublic name(): string {\n\t\treturn IndexedDBFileSystem.Name + ' - ' + this.storeName;\n\t}\n\n\tpublic clear(cb: BFSOneArgCallback): void {\n\t\ttry {\n\t\t\tconst tx = this.db.transaction(this.storeName, 'readwrite'),\n\t\t\t\tobjectStore = tx.objectStore(this.storeName),\n\t\t\t\tr: IDBRequest = objectStore.clear();\n\t\t\tr.onsuccess = event => {\n\t\t\t\t// Use setTimeout to commit transaction.\n\t\t\t\tsetTimeout(cb, 0);\n\t\t\t};\n\t\t\tr.onerror = onErrorHandler(cb);\n\t\t} catch (e) {\n\t\t\tcb(convertError(e));\n\t\t}\n\t}\n\n\tpublic beginTransaction(type: 'readonly'): AsyncKeyValueROTransaction;\n\tpublic beginTransaction(type: 'readwrite'): AsyncKeyValueRWTransaction;\n\tpublic beginTransaction(type: 'readonly' | 'readwrite' = 'readonly'): AsyncKeyValueROTransaction {\n\t\tconst tx = this.db.transaction(this.storeName, type),\n\t\t\tobjectStore = tx.objectStore(this.storeName);\n\t\tif (type === 'readwrite') {\n\t\t\treturn new IndexedDBRWTransaction(tx, objectStore);\n\t\t} else if (type === 'readonly') {\n\t\t\treturn new IndexedDBROTransaction(tx, objectStore);\n\t\t} else {\n\t\t\tthrow new ApiError(ErrorCode.EINVAL, 'Invalid transaction type.');\n\t\t}\n\t}\n}\n\n/**\n * Configuration options for the IndexedDB file system.\n */\nexport interface IndexedDBFileSystemOptions {\n\t// The name of this file system. You can have multiple IndexedDB file systems operating\n\t// at once, but each must have a different name.\n\tstoreName?: string;\n\t// The size of the inode cache. Defaults to 100. A size of 0 or below disables caching.\n\tcacheSize?: number;\n}\n\n/**\n * A file system that uses the IndexedDB key value file system.\n */\nexport default class IndexedDBFileSystem extends AsyncKeyValueFileSystem {\n\tpublic static readonly Name = 'IndexedDB';\n\n\tpublic static readonly Options: FileSystemOptions = {\n\t\tstoreName: {\n\t\t\ttype: 'string',\n\t\t\toptional: true,\n\t\t\tdescription: 'The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name.',\n\t\t},\n\t\tcacheSize: {\n\t\t\ttype: 'number',\n\t\t\toptional: true,\n\t\t\tdescription: 'The size of the inode cache. Defaults to 100. A size of 0 or below disables caching.',\n\t\t},\n\t};\n\n\t/**\n\t * Constructs an IndexedDB file system with the given options.\n\t */\n\tpublic static Create(options: IndexedDBFileSystemOptions, cb: BFSCallback<IndexedDBFileSystem>): void {\n\t\tif (!options) {\n\t\t\toptions = {\n\t\t\t\tstoreName: 'browserfs',\n\t\t\t\tcacheSize: 100,\n\t\t\t};\n\t\t}\n\t\tIndexedDBStore.Create(options.storeName || 'browserfs', (e, store?) => {\n\t\t\tif (store) {\n\t\t\t\tconst idbfs = new IndexedDBFileSystem(options.cacheSize || 100);\n\t\t\t\tidbfs.init(store, e => {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\tcb(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcb(null, idbfs);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcb(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic static CreateAsync(opts: IndexedDBFileSystemOptions): Promise<IndexedDBFileSystem> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.Create(opts, (error, fs) => {\n\t\t\t\tif (error || !fs) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(fs);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic static isAvailable(): boolean {\n\t\t// In Safari's private browsing mode, indexedDB.open returns NULL.\n\t\t// In Firefox, it throws an exception.\n\t\t// In Chrome, it \"just works\", and clears the database when you leave the page.\n\t\t// Untested: Opera, IE.\n\t\ttry {\n\t\t\treturn typeof indexedDB !== 'undefined' && null !== indexedDB.open('__browserfs_test__');\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tprivate constructor(cacheSize: number) {\n\t\tsuper(cacheSize);\n\t}\n}\n"]}