{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../src/core/file.ts"],"names":[],"mappings":";;;AAAA,yCAAkD;AAkIlD;;;GAGG;AACH;IAAA;IA+BA,CAAC;IA9BO,uBAAI,GAAX,UAAY,EAAqB;QAChC,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACrC,CAAC;IACM,2BAAQ,GAAf;QACC,MAAM,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IACM,2BAAQ,GAAf,UAAgB,EAAqB;QACpC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACf,CAAC;IACM,+BAAY,GAAnB;QACC,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;IACxB,CAAC;IACM,wBAAK,GAAZ,UAAa,GAAW,EAAE,GAAW,EAAE,EAAqB;QAC3D,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACrC,CAAC;IACM,4BAAS,GAAhB,UAAiB,GAAW,EAAE,GAAW;QACxC,MAAM,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IACM,wBAAK,GAAZ,UAAa,IAAY,EAAE,EAAqB;QAC/C,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACrC,CAAC;IACM,4BAAS,GAAhB,UAAiB,IAAY;QAC5B,MAAM,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IACM,yBAAM,GAAb,UAAc,KAAW,EAAE,KAAW,EAAE,EAAqB;QAC5D,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACrC,CAAC;IACM,6BAAU,GAAjB,UAAkB,KAAW,EAAE,KAAW;QACzC,MAAM,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IACF,eAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,4BAAQ","sourcesContent":["import { ApiError, ErrorCode } from './api_error';\nimport Stats from './stats';\nimport { BFSCallback, BFSOneArgCallback, BFSThreeArgCallback } from './file_system';\nimport type { Buffer } from 'buffer';\n\nexport interface File {\n\t/**\n\t * **Core**: Get the current file position.\n\t */\n\tgetPos(): number | undefined;\n\t/**\n\t * **Core**: Asynchronous `stat`.\n\t */\n\tstat(cb: BFSCallback<Stats>): void;\n\t/**\n\t * **Core**: Synchronous `stat`.\n\t */\n\tstatSync(): Stats;\n\t/**\n\t * **Core**: Asynchronous close.\n\t */\n\tclose(cb: BFSOneArgCallback): void;\n\t/**\n\t * **Core**: Synchronous close.\n\t */\n\tcloseSync(): void;\n\t/**\n\t * **Core**: Asynchronous truncate.\n\t */\n\ttruncate(len: number, cb: BFSOneArgCallback): void;\n\t/**\n\t * **Core**: Synchronous truncate.\n\t */\n\ttruncateSync(len: number): void;\n\t/**\n\t * **Core**: Asynchronous sync.\n\t */\n\tsync(cb: BFSOneArgCallback): void;\n\t/**\n\t * **Core**: Synchronous sync.\n\t */\n\tsyncSync(): void;\n\t/**\n\t * **Core**: Write buffer to the file.\n\t * Note that it is unsafe to use fs.write multiple times on the same file\n\t * without waiting for the callback.\n\t * @param buffer Buffer containing the data to write to\n\t *  the file.\n\t * @param offset Offset in the buffer to start reading data from.\n\t * @param length The amount of bytes to write to the file.\n\t * @param position Offset from the beginning of the file where this\n\t *   data should be written. If position is null, the data will be written at\n\t *   the current position.\n\t * @param cb The number specifies the number of bytes written into the file.\n\t */\n\twrite(buffer: Buffer, offset: number, length: number, position: number | null, cb: BFSThreeArgCallback<number, Buffer>): void;\n\t/**\n\t * **Core**: Write buffer to the file.\n\t * Note that it is unsafe to use fs.writeSync multiple times on the same file\n\t * without waiting for it to return.\n\t * @param buffer Buffer containing the data to write to\n\t *  the file.\n\t * @param offset Offset in the buffer to start reading data from.\n\t * @param length The amount of bytes to write to the file.\n\t * @param position Offset from the beginning of the file where this\n\t *   data should be written. If position is null, the data will be written at\n\t *   the current position.\n\t */\n\twriteSync(buffer: Buffer, offset: number, length: number, position: number | null): number;\n\t/**\n\t * **Core**: Read data from the file.\n\t * @param buffer The buffer that the data will be\n\t *   written to.\n\t * @param offset The offset within the buffer where writing will\n\t *   start.\n\t * @param length An integer specifying the number of bytes to read.\n\t * @param position An integer specifying where to begin reading from\n\t *   in the file. If position is null, data will be read from the current file\n\t *   position.\n\t * @param cb The number is the number of bytes read\n\t */\n\tread(buffer: Buffer, offset: number, length: number, position: number | null, cb: BFSThreeArgCallback<number, Buffer>): void;\n\t/**\n\t * **Core**: Read data from the file.\n\t * @param buffer The buffer that the data will be written to.\n\t * @param offset The offset within the buffer where writing will start.\n\t * @param length An integer specifying the number of bytes to read.\n\t * @param position An integer specifying where to begin reading from\n\t *   in the file. If position is null, data will be read from the current file\n\t *   position.\n\t */\n\treadSync(buffer: Buffer, offset: number, length: number, position: number): number;\n\t/**\n\t * **Supplementary**: Asynchronous `datasync`.\n\t *\n\t * Default implementation maps to `sync`.\n\t */\n\tdatasync(cb: BFSOneArgCallback): void;\n\t/**\n\t * **Supplementary**: Synchronous `datasync`.\n\t *\n\t * Default implementation maps to `syncSync`.\n\t */\n\tdatasyncSync(): void;\n\t/**\n\t * **Optional**: Asynchronous `chown`.\n\t */\n\tchown(uid: number, gid: number, cb: BFSOneArgCallback): void;\n\t/**\n\t * **Optional**: Synchronous `chown`.\n\t */\n\tchownSync(uid: number, gid: number): void;\n\t/**\n\t * **Optional**: Asynchronous `fchmod`.\n\t */\n\tchmod(mode: number, cb: BFSOneArgCallback): void;\n\t/**\n\t * **Optional**: Synchronous `fchmod`.\n\t */\n\tchmodSync(mode: number): void;\n\t/**\n\t * **Optional**: Change the file timestamps of the file.\n\t */\n\tutimes(atime: Date, mtime: Date, cb: BFSOneArgCallback): void;\n\t/**\n\t * **Optional**: Change the file timestamps of the file.\n\t */\n\tutimesSync(atime: Date, mtime: Date): void;\n}\n\n/**\n * Base class that contains shared implementations of functions for the file\n * object.\n */\nexport class BaseFile {\n\tpublic sync(cb: BFSOneArgCallback): void {\n\t\tcb(new ApiError(ErrorCode.ENOTSUP));\n\t}\n\tpublic syncSync(): void {\n\t\tthrow new ApiError(ErrorCode.ENOTSUP);\n\t}\n\tpublic datasync(cb: BFSOneArgCallback): void {\n\t\tthis.sync(cb);\n\t}\n\tpublic datasyncSync(): void {\n\t\treturn this.syncSync();\n\t}\n\tpublic chown(uid: number, gid: number, cb: BFSOneArgCallback): void {\n\t\tcb(new ApiError(ErrorCode.ENOTSUP));\n\t}\n\tpublic chownSync(uid: number, gid: number): void {\n\t\tthrow new ApiError(ErrorCode.ENOTSUP);\n\t}\n\tpublic chmod(mode: number, cb: BFSOneArgCallback): void {\n\t\tcb(new ApiError(ErrorCode.ENOTSUP));\n\t}\n\tpublic chmodSync(mode: number): void {\n\t\tthrow new ApiError(ErrorCode.ENOTSUP);\n\t}\n\tpublic utimes(atime: Date, mtime: Date, cb: BFSOneArgCallback): void {\n\t\tcb(new ApiError(ErrorCode.ENOTSUP));\n\t}\n\tpublic utimesSync(atime: Date, mtime: Date): void {\n\t\tthrow new ApiError(ErrorCode.ENOTSUP);\n\t}\n}\n"]}