{"version":3,"file":"file_flag.js","sourceRoot":"","sources":["../../../src/core/file_flag.ts"],"names":[],"mappings":"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","sourcesContent":["import { ErrorCode, ApiError } from './api_error';\n\nexport enum ActionType {\n\t// Indicates that the code should not do anything.\n\tNOP = 0,\n\t// Indicates that the code should throw an exception.\n\tTHROW_EXCEPTION = 1,\n\t// Indicates that the code should truncate the file, but only if it is a file.\n\tTRUNCATE_FILE = 2,\n\t// Indicates that the code should create the file.\n\tCREATE_FILE = 3,\n}\n\n/**\n * Represents one of the following file flags. A convenience object.\n *\n * * `'r'` - Open file for reading. An exception occurs if the file does not exist.\n * * `'r+'` - Open file for reading and writing. An exception occurs if the file does not exist.\n * * `'rs'` - Open file for reading in synchronous mode. Instructs the filesystem to not cache writes.\n * * `'rs+'` - Open file for reading and writing, and opens the file in synchronous mode.\n * * `'w'` - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).\n * * `'wx'` - Like 'w' but opens the file in exclusive mode.\n * * `'w+'` - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).\n * * `'wx+'` - Like 'w+' but opens the file in exclusive mode.\n * * `'a'` - Open file for appending. The file is created if it does not exist.\n * * `'ax'` - Like 'a' but opens the file in exclusive mode.\n * * `'a+'` - Open file for reading and appending. The file is created if it does not exist.\n * * `'ax+'` - Like 'a+' but opens the file in exclusive mode.\n *\n * Exclusive mode ensures that the file path is newly created.\n */\nexport class FileFlag {\n\t// Contains cached FileMode instances.\n\tprivate static flagCache: Map<string, FileFlag> = new Map();\n\t// Array of valid mode strings.\n\tprivate static validFlagStrs = ['r', 'r+', 'rs', 'rs+', 'w', 'wx', 'w+', 'wx+', 'a', 'ax', 'a+', 'ax+'];\n\n\t/**\n\t * Get an object representing the given file flag.\n\t * @param modeStr The string representing the flag\n\t * @return The FileFlag object representing the flag\n\t * @throw when the flag string is invalid\n\t */\n\tpublic static getFileFlag(flagStr: string): FileFlag {\n\t\t// Check cache first.\n\t\tif (!FileFlag.flagCache.has(flagStr)) {\n\t\t\tFileFlag.flagCache.set(flagStr, new FileFlag(flagStr));\n\t\t}\n\t\treturn FileFlag.flagCache.get(flagStr);\n\t}\n\n\tprivate flagStr: string;\n\t/**\n\t * This should never be called directly.\n\t * @param modeStr The string representing the mode\n\t * @throw when the mode string is invalid\n\t */\n\tconstructor(flagStr: string) {\n\t\tthis.flagStr = flagStr;\n\t\tif (FileFlag.validFlagStrs.indexOf(flagStr) < 0) {\n\t\t\tthrow new ApiError(ErrorCode.EINVAL, 'Invalid flag: ' + flagStr);\n\t\t}\n\t}\n\n\t/**\n\t * Get the underlying flag string for this flag.\n\t */\n\tpublic getFlagString(): string {\n\t\treturn this.flagStr;\n\t}\n\n\t/**\n\t * Get the equivalent mode (0b0xxx: read, write, execute)\n\t * Note: Execute will always be 0\n\t */\n\tpublic getMode(): number {\n\t\tlet mode = 0;\n\t\tmode <<= 1;\n\t\tmode += +this.isReadable();\n\t\tmode <<= 1;\n\t\tmode += +this.isWriteable();\n\t\tmode <<= 1;\n\t\treturn mode;\n\t}\n\n\t/**\n\t * Returns true if the file is readable.\n\t */\n\tpublic isReadable(): boolean {\n\t\treturn this.flagStr.indexOf('r') !== -1 || this.flagStr.indexOf('+') !== -1;\n\t}\n\t/**\n\t * Returns true if the file is writeable.\n\t */\n\tpublic isWriteable(): boolean {\n\t\treturn this.flagStr.indexOf('w') !== -1 || this.flagStr.indexOf('a') !== -1 || this.flagStr.indexOf('+') !== -1;\n\t}\n\t/**\n\t * Returns true if the file mode should truncate.\n\t */\n\tpublic isTruncating(): boolean {\n\t\treturn this.flagStr.indexOf('w') !== -1;\n\t}\n\t/**\n\t * Returns true if the file is appendable.\n\t */\n\tpublic isAppendable(): boolean {\n\t\treturn this.flagStr.indexOf('a') !== -1;\n\t}\n\t/**\n\t * Returns true if the file is open in synchronous mode.\n\t */\n\tpublic isSynchronous(): boolean {\n\t\treturn this.flagStr.indexOf('s') !== -1;\n\t}\n\t/**\n\t * Returns true if the file is open in exclusive mode.\n\t */\n\tpublic isExclusive(): boolean {\n\t\treturn this.flagStr.indexOf('x') !== -1;\n\t}\n\t/**\n\t * Returns one of the static fields on this object that indicates the\n\t * appropriate response to the path existing.\n\t */\n\tpublic pathExistsAction(): ActionType {\n\t\tif (this.isExclusive()) {\n\t\t\treturn ActionType.THROW_EXCEPTION;\n\t\t} else if (this.isTruncating()) {\n\t\t\treturn ActionType.TRUNCATE_FILE;\n\t\t} else {\n\t\t\treturn ActionType.NOP;\n\t\t}\n\t}\n\t/**\n\t * Returns one of the static fields on this object that indicates the\n\t * appropriate response to the path not existing.\n\t */\n\tpublic pathNotExistsAction(): ActionType {\n\t\tif ((this.isWriteable() || this.isAppendable()) && this.flagStr !== 'r+') {\n\t\t\treturn ActionType.CREATE_FILE;\n\t\t} else {\n\t\t\treturn ActionType.THROW_EXCEPTION;\n\t\t}\n\t}\n}\n"]}