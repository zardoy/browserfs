{"version":3,"file":"stats.js","sourceRoot":"","sources":["../../../src/core/stats.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport Cred from './cred';\nimport { Buffer } from 'buffer';\n\n/**\n * Indicates the type of the given file. Applied to 'mode'.\n */\nexport enum FileType {\n\tFILE = 0x8000,\n\tDIRECTORY = 0x4000,\n\tSYMLINK = 0xa000,\n}\n\n/**\n * Indicates the different permssions on the file.\n */\nexport enum FilePerm {\n\tREAD = 0b100,\n\tWRITE = 0b10,\n\tEXECUTE = 0b1,\n}\n\n/**\n * Emulation of Node's `fs.Stats` object.\n *\n * Attribute descriptions are from `man 2 stat'\n * @see http://nodejs.org/api/fs.html#fs_class_fs_stats\n * @see http://man7.org/linux/man-pages/man2/stat.2.html\n */\nexport default class Stats implements fs.Stats {\n\tpublic static fromBuffer(buffer: Buffer): Stats {\n\t\tconst size = buffer.readUInt32LE(0),\n\t\t\tmode = buffer.readUInt32LE(4),\n\t\t\tatime = buffer.readDoubleLE(8),\n\t\t\tmtime = buffer.readDoubleLE(16),\n\t\t\tctime = buffer.readDoubleLE(24),\n\t\t\tuid = buffer.readUInt32LE(32),\n\t\t\tgid = buffer.readUInt32LE(36);\n\n\t\treturn new Stats(mode & 0xf000, size, mode & 0xfff, atime, mtime, ctime, uid, gid);\n\t}\n\n\t/**\n\t * Clones the stats object.\n\t */\n\tpublic static clone(s: Stats): Stats {\n\t\treturn new Stats(s.mode & 0xf000, s.size, s.mode & 0xfff, s.atimeMs, s.mtimeMs, s.ctimeMs, s.uid, s.gid, s.birthtimeMs);\n\t}\n\n\tpublic blocks: number;\n\tpublic mode: number;\n\t/**\n\t * UNSUPPORTED ATTRIBUTES\n\t * I assume no one is going to need these details, although we could fake\n\t * appropriate values if need be.\n\t */\n\t// ID of device containing file\n\tpublic dev: number = 0;\n\t// inode number\n\tpublic ino: number = 0;\n\t// device ID (if special file)\n\tpublic rdev: number = 0;\n\t// number of hard links\n\tpublic nlink: number = 1;\n\t// blocksize for file system I/O\n\tpublic blksize: number = 4096;\n\t// user ID of owner\n\tpublic uid: number = 0;\n\t// group ID of owner\n\tpublic gid: number = 0;\n\t// XXX: Some file systems stash data on stats objects.\n\tpublic fileData: Buffer | null = null;\n\tpublic atimeMs: number;\n\tpublic mtimeMs: number;\n\tpublic ctimeMs: number;\n\tpublic birthtimeMs: number;\n\tpublic size: number;\n\n\tpublic get atime(): Date {\n\t\treturn new Date(this.atimeMs);\n\t}\n\n\tpublic get mtime(): Date {\n\t\treturn new Date(this.mtimeMs);\n\t}\n\n\tpublic get ctime(): Date {\n\t\treturn new Date(this.ctimeMs);\n\t}\n\n\tpublic get birthtime(): Date {\n\t\treturn new Date(this.birthtimeMs);\n\t}\n\n\t/**\n\t * Provides information about a particular entry in the file system.\n\t * @param itemType Type of the item (FILE, DIRECTORY, SYMLINK, or SOCKET)\n\t * @param size Size of the item in bytes. For directories/symlinks,\n\t *   this is normally the size of the struct that represents the item.\n\t * @param mode Unix-style file mode (e.g. 0o644)\n\t * @param atimeMs time of last access, in milliseconds since epoch\n\t * @param mtimeMs time of last modification, in milliseconds since epoch\n\t * @param ctimeMs time of last time file status was changed, in milliseconds since epoch\n\t * @param uid the id of the user that owns the file\n\t * @param gid the id of the group that owns the file\n\t * @param birthtimeMs time of file creation, in milliseconds since epoch\n\t */\n\tconstructor(itemType: FileType, size: number, mode?: number, atimeMs?: number, mtimeMs?: number, ctimeMs?: number, uid?: number, gid?: number, birthtimeMs?: number) {\n\t\tthis.size = size;\n\t\tlet currentTime = 0;\n\t\tif (typeof atimeMs !== 'number') {\n\t\t\tcurrentTime = Date.now();\n\t\t\tatimeMs = currentTime;\n\t\t}\n\t\tif (typeof mtimeMs !== 'number') {\n\t\t\tif (!currentTime) {\n\t\t\t\tcurrentTime = Date.now();\n\t\t\t}\n\t\t\tmtimeMs = currentTime;\n\t\t}\n\t\tif (typeof ctimeMs !== 'number') {\n\t\t\tif (!currentTime) {\n\t\t\t\tcurrentTime = Date.now();\n\t\t\t}\n\t\t\tctimeMs = currentTime;\n\t\t}\n\t\tif (typeof birthtimeMs !== 'number') {\n\t\t\tif (!currentTime) {\n\t\t\t\tcurrentTime = Date.now();\n\t\t\t}\n\t\t\tbirthtimeMs = currentTime;\n\t\t}\n\t\tif (typeof uid !== 'number') {\n\t\t\tuid = 0;\n\t\t}\n\t\tif (typeof gid !== 'number') {\n\t\t\tgid = 0;\n\t\t}\n\t\tthis.atimeMs = atimeMs;\n\t\tthis.ctimeMs = ctimeMs;\n\t\tthis.mtimeMs = mtimeMs;\n\t\tthis.birthtimeMs = birthtimeMs;\n\n\t\tif (!mode) {\n\t\t\tswitch (itemType) {\n\t\t\t\tcase FileType.FILE:\n\t\t\t\t\tthis.mode = 0x1a4;\n\t\t\t\t\tbreak;\n\t\t\t\tcase FileType.DIRECTORY:\n\t\t\t\tdefault:\n\t\t\t\t\tthis.mode = 0x1ff;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.mode = mode;\n\t\t}\n\t\t// number of 512B blocks allocated\n\t\tthis.blocks = Math.ceil(size / 512);\n\t\t// Check if mode also includes top-most bits, which indicate the file's\n\t\t// type.\n\t\tif (this.mode < 0x1000) {\n\t\t\tthis.mode |= itemType;\n\t\t}\n\t}\n\n\tpublic toBuffer(): Buffer {\n\t\tconst buffer = Buffer.alloc(32);\n\t\tbuffer.writeUInt32LE(this.size, 0);\n\t\tbuffer.writeUInt32LE(this.mode, 4);\n\t\tbuffer.writeDoubleLE(this.atime.getTime(), 8);\n\t\tbuffer.writeDoubleLE(this.mtime.getTime(), 16);\n\t\tbuffer.writeDoubleLE(this.ctime.getTime(), 24);\n\t\tbuffer.writeUInt32LE(this.uid, 32);\n\t\tbuffer.writeUInt32LE(this.gid, 36);\n\t\treturn buffer;\n\t}\n\n\t/**\n\t * @return [Boolean] True if this item is a file.\n\t */\n\tpublic isFile(): boolean {\n\t\treturn (this.mode & 0xf000) === FileType.FILE;\n\t}\n\n\t/**\n\t * @return [Boolean] True if this item is a directory.\n\t */\n\tpublic isDirectory(): boolean {\n\t\treturn (this.mode & 0xf000) === FileType.DIRECTORY;\n\t}\n\n\t/**\n\t * @return [Boolean] True if this item is a symbolic link (only valid through lstat)\n\t */\n\tpublic isSymbolicLink(): boolean {\n\t\treturn (this.mode & 0xf000) === FileType.SYMLINK;\n\t}\n\n\t/**\n\t * Checks if a given user/group has access to this item\n\t * @param mode The request access as 4 bits (unused, read, write, execute)\n\t * @param uid The requesting UID\n\t * @param gid The requesting GID\n\t * @returns [Boolean] True if the request has access, false if the request does not\n\t */\n\tpublic hasAccess(mode: number, cred: Cred): boolean {\n\t\tif (cred.euid === 0 || cred.egid === 0) {\n\t\t\t//Running as root\n\t\t\treturn true;\n\t\t}\n\t\tconst perms = this.mode & 0xfff;\n\t\tlet uMode = 0xf,\n\t\t\tgMode = 0xf,\n\t\t\twMode = 0xf;\n\n\t\tif (cred.euid == this.uid) {\n\t\t\tconst uPerms = (0xf00 & perms) >> 8;\n\t\t\tuMode = (mode ^ uPerms) & mode;\n\t\t}\n\t\tif (cred.egid == this.gid) {\n\t\t\tconst gPerms = (0xf0 & perms) >> 4;\n\t\t\tgMode = (mode ^ gPerms) & mode;\n\t\t}\n\t\tconst wPerms = 0xf & perms;\n\t\twMode = (mode ^ wPerms) & mode;\n\t\t/*\n        Result = 0b0xxx (read, write, execute)\n        If any bits are set that means the request does not have that permission.\n    */\n\t\tconst result = uMode & gMode & wMode;\n\t\treturn !result;\n\t}\n\n\t/**\n\t * Convert the current stats object into a cred object\n\t */\n\tpublic getCred(uid: number = this.uid, gid: number = this.gid): Cred {\n\t\treturn new Cred(uid, gid, this.uid, this.gid, uid, gid);\n\t}\n\n\t/**\n\t * Change the mode of the file. We use this helper function to prevent messing\n\t * up the type of the file, which is encoded in mode.\n\t */\n\tpublic chmod(mode: number): void {\n\t\tthis.mode = (this.mode & 0xf000) | mode;\n\t}\n\n\t/**\n\t * Change the owner user/group of the file.\n\t * This function makes sure it is a valid UID/GID (that is, a 32 unsigned int)\n\t */\n\tpublic chown(uid: number, gid: number): void {\n\t\tif (!isNaN(+uid) && 0 <= +uid && +uid < 2 ** 32) {\n\t\t\tthis.uid = uid;\n\t\t}\n\t\tif (!isNaN(+gid) && 0 <= +gid && +gid < 2 ** 32) {\n\t\t\tthis.gid = gid;\n\t\t}\n\t}\n\n\t// We don't support the following types of files.\n\n\tpublic isSocket(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic isBlockDevice(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic isCharacterDevice(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic isFIFO(): boolean {\n\t\treturn false;\n\t}\n}\n"]}