{"version":3,"file":"node_fs_stats.js","sourceRoot":"","sources":["../../../src/core/node_fs_stats.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\r\n\r\n/**\r\n * Indicates the type of the given file. Applied to 'mode'.\r\n */\r\nexport enum FileType {\r\n  FILE = 0x8000,\r\n  DIRECTORY = 0x4000,\r\n  SYMLINK = 0xA000\r\n}\r\n\r\n/**\r\n * Emulation of Node's `fs.Stats` object.\r\n *\r\n * Attribute descriptions are from `man 2 stat'\r\n * @see http://nodejs.org/api/fs.html#fs_class_fs_stats\r\n * @see http://man7.org/linux/man-pages/man2/stat.2.html\r\n */\r\nexport default class Stats implements fs.Stats {\r\n  public static fromBuffer(buffer: Buffer): Stats {\r\n    const size = buffer.readUInt32LE(0),\r\n      mode = buffer.readUInt32LE(4),\r\n      atime = buffer.readDoubleLE(8),\r\n      mtime = buffer.readDoubleLE(16),\r\n      ctime = buffer.readDoubleLE(24);\r\n\r\n    return new Stats(mode & 0xF000, size, mode & 0xFFF, new Date(atime), new Date(mtime), new Date(ctime));\r\n  }\r\n\r\n  public blocks: number;\r\n  public mode: number;\r\n  /**\r\n   * UNSUPPORTED ATTRIBUTES\r\n   * I assume no one is going to need these details, although we could fake\r\n   * appropriate values if need be.\r\n   */\r\n  // ID of device containing file\r\n  public dev: number = 0;\r\n  // inode number\r\n  public ino: number = 0;\r\n  // device ID (if special file)\r\n  public rdev: number = 0;\r\n  // number of hard links\r\n  public nlink: number = 1;\r\n  // blocksize for file system I/O\r\n  public blksize: number = 4096;\r\n  // @todo Maybe support these? atm, it's a one-user filesystem.\r\n  // user ID of owner\r\n  public uid: number = 0;\r\n  // group ID of owner\r\n  public gid: number = 0;\r\n  // time file was created (currently unsupported)\r\n  public birthtime: Date = new Date(0);\r\n  // XXX: Some file systems stash data on stats objects.\r\n  public fileData: Buffer | null= null;\r\n\r\n  /**\r\n   * Provides information about a particular entry in the file system.\r\n   * @param [Number] item_type type of the item (FILE, DIRECTORY, SYMLINK, or SOCKET)\r\n   * @param [Number] size Size of the item in bytes. For directories/symlinks,\r\n   *   this is normally the size of the struct that represents the item.\r\n   * @param [Number] mode Unix-style file mode (e.g. 0o644)\r\n   * @param [Date?] atime time of last access\r\n   * @param [Date?] mtime time of last modification\r\n   * @param [Date?] ctime time of creation\r\n   */\r\n  constructor(\r\n    itemType: FileType,\r\n    public size: number,\r\n    mode?: number,\r\n    public atime: Date = new Date(),\r\n    public mtime: Date = new Date(),\r\n    public ctime: Date = new Date()) {\r\n    if (!mode) {\r\n      switch (itemType) {\r\n        case FileType.FILE:\r\n          this.mode = 0x1a4;\r\n          break;\r\n        case FileType.DIRECTORY:\r\n        default:\r\n          this.mode = 0x1ff;\r\n      }\r\n    } else {\r\n      this.mode = mode;\r\n    }\r\n    // number of 512B blocks allocated\r\n    this.blocks = Math.ceil(size / 512);\r\n    // Check if mode also includes top-most bits, which indicate the file's\r\n    // type.\r\n    if (this.mode < 0x1000) {\r\n      this.mode |= itemType;\r\n    }\r\n  }\r\n\r\n  public toBuffer(): Buffer {\r\n    const buffer = Buffer.alloc(32);\r\n    buffer.writeUInt32LE(this.size, 0);\r\n    buffer.writeUInt32LE(this.mode, 4);\r\n    buffer.writeDoubleLE(this.atime.getTime(), 8);\r\n    buffer.writeDoubleLE(this.mtime.getTime(), 16);\r\n    buffer.writeDoubleLE(this.ctime.getTime(), 24);\r\n    return buffer;\r\n  }\r\n\r\n  /**\r\n   * **Nonstandard**: Clone the stats object.\r\n   * @return [BrowserFS.node.fs.Stats]\r\n   */\r\n  public clone(): Stats {\r\n    return new Stats(this.mode & 0xF000, this.size, this.mode & 0xFFF, this.atime, this.mtime, this.ctime);\r\n  }\r\n\r\n  /**\r\n   * @return [Boolean] True if this item is a file.\r\n   */\r\n  public isFile(): boolean {\r\n    return (this.mode & 0xF000) === FileType.FILE;\r\n  }\r\n\r\n  /**\r\n   * @return [Boolean] True if this item is a directory.\r\n   */\r\n  public isDirectory(): boolean {\r\n    return (this.mode & 0xF000) === FileType.DIRECTORY;\r\n  }\r\n\r\n  /**\r\n   * @return [Boolean] True if this item is a symbolic link (only valid through lstat)\r\n   */\r\n  public isSymbolicLink(): boolean {\r\n    return (this.mode & 0xF000) === FileType.SYMLINK;\r\n  }\r\n\r\n  /**\r\n   * Change the mode of the file. We use this helper function to prevent messing\r\n   * up the type of the file, which is encoded in mode.\r\n   */\r\n  public chmod(mode: number): void {\r\n    this.mode = (this.mode & 0xF000) | mode;\r\n  }\r\n\r\n  // We don't support the following types of files.\r\n\r\n  public isSocket(): boolean {\r\n    return false;\r\n  }\r\n\r\n  public isBlockDevice(): boolean {\r\n    return false;\r\n  }\r\n\r\n  public isCharacterDevice(): boolean {\r\n    return false;\r\n  }\r\n\r\n  public isFIFO(): boolean {\r\n    return false;\r\n  }\r\n}\r\n"]}