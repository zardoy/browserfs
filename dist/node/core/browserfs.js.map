{"version":3,"file":"browserfs.js","sourceRoot":"","sources":["../../../src/core/browserfs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * BrowserFS's main module. This is exposed in the browser via the BrowserFS global.\n * Due to limitations in typedoc, we document these functions in ./typedoc.ts.\n */\n\nimport * as buffer from 'buffer';\nimport fs from './node_fs';\nimport * as path from 'path';\nimport { FileSystemConstructor, FileSystem, BFSOneArgCallback, BFSCallback } from './file_system';\nimport EmscriptenFS from '../generic/emscripten_fs';\nimport Backends from './backends';\nimport * as BFSUtils from './util';\nimport * as Errors from './api_error';\nimport setImmediate from '../generic/setImmediate';\nimport Cred from './cred';\nimport * as process from 'process';\n\nif (process && (<any>process)['initializeTTYs']) {\n\t(<any>process)['initializeTTYs']();\n}\n\n/**\n * Installs BFSRequire as global `require`, a Node Buffer polyfill as the global `Buffer` variable,\n * and a Node process polyfill as the global `process` variable.\n */\nexport function install(obj: any) {\n\tobj.Buffer = Buffer;\n\tobj.process = process;\n\tconst oldRequire = obj.require ? obj.require : null;\n\t// Monkey-patch require for Node-style code.\n\tobj.require = function (arg: string) {\n\t\tconst rv = BFSRequire(arg);\n\t\tif (!rv) {\n\t\t\treturn oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));\n\t\t} else {\n\t\t\treturn rv;\n\t\t}\n\t};\n}\n\n/**\n * @hidden\n */\nexport function registerFileSystem(name: string, fs: FileSystemConstructor) {\n\t(<any>Backends)[name] = fs;\n}\n\n/**\n * Polyfill for CommonJS `require()`. For example, can call `BFSRequire('fs')` to get a 'fs' module polyfill.\n */\nexport function BFSRequire(module: 'fs'): typeof fs;\nexport function BFSRequire(module: 'path'): typeof path;\nexport function BFSRequire(module: 'buffer'): typeof buffer;\nexport function BFSRequire(module: 'process'): typeof process;\nexport function BFSRequire(module: 'bfs_utils'): typeof BFSUtils;\nexport function BFSRequire(module: string): any;\nexport function BFSRequire(module: string): any {\n\tswitch (module) {\n\t\tcase 'fs':\n\t\t\treturn fs;\n\t\tcase 'path':\n\t\t\treturn path;\n\t\tcase 'buffer':\n\t\t\t// The 'buffer' module has 'Buffer' as a property.\n\t\t\treturn buffer;\n\t\tcase 'process':\n\t\t\treturn process;\n\t\tcase 'bfs_utils':\n\t\tcase 'bfs-utils':\n\t\t\treturn BFSUtils;\n\t\tdefault:\n\t\t\treturn (<any>Backends)[module];\n\t}\n}\n\n/**\n * Initializes BrowserFS with the given root file system.\n */\nexport function initialize(rootfs: FileSystem, uid: number = 0, gid: number = 0) {\n\tconst cred = new Cred(uid, gid, uid, gid, uid, gid);\n\treturn fs.initialize(rootfs, cred);\n}\n\n/**\n * Creates a file system with the given configuration, and initializes BrowserFS with it.\n * See the FileSystemConfiguration type for more info on the configuration object.\n */\nexport function configure(config: FileSystemConfiguration, cb: BFSOneArgCallback): void {\n\tgetFileSystem(config, (e, fs?) => {\n\t\tif (fs) {\n\t\t\tinitialize(fs);\n\t\t\tcb();\n\t\t} else {\n\t\t\tcb(e);\n\t\t}\n\t});\n}\n\n/**\n * Asynchronously creates a file system with the given configuration, and initializes BrowserFS with it.\n * See the FileSystemConfiguration type for more info on the configuration object.\n * Note: unlike configure, the .then is provided with the file system\n */\nexport function configureAsync(config: FileSystemConfiguration): Promise<FileSystem | Errors.ApiError | null> {\n\treturn new Promise((resolve, reject) => {\n\t\tgetFileSystem(config, (e, fs?) => {\n\t\t\tif (fs) {\n\t\t\t\tinitialize(fs);\n\t\t\t\tresolve(fs);\n\t\t\t} else {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Specifies a file system backend type and its options.\n *\n * Individual options can recursively contain FileSystemConfiguration objects for\n * option values that require file systems.\n *\n * For example, to mirror Dropbox to LocalStorage with AsyncMirror, use the following\n * object:\n *\n * ```javascript\n * var config = {\n *   fs: \"AsyncMirror\",\n *   options: {\n *     sync: {fs: \"LocalStorage\"},\n *     async: {fs: \"Dropbox\", options: {client: anAuthenticatedDropboxSDKClient }}\n *   }\n * };\n * ```\n *\n * The option object for each file system corresponds to that file system's option object passed to its `Create()` method.\n */\nexport interface FileSystemConfiguration {\n\tfs: string;\n\toptions?: any;\n}\n\n/**\n * Retrieve a file system with the given configuration.\n * @param config A FileSystemConfiguration object. See FileSystemConfiguration for details.\n * @param cb Called when the file system is constructed, or when an error occurs.\n */\nexport function getFileSystem(config: FileSystemConfiguration, cb: BFSCallback<FileSystem>): void {\n\tconst fsName = config['fs'];\n\tif (!fsName) {\n\t\treturn cb(new Errors.ApiError(Errors.ErrorCode.EPERM, 'Missing \"fs\" property on configuration object.'));\n\t}\n\tconst options = config['options'];\n\tlet waitCount = 0;\n\tlet called = false;\n\tfunction finish() {\n\t\tif (!called) {\n\t\t\tcalled = true;\n\t\t\tconst fsc = <FileSystemConstructor | undefined>(<any>Backends)[fsName];\n\t\t\tif (!fsc) {\n\t\t\t\tcb(new Errors.ApiError(Errors.ErrorCode.EPERM, `File system ${fsName} is not available in BrowserFS.`));\n\t\t\t} else {\n\t\t\t\tfsc.Create(options, cb);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (options !== null && typeof options === 'object') {\n\t\tlet finishedIterating = false;\n\t\tconst props = Object.keys(options).filter(k => k !== 'fs');\n\t\t// Check recursively if other fields have 'fs' properties.\n\t\tprops.forEach(p => {\n\t\t\tconst d = options[p];\n\t\t\tif (d !== null && typeof d === 'object' && d['fs']) {\n\t\t\t\twaitCount++;\n\t\t\t\tgetFileSystem(d, function (e, fs?) {\n\t\t\t\t\twaitCount--;\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\tif (called) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcalled = true;\n\t\t\t\t\t\tcb(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions[p] = fs;\n\t\t\t\t\t\tif (waitCount === 0 && finishedIterating) {\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tfinishedIterating = true;\n\t}\n\tif (waitCount === 0) {\n\t\tfinish();\n\t}\n}\n\nexport { EmscriptenFS, Backends as FileSystem, Errors, setImmediate };\n"]}