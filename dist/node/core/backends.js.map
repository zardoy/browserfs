{"version":3,"file":"backends.js","sourceRoot":"","sources":["../../../src/core/backends.ts"],"names":[],"mappings":";;AAEA,+BAAsC;AACtC,sDAAiD;AACjD,8CAAyC;AACzC,oDAA+C;AAC/C,gEAA2D;AAC3D,0DAAqD;AACrD,gDAA2C;AAC3C,kDAA6C;AAC7C,wDAAmD;AACnD,sEAAiE;AACjE,kDAA6C;AAC7C,gDAA2C;AAC3C,sDAAiD;AACjD,0CAAqC;AACrC,0CAAqC;AAErC,sFAAsF;AACtF,CAAC,qBAAW,EAAE,iBAAO,EAAE,oBAAU,EAAE,0BAAgB,EAAE,uBAAa,EAAE,kBAAQ,EAAE,mBAAS,EAAE,eAAK,EAAE,sBAAY,EAAE,6BAAmB,EAAE,mBAAS,EAAE,kBAAQ,EAAE,qBAAW,EAAE,eAAK,CAAC,CAAC,OAAO,CAClL,UAAC,MAA6B;IAC7B,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,MAAM,CAAC,MAAM,GAAG,UAAU,IAAU,EAAE,EAA4B;QACjE,IAAM,MAAM,GAAG,OAAO,IAAI,KAAK,UAAU,CAAC;QAC1C,IAAM,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QACxC,IAAM,cAAc,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QAE1C,SAAS,SAAS,CAAC,CAAY;YAC9B,IAAI,CAAC,EAAE;gBACN,YAAY,CAAC,CAAC,CAAC,CAAC;aAChB;iBAAM;gBACN,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;aAClD;QACF,CAAC;QAED,IAAA,mBAAY,EAAC,MAAM,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;IACjD,CAAC,CAAC;AACH,CAAC,CACD,CAAC;AAEF;;GAEG;AACH,IAAM,QAAQ,GAAG;IAChB,WAAW,uBAAA;IACX,OAAO,mBAAA;IACP,UAAU,sBAAA;IACV,gBAAgB,4BAAA;IAChB,aAAa,yBAAA;IACb,QAAQ,oBAAA;IACR,SAAS,qBAAA;IACT,KAAK,iBAAA;IACL,YAAY,wBAAA;IACZ,mBAAmB,+BAAA;IACnB,SAAS,qBAAA;IACT,QAAQ,oBAAA;IACR,WAAW,uBAAA;IACX,cAAc,EAAE,qBAAW;IAC3B,KAAK,iBAAA;CACL,CAAC;AACF,2EAA2E;AAC3E,IAAM,CAAC,GAA8C,QAAQ,CAAC;AAC9D,gDAAgD;AAChD,CAAC,CAAC;AACF,+CAA+C;AAC/C,kBAAe,QAAQ,CAAC","sourcesContent":["import { FileSystemConstructor, BFSCallback, FileSystem } from './file_system';\nimport { ApiError } from './api_error';\nimport { checkOptions } from './util';\nimport AsyncMirror from '../backend/AsyncMirror';\nimport Dropbox from '../backend/Dropbox';\nimport Emscripten from '../backend/Emscripten';\nimport FileSystemAccess from '../backend/FileSystemAccess';\nimport FolderAdapter from '../backend/FolderAdapter';\nimport InMemory from '../backend/InMemory';\nimport IndexedDB from '../backend/IndexedDB';\nimport LocalStorage from '../backend/LocalStorage';\nimport MountableFileSystem from '../backend/MountableFileSystem';\nimport OverlayFS from '../backend/OverlayFS';\nimport WorkerFS from '../backend/WorkerFS';\nimport HTTPRequest from '../backend/HTTPRequest';\nimport ZipFS from '../backend/ZipFS';\nimport IsoFS from '../backend/IsoFS';\n\n// Monkey-patch `Create` functions to check options before file system initialization.\n[AsyncMirror, Dropbox, Emscripten, FileSystemAccess, FolderAdapter, InMemory, IndexedDB, IsoFS, LocalStorage, MountableFileSystem, OverlayFS, WorkerFS, HTTPRequest, ZipFS].forEach(\n\t(fsType: FileSystemConstructor) => {\n\t\tconst create = fsType.Create;\n\t\tfsType.Create = function (opts?: any, cb?: BFSCallback<FileSystem>): void {\n\t\t\tconst oneArg = typeof opts === 'function';\n\t\t\tconst normalizedCb = oneArg ? opts : cb;\n\t\t\tconst normalizedOpts = oneArg ? {} : opts;\n\n\t\t\tfunction wrappedCb(e?: ApiError): void {\n\t\t\t\tif (e) {\n\t\t\t\t\tnormalizedCb(e);\n\t\t\t\t} else {\n\t\t\t\t\tcreate.call(fsType, normalizedOpts, normalizedCb);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcheckOptions(fsType, normalizedOpts, wrappedCb);\n\t\t};\n\t}\n);\n\n/**\n * @hidden\n */\nconst Backends = {\n\tAsyncMirror,\n\tDropbox,\n\tEmscripten,\n\tFileSystemAccess,\n\tFolderAdapter,\n\tInMemory,\n\tIndexedDB,\n\tIsoFS,\n\tLocalStorage,\n\tMountableFileSystem,\n\tOverlayFS,\n\tWorkerFS,\n\tHTTPRequest,\n\tXmlHttpRequest: HTTPRequest,\n\tZipFS,\n};\n// Make sure all backends cast to FileSystemConstructor (for type checking)\nconst _: { [name: string]: FileSystemConstructor } = Backends;\n// tslint:disable-next-line:no-unused-expression\n_;\n// tslint:enable-next-line:no-unused-expression\nexport default Backends;\n"]}