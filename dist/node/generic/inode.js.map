{"version":3,"file":"inode.js","sourceRoot":"","sources":["../../../src/generic/inode.ts"],"names":[],"mappings":"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","sourcesContent":["import { default as Stats, FileType } from '../core/stats';\nimport { Buffer } from 'buffer';\n\n/**\n * Generic inode definition that can easily be serialized.\n */\nexport default class Inode {\n\t/**\n\t * Converts the buffer into an Inode.\n\t */\n\tpublic static fromBuffer(buffer: Buffer): Inode {\n\t\tif (buffer === undefined) {\n\t\t\tthrow new Error('NO');\n\t\t}\n\t\treturn new Inode(\n\t\t\tbuffer.toString('ascii', 38),\n\t\t\tbuffer.readUInt32LE(0),\n\t\t\tbuffer.readUInt16LE(4),\n\t\t\tbuffer.readDoubleLE(6),\n\t\t\tbuffer.readDoubleLE(14),\n\t\t\tbuffer.readDoubleLE(22),\n\t\t\tbuffer.readUInt32LE(30),\n\t\t\tbuffer.readUInt32LE(34)\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic id: string,\n\t\tpublic size: number,\n\t\tpublic mode: number,\n\t\tpublic atime: number,\n\t\tpublic mtime: number,\n\t\tpublic ctime: number,\n\t\tpublic uid: number,\n\t\tpublic gid: number\n\t) {}\n\n\t/**\n\t * Handy function that converts the Inode to a Node Stats object.\n\t */\n\tpublic toStats(): Stats {\n\t\treturn new Stats(\n\t\t\t(this.mode & 0xf000) === FileType.DIRECTORY ? FileType.DIRECTORY : FileType.FILE,\n\t\t\tthis.size,\n\t\t\tthis.mode,\n\t\t\tthis.atime,\n\t\t\tthis.mtime,\n\t\t\tthis.ctime,\n\t\t\tthis.uid,\n\t\t\tthis.gid\n\t\t);\n\t}\n\n\t/**\n\t * Get the size of this Inode, in bytes.\n\t */\n\tpublic getSize(): number {\n\t\t// ASSUMPTION: ID is ASCII (1 byte per char).\n\t\treturn 38 + this.id.length;\n\t}\n\n\t/**\n\t * Writes the inode into the start of the buffer.\n\t */\n\tpublic toBuffer(buff: Buffer = Buffer.alloc(this.getSize())): Buffer {\n\t\tbuff.writeUInt32LE(this.size, 0);\n\t\tbuff.writeUInt16LE(this.mode, 4);\n\t\tbuff.writeDoubleLE(this.atime, 6);\n\t\tbuff.writeDoubleLE(this.mtime, 14);\n\t\tbuff.writeDoubleLE(this.ctime, 22);\n\t\tbuff.writeUInt32LE(this.uid, 30);\n\t\tbuff.writeUInt32LE(this.gid, 34);\n\t\tbuff.write(this.id, 38, this.id.length, 'ascii');\n\t\treturn buff;\n\t}\n\n\t/**\n\t * Updates the Inode using information from the stats object. Used by file\n\t * systems at sync time, e.g.:\n\t * - Program opens file and gets a File object.\n\t * - Program mutates file. File object is responsible for maintaining\n\t *   metadata changes locally -- typically in a Stats object.\n\t * - Program closes file. File object's metadata changes are synced with the\n\t *   file system.\n\t * @return True if any changes have occurred.\n\t */\n\tpublic update(stats: Stats): boolean {\n\t\tlet hasChanged = false;\n\t\tif (this.size !== stats.size) {\n\t\t\tthis.size = stats.size;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\tif (this.mode !== stats.mode) {\n\t\t\tthis.mode = stats.mode;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\tconst atimeMs = stats.atime.getTime();\n\t\tif (this.atime !== atimeMs) {\n\t\t\tthis.atime = atimeMs;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\tconst mtimeMs = stats.mtime.getTime();\n\t\tif (this.mtime !== mtimeMs) {\n\t\t\tthis.mtime = mtimeMs;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\tconst ctimeMs = stats.ctime.getTime();\n\t\tif (this.ctime !== ctimeMs) {\n\t\t\tthis.ctime = ctimeMs;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\tif (this.uid !== stats.uid) {\n\t\t\tthis.uid = stats.uid;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\tif (this.uid !== stats.uid) {\n\t\t\tthis.uid = stats.uid;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\treturn hasChanged;\n\t}\n\n\t// XXX: Copied from Stats. Should reconcile these two into something more\n\t//      compact.\n\n\t/**\n\t * @return [Boolean] True if this item is a file.\n\t */\n\tpublic isFile(): boolean {\n\t\treturn (this.mode & 0xf000) === FileType.FILE;\n\t}\n\n\t/**\n\t * @return [Boolean] True if this item is a directory.\n\t */\n\tpublic isDirectory(): boolean {\n\t\treturn (this.mode & 0xf000) === FileType.DIRECTORY;\n\t}\n}\n"]}