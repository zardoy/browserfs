{"version":3,"file":"xhr.js","sourceRoot":"","sources":["../../../src/generic/xhr.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Contains utility methods for performing a variety of tasks with\n * XmlHttpRequest across browsers.\n */\n\nimport { isIE, emptyBuffer } from '../core/util';\nimport { ApiError, ErrorCode } from '../core/api_error';\nimport { BFSCallback } from '../core/file_system';\nimport { Buffer } from 'buffer';\n\nexport const xhrIsAvailable = typeof XMLHttpRequest !== 'undefined' && XMLHttpRequest !== null;\n\n/**\n * @hidden\n */\nfunction asyncDownloadFileModern(p: string, type: 'buffer', cb: BFSCallback<Buffer>): void;\nfunction asyncDownloadFileModern(p: string, type: 'json', cb: BFSCallback<any>): void;\nfunction asyncDownloadFileModern(p: string, type: string, cb: BFSCallback<any>): void;\nfunction asyncDownloadFileModern(p: string, type: string, cb: BFSCallback<any>): void {\n\tconst req = new XMLHttpRequest();\n\treq.open('GET', p, true);\n\tlet jsonSupported = true;\n\tswitch (type) {\n\t\tcase 'buffer':\n\t\t\treq.responseType = 'arraybuffer';\n\t\t\tbreak;\n\t\tcase 'json':\n\t\t\t// Some browsers don't support the JSON response type.\n\t\t\t// They either reset responseType, or throw an exception.\n\t\t\t// @see https://github.com/Modernizr/Modernizr/blob/master/src/testXhrType.js\n\t\t\ttry {\n\t\t\t\treq.responseType = 'json';\n\t\t\t\tjsonSupported = req.responseType === 'json';\n\t\t\t} catch (e) {\n\t\t\t\tjsonSupported = false;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn cb(new ApiError(ErrorCode.EINVAL, 'Invalid download type: ' + type));\n\t}\n\treq.onreadystatechange = function (e) {\n\t\tif (req.readyState === 4) {\n\t\t\tif (req.status === 200) {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\t// XXX: WebKit-based browsers return *null* when XHRing an empty file.\n\t\t\t\t\t\treturn cb(null, req.response ? Buffer.from(req.response) : emptyBuffer());\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tif (jsonSupported) {\n\t\t\t\t\t\t\treturn cb(null, req.response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn cb(null, JSON.parse(req.responseText));\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn cb(new ApiError(ErrorCode.EIO, `XHR error: response returned code ${req.status}`));\n\t\t\t}\n\t\t}\n\t};\n\treq.send();\n}\n\n/**\n * @hidden\n */\nfunction syncDownloadFileModern(p: string, type: 'buffer'): Buffer;\nfunction syncDownloadFileModern(p: string, type: 'json'): any;\nfunction syncDownloadFileModern(p: string, type: string): any;\nfunction syncDownloadFileModern(p: string, type: string): any {\n\tconst req = new XMLHttpRequest();\n\treq.open('GET', p, false);\n\n\t// On most platforms, we cannot set the responseType of synchronous downloads.\n\t// @todo Test for this; IE10 allows this, as do older versions of Chrome/FF.\n\tlet data: any = null;\n\tlet err: any = null;\n\t// Classic hack to download binary data as a string.\n\treq.overrideMimeType('text/plain; charset=x-user-defined');\n\treq.onreadystatechange = function (e) {\n\t\tif (req.readyState === 4) {\n\t\t\tif (req.status === 200) {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\t// Convert the text into a buffer.\n\t\t\t\t\t\tconst text = req.responseText;\n\t\t\t\t\t\tdata = Buffer.alloc(text.length);\n\t\t\t\t\t\t// Throw away the upper bits of each character.\n\t\t\t\t\t\tfor (let i = 0; i < text.length; i++) {\n\t\t\t\t\t\t\t// This will automatically throw away the upper bit of each\n\t\t\t\t\t\t\t// character for us.\n\t\t\t\t\t\t\tdata[i] = text.charCodeAt(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tdata = JSON.parse(req.responseText);\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = new ApiError(ErrorCode.EIO, `XHR error: response returned code ${req.status}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t};\n\treq.send();\n\tif (err) {\n\t\tthrow err;\n\t}\n\treturn data;\n}\n\n/**\n * IE10 allows us to perform synchronous binary file downloads.\n * @todo Feature detect this, as older versions of FF/Chrome do too!\n * @hidden\n */\nfunction syncDownloadFileIE10(p: string, type: 'buffer'): Buffer;\nfunction syncDownloadFileIE10(p: string, type: 'json'): any;\nfunction syncDownloadFileIE10(p: string, type: string): any;\nfunction syncDownloadFileIE10(p: string, type: string): any {\n\tconst req = new XMLHttpRequest();\n\treq.open('GET', p, false);\n\tswitch (type) {\n\t\tcase 'buffer':\n\t\t\treq.responseType = 'arraybuffer';\n\t\t\tbreak;\n\t\tcase 'json':\n\t\t\t// IE10 does not support the JSON type.\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new ApiError(ErrorCode.EINVAL, 'Invalid download type: ' + type);\n\t}\n\tlet data: any;\n\tlet err: any;\n\treq.onreadystatechange = function (e) {\n\t\tif (req.readyState === 4) {\n\t\t\tif (req.status === 200) {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\tdata = Buffer.from(req.response);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tdata = JSON.parse(req.response);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = new ApiError(ErrorCode.EIO, `XHR error: response returned code ${req.status}`);\n\t\t\t}\n\t\t}\n\t};\n\treq.send();\n\tif (err) {\n\t\tthrow err;\n\t}\n\treturn data;\n}\n\n/**\n * @hidden\n */\nfunction getFileSize(async: boolean, p: string, cb: BFSCallback<number>): void {\n\tconst req = new XMLHttpRequest();\n\treq.open('HEAD', p, async);\n\treq.onreadystatechange = function (e) {\n\t\tif (req.readyState === 4) {\n\t\t\tif (req.status === 200) {\n\t\t\t\ttry {\n\t\t\t\t\treturn cb(null, parseInt(req.getResponseHeader('Content-Length') || '-1', 10));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// In the event that the header isn't present or there is an error...\n\t\t\t\t\treturn cb(new ApiError(ErrorCode.EIO, 'XHR HEAD error: Could not read content-length.'));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn cb(new ApiError(ErrorCode.EIO, `XHR HEAD error: response returned code ${req.status}`));\n\t\t\t}\n\t\t}\n\t};\n\treq.send();\n}\n\n/**\n * Asynchronously download a file as a buffer or a JSON object.\n * Note that the third function signature with a non-specialized type is\n * invalid, but TypeScript requires it when you specialize string arguments to\n * constants.\n * @hidden\n */\nexport let asyncDownloadFile: {\n\t(p: string, type: 'buffer', cb: BFSCallback<Buffer>): void;\n\t(p: string, type: 'json', cb: BFSCallback<any>): void;\n\t(p: string, type: string, cb: BFSCallback<any>): void;\n} = asyncDownloadFileModern;\n\n/**\n * Synchronously download a file as a buffer or a JSON object.\n * Note that the third function signature with a non-specialized type is\n * invalid, but TypeScript requires it when you specialize string arguments to\n * constants.\n * @hidden\n */\nexport let syncDownloadFile: {\n\t(p: string, type: 'buffer'): Buffer;\n\t(p: string, type: 'json'): any;\n\t(p: string, type: string): any;\n} = isIE && typeof Blob !== 'undefined' ? syncDownloadFileIE10 : syncDownloadFileModern;\n\n/**\n * Synchronously retrieves the size of the given file in bytes.\n * @hidden\n */\nexport function getFileSizeSync(p: string): number {\n\tlet rv: number = -1;\n\tgetFileSize(false, p, function (err: ApiError, size?: number) {\n\t\tif (err) {\n\t\t\tthrow err;\n\t\t}\n\t\trv = size!;\n\t});\n\treturn rv;\n}\n\n/**\n * Asynchronously retrieves the size of the given file in bytes.\n * @hidden\n */\nexport function getFileSizeAsync(p: string, cb: (err: ApiError, size?: number) => void): void {\n\tgetFileSize(true, p, cb);\n}\n"]}