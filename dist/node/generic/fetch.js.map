{"version":3,"file":"fetch.js","sourceRoot":"","sources":["../../../src/generic/fetch.ts"],"names":[],"mappings":";;;AAAA,iCAAgC;AAChC;;GAEG;AAEH,+CAAwD;AAG3C,QAAA,gBAAgB,GAAG,OAAO,KAAK,KAAK,WAAW,IAAI,KAAK,KAAK,IAAI,CAAC;AAY/E,SAAgB,cAAc,CAAC,CAAS,EAAE,IAAY,EAAE,EAAoB;IAC3E,IAAI,OAAO,CAAC;IACZ,IAAI;QACH,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;KACnB;IAAC,OAAO,CAAC,EAAE;QACX,qEAAqE;QACrE,OAAO,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;KACrD;IACD,OAAO;SACL,IAAI,CAAC,UAAA,GAAG;QACR,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE;YACZ,OAAO,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,GAAG,EAAE,8CAAuC,GAAG,CAAC,MAAM,CAAE,CAAC,CAAC,CAAC;SAC5F;aAAM;YACN,QAAQ,IAAI,EAAE;gBACb,KAAK,QAAQ;oBACZ,GAAG,CAAC,WAAW,EAAE;yBACf,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,EAAE,CAAC,IAAI,EAAE,eAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAA1B,CAA0B,CAAC;yBACvC,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,EAA5C,CAA4C,CAAC,CAAC;oBAC7D,MAAM;gBACP,KAAK,MAAM;oBACV,GAAG,CAAC,IAAI,EAAE;yBACR,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAd,CAAc,CAAC;yBAC5B,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,EAA5C,CAA4C,CAAC,CAAC;oBAC7D,MAAM;gBACP;oBACC,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,MAAM,EAAE,yBAAyB,GAAG,IAAI,CAAC,CAAC,CAAC;aACtE;SACD;IACF,CAAC,CAAC;SACD,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,EAA5C,CAA4C,CAAC,CAAC;AAC9D,CAAC;AA9BD,wCA8BC;AAED;;;GAGG;AACH,SAAgB,kBAAkB,CAAC,CAAS,EAAE,EAAuB;IACpE,KAAK,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;SAC1B,IAAI,CAAC,UAAA,GAAG;QACR,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE;YACZ,OAAO,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,GAAG,EAAE,mDAA4C,GAAG,CAAC,MAAM,CAAE,CAAC,CAAC,CAAC;SACjG;aAAM;YACN,OAAO,EAAE,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;SACzE;IACF,CAAC,CAAC;SACD,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,EAA5C,CAA4C,CAAC,CAAC;AAC9D,CAAC;AAVD,gDAUC","sourcesContent":["import { Buffer } from 'buffer';\n/**\n * Contains utility methods using 'fetch'.\n */\n\nimport { ApiError, ErrorCode } from '../core/api_error';\nimport { BFSCallback } from '../core/file_system';\n\nexport const fetchIsAvailable = typeof fetch !== 'undefined' && fetch !== null;\n\n/**\n * Asynchronously download a file as a buffer or a JSON object.\n * Note that the third function signature with a non-specialized type is\n * invalid, but TypeScript requires it when you specialize string arguments to\n * constants.\n * @hidden\n */\nexport function fetchFileAsync(p: string, type: 'buffer', cb: BFSCallback<Buffer>): void;\nexport function fetchFileAsync(p: string, type: 'json', cb: BFSCallback<any>): void;\nexport function fetchFileAsync(p: string, type: string, cb: BFSCallback<any>): void;\nexport function fetchFileAsync(p: string, type: string, cb: BFSCallback<any>): void {\n\tlet request;\n\ttry {\n\t\trequest = fetch(p);\n\t} catch (e) {\n\t\t// XXX: fetch will throw a TypeError if the URL has credentials in it\n\t\treturn cb(new ApiError(ErrorCode.EINVAL, e.message));\n\t}\n\trequest\n\t\t.then(res => {\n\t\t\tif (!res.ok) {\n\t\t\t\treturn cb(new ApiError(ErrorCode.EIO, `fetch error: response returned code ${res.status}`));\n\t\t\t} else {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\tres.arrayBuffer()\n\t\t\t\t\t\t\t.then(buf => cb(null, Buffer.from(buf)))\n\t\t\t\t\t\t\t.catch(err => cb(new ApiError(ErrorCode.EIO, err.message)));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tres.json()\n\t\t\t\t\t\t\t.then(json => cb(null, json))\n\t\t\t\t\t\t\t.catch(err => cb(new ApiError(ErrorCode.EIO, err.message)));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcb(new ApiError(ErrorCode.EINVAL, 'Invalid download type: ' + type));\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch(err => cb(new ApiError(ErrorCode.EIO, err.message)));\n}\n\n/**\n * Asynchronously retrieves the size of the given file in bytes.\n * @hidden\n */\nexport function fetchFileSizeAsync(p: string, cb: BFSCallback<number>): void {\n\tfetch(p, { method: 'HEAD' })\n\t\t.then(res => {\n\t\t\tif (!res.ok) {\n\t\t\t\treturn cb(new ApiError(ErrorCode.EIO, `fetch HEAD error: response returned code ${res.status}`));\n\t\t\t} else {\n\t\t\t\treturn cb(null, parseInt(res.headers.get('Content-Length') || '-1', 10));\n\t\t\t}\n\t\t})\n\t\t.catch(err => cb(new ApiError(ErrorCode.EIO, err.message)));\n}\n"]}