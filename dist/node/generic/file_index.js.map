{"version":3,"file":"file_index.js","sourceRoot":"","sources":["../../../src/generic/file_index.ts"],"names":[],"mappings":"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","sourcesContent":["import { default as Stats, FileType } from '../core/stats';\nimport * as path from 'path';\n\n/**\n * A simple class for storing a filesystem index. Assumes that all paths passed\n * to it are *absolute* paths.\n *\n * Can be used as a partial or a full index, although care must be taken if used\n * for the former purpose, especially when directories are concerned.\n */\nexport class FileIndex<T> {\n\t/**\n\t * Static method for constructing indices from a JSON listing.\n\t * @param listing Directory listing generated by tools/XHRIndexer.coffee\n\t * @return A new FileIndex object.\n\t */\n\tpublic static fromListing<T>(listing: any): FileIndex<T> {\n\t\tconst idx = new FileIndex<T>();\n\t\t// Add a root DirNode.\n\t\tconst rootInode = new DirInode<T>();\n\t\tidx._index['/'] = rootInode;\n\t\tconst queue = [['', listing, rootInode]];\n\t\twhile (queue.length > 0) {\n\t\t\tlet inode: Inode;\n\t\t\tconst next = queue.pop();\n\t\t\tconst pwd = next![0];\n\t\t\tconst tree = next![1];\n\t\t\tconst parent = next![2];\n\t\t\tfor (const node in tree) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(tree, node)) {\n\t\t\t\t\tconst children = tree[node];\n\t\t\t\t\tconst name = `${pwd}/${node}`;\n\t\t\t\t\tif (children) {\n\t\t\t\t\t\tidx._index[name] = inode = new DirInode<T>();\n\t\t\t\t\t\tqueue.push([name, children, inode]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// This inode doesn't have correct size information, noted with -1.\n\t\t\t\t\t\tinode = new FileInode<Stats>(new Stats(FileType.FILE, -1, 0x16d));\n\t\t\t\t\t}\n\t\t\t\t\tif (parent) {\n\t\t\t\t\t\tparent._ls[node] = inode;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn idx;\n\t}\n\n\t// Maps directory paths to directory inodes, which contain files.\n\tprivate _index: { [path: string]: DirInode<T> };\n\n\t/**\n\t * Constructs a new FileIndex.\n\t */\n\tconstructor() {\n\t\t// _index is a single-level key,value store that maps *directory* paths to\n\t\t// DirInodes. File information is only contained in DirInodes themselves.\n\t\tthis._index = {};\n\t\t// Create the root directory.\n\t\tthis.addPath('/', new DirInode());\n\t}\n\n\t/**\n\t * Runs the given function over all files in the index.\n\t */\n\tpublic fileIterator<T>(cb: (file: T | null) => void): void {\n\t\tfor (const path in this._index) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(this._index, path)) {\n\t\t\t\tconst dir = this._index[path];\n\t\t\t\tconst files = dir.getListing();\n\t\t\t\tfor (const file of files) {\n\t\t\t\t\tconst item = dir.getItem(file);\n\t\t\t\t\tif (isFileInode<T>(item)) {\n\t\t\t\t\t\tcb(item.getData());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds the given absolute path to the index if it is not already in the index.\n\t * Creates any needed parent directories.\n\t * @param path The path to add to the index.\n\t * @param inode The inode for the\n\t *   path to add.\n\t * @return 'True' if it was added or already exists, 'false' if there\n\t *   was an issue adding it (e.g. item in path is a file, item exists but is\n\t *   different).\n\t * @todo If adding fails and implicitly creates directories, we do not clean up\n\t *   the new empty directories.\n\t */\n\tpublic addPath(path: string, inode: Inode): boolean {\n\t\tif (!inode) {\n\t\t\tthrow new Error('Inode must be specified');\n\t\t}\n\t\tif (path[0] !== '/') {\n\t\t\tthrow new Error('Path must be absolute, got: ' + path);\n\t\t}\n\n\t\t// Check if it already exists.\n\t\tif (Object.prototype.hasOwnProperty.call(this._index, path)) {\n\t\t\treturn this._index[path] === inode;\n\t\t}\n\n\t\tconst splitPath = this._split_path(path);\n\t\tconst dirpath = splitPath[0];\n\t\tconst itemname = splitPath[1];\n\t\t// Try to add to its parent directory first.\n\t\tlet parent = this._index[dirpath];\n\t\tif (parent === undefined && path !== '/') {\n\t\t\t// Create parent.\n\t\t\tparent = new DirInode<T>();\n\t\t\tif (!this.addPath(dirpath, parent)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// Add myself to my parent.\n\t\tif (path !== '/') {\n\t\t\tif (!parent.addItem(itemname, inode)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// If I'm a directory, add myself to the index.\n\t\tif (isDirInode<T>(inode)) {\n\t\t\tthis._index[path] = inode;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Adds the given absolute path to the index if it is not already in the index.\n\t * The path is added without special treatment (no joining of adjacent separators, etc).\n\t * Creates any needed parent directories.\n\t * @param path The path to add to the index.\n\t * @param inode The inode for the\n\t *   path to add.\n\t * @return 'True' if it was added or already exists, 'false' if there\n\t *   was an issue adding it (e.g. item in path is a file, item exists but is\n\t *   different).\n\t * @todo If adding fails and implicitly creates directories, we do not clean up\n\t *   the new empty directories.\n\t */\n\tpublic addPathFast(path: string, inode: Inode): boolean {\n\t\tconst itemNameMark = path.lastIndexOf('/');\n\t\tconst parentPath = itemNameMark === 0 ? '/' : path.substring(0, itemNameMark);\n\t\tconst itemName = path.substring(itemNameMark + 1);\n\n\t\t// Try to add to its parent directory first.\n\t\tlet parent = this._index[parentPath];\n\t\tif (parent === undefined) {\n\t\t\t// Create parent.\n\t\t\tparent = new DirInode<T>();\n\t\t\tthis.addPathFast(parentPath, parent);\n\t\t}\n\n\t\tif (!parent.addItem(itemName, inode)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If adding a directory, add to the index as well.\n\t\tif (inode.isDir()) {\n\t\t\tthis._index[path] = <DirInode<T>>inode;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Removes the given path. Can be a file or a directory.\n\t * @return The removed item,\n\t *   or null if it did not exist.\n\t */\n\tpublic removePath(path: string): Inode | null {\n\t\tconst splitPath = this._split_path(path);\n\t\tconst dirpath = splitPath[0];\n\t\tconst itemname = splitPath[1];\n\n\t\t// Try to remove it from its parent directory first.\n\t\tconst parent = this._index[dirpath];\n\t\tif (parent === undefined) {\n\t\t\treturn null;\n\t\t}\n\t\t// Remove myself from my parent.\n\t\tconst inode = parent.remItem(itemname);\n\t\tif (inode === null) {\n\t\t\treturn null;\n\t\t}\n\t\t// If I'm a directory, remove myself from the index, and remove my children.\n\t\tif (isDirInode(inode)) {\n\t\t\tconst children = inode.getListing();\n\t\t\tfor (const child of children) {\n\t\t\t\tthis.removePath(path + '/' + child);\n\t\t\t}\n\n\t\t\t// Remove the directory from the index, unless it's the root.\n\t\t\tif (path !== '/') {\n\t\t\t\tdelete this._index[path];\n\t\t\t}\n\t\t}\n\t\treturn inode;\n\t}\n\n\t/**\n\t * Retrieves the directory listing of the given path.\n\t * @return An array of files in the given path, or 'null' if it does not exist.\n\t */\n\tpublic ls(path: string): string[] | null {\n\t\tconst item = this._index[path];\n\t\tif (item === undefined) {\n\t\t\treturn null;\n\t\t}\n\t\treturn item.getListing();\n\t}\n\n\t/**\n\t * Returns the inode of the given item.\n\t * @return Returns null if the item does not exist.\n\t */\n\tpublic getInode(path: string): Inode | null {\n\t\tconst splitPath = this._split_path(path);\n\t\tconst dirpath = splitPath[0];\n\t\tconst itemname = splitPath[1];\n\t\t// Retrieve from its parent directory.\n\t\tconst parent = this._index[dirpath];\n\t\tif (parent === undefined) {\n\t\t\treturn null;\n\t\t}\n\t\t// Root case\n\t\tif (dirpath === path) {\n\t\t\treturn parent;\n\t\t}\n\t\treturn parent.getItem(itemname);\n\t}\n\n\t/**\n\t * Split into a (directory path, item name) pair\n\t */\n\tprivate _split_path(p: string): string[] {\n\t\tconst dirpath = path.dirname(p);\n\t\tconst itemname = p.substr(dirpath.length + (dirpath === '/' ? 0 : 1));\n\t\treturn [dirpath, itemname];\n\t}\n}\n\n/**\n * Generic interface for file/directory inodes.\n * Note that Stats objects are what we use for file inodes.\n */\nexport interface Inode {\n\t// Is this an inode for a file?\n\tisFile(): boolean;\n\t// Is this an inode for a directory?\n\tisDir(): boolean;\n\t//compatibility with other Inode types\n\ttoStats(): Stats;\n}\n\n/**\n * Inode for a file. Stores an arbitrary (filesystem-specific) data payload.\n */\nexport class FileInode<T> implements Inode {\n\tconstructor(private data: T) {}\n\tpublic isFile(): boolean {\n\t\treturn true;\n\t}\n\tpublic isDir(): boolean {\n\t\treturn false;\n\t}\n\tpublic getData(): T {\n\t\treturn this.data;\n\t}\n\tpublic setData(data: T): void {\n\t\tthis.data = data;\n\t}\n\tpublic toStats(): Stats {\n\t\treturn new Stats(FileType.FILE, 4096, 0o666);\n\t}\n}\n\n/**\n * Inode for a directory. Currently only contains the directory listing.\n */\nexport class DirInode<T> implements Inode {\n\tprivate _ls: { [path: string]: Inode } = {};\n\t/**\n\t * Constructs an inode for a directory.\n\t */\n\tconstructor(private data: T | null = null) {}\n\tpublic isFile(): boolean {\n\t\treturn false;\n\t}\n\tpublic isDir(): boolean {\n\t\treturn true;\n\t}\n\tpublic getData(): T | null {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return a Stats object for this inode.\n\t * @todo Should probably remove this at some point. This isn't the\n\t *       responsibility of the FileIndex.\n\t */\n\tpublic getStats(): Stats {\n\t\treturn new Stats(FileType.DIRECTORY, 4096, 0o555);\n\t}\n\t/**\n\t * Alias of getStats()\n\t * @todo Remove this at some point. This isn't the\n\t *       responsibility of the FileIndex.\n\t */\n\tpublic toStats(): Stats {\n\t\treturn this.getStats();\n\t}\n\t/**\n\t * Returns the directory listing for this directory. Paths in the directory are\n\t * relative to the directory's path.\n\t * @return The directory listing for this directory.\n\t */\n\tpublic getListing(): string[] {\n\t\treturn Object.keys(this._ls);\n\t}\n\t/**\n\t * Returns the inode for the indicated item, or null if it does not exist.\n\t * @param p Name of item in this directory.\n\t */\n\tpublic getItem(p: string): Inode | null {\n\t\tconst item = this._ls[p];\n\t\treturn item ? item : null;\n\t}\n\t/**\n\t * Add the given item to the directory listing. Note that the given inode is\n\t * not copied, and will be mutated by the DirInode if it is a DirInode.\n\t * @param p Item name to add to the directory listing.\n\t * @param inode The inode for the\n\t *   item to add to the directory inode.\n\t * @return True if it was added, false if it already existed.\n\t */\n\tpublic addItem(p: string, inode: Inode): boolean {\n\t\tif (p in this._ls) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._ls[p] = inode;\n\t\treturn true;\n\t}\n\t/**\n\t * Removes the given item from the directory listing.\n\t * @param p Name of item to remove from the directory listing.\n\t * @return Returns the item\n\t *   removed, or null if the item did not exist.\n\t */\n\tpublic remItem(p: string): Inode | null {\n\t\tconst item = this._ls[p];\n\t\tif (item === undefined) {\n\t\t\treturn null;\n\t\t}\n\t\tdelete this._ls[p];\n\t\treturn item;\n\t}\n}\n\n/**\n * @hidden\n */\nexport function isFileInode<T>(inode: Inode | null): inode is FileInode<T> {\n\treturn !!inode && inode.isFile();\n}\n\n/**\n * @hidden\n */\nexport function isDirInode<T>(inode: Inode | null): inode is DirInode<T> {\n\treturn !!inode && inode.isDir();\n}\n"]}