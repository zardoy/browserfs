{"version":3,"file":"key_value_filesystem.js","sourceRoot":"","sources":["../../../src/generic/key_value_filesystem.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseFileSystem, SynchronousFileSystem, BFSOneArgCallback, BFSCallback, BFSThreeArgCallback } from '../core/file_system';\nimport { ApiError, ErrorCode } from '../core/api_error';\nimport { default as Stats, FileType, FilePerm } from '../core/stats';\nimport { File } from '../core/file';\nimport { FileFlag } from '../core/file_flag';\nimport * as path from 'path';\nimport * as process from 'process';\nimport Inode from '../generic/inode';\nimport PreloadFile from '../generic/preload_file';\nimport { emptyBuffer } from '../core/util';\nimport Cred from '../core/cred';\nimport { Buffer } from 'buffer';\n/**\n * @hidden\n */\nconst ROOT_NODE_ID: string = '/';\n/**\n * @hidden\n */\nlet emptyDirNode: Buffer | null = null;\n/**\n * Returns an empty directory node.\n * @hidden\n */\nfunction getEmptyDirNode(): Buffer {\n\tif (emptyDirNode) {\n\t\treturn emptyDirNode;\n\t}\n\treturn (emptyDirNode = Buffer.from('{}'));\n}\n\n/**\n * Generates a random ID.\n * @hidden\n */\nfunction GenerateRandomID(): string {\n\t// From http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n\t\tconst r = (Math.random() * 16) | 0;\n\t\tconst v = c === 'x' ? r : (r & 0x3) | 0x8;\n\t\treturn v.toString(16);\n\t});\n}\n\n/**\n * Helper function. Checks if 'e' is defined. If so, it triggers the callback\n * with 'e' and returns false. Otherwise, returns true.\n * @hidden\n */\nfunction noError(e: ApiError | undefined | null, cb: (e: ApiError) => void): boolean {\n\tif (e) {\n\t\tcb(e);\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Helper function. Checks if 'e' is defined. If so, it aborts the transaction,\n * triggers the callback with 'e', and returns false. Otherwise, returns true.\n * @hidden\n */\nfunction noErrorTx(e: ApiError | undefined | null, tx: AsyncKeyValueRWTransaction, cb: (e: ApiError) => void): boolean {\n\tif (e) {\n\t\ttx.abort(() => {\n\t\t\tcb(e);\n\t\t});\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Represents a *synchronous* key-value store.\n */\nexport interface SyncKeyValueStore {\n\t/**\n\t * The name of the key-value store.\n\t */\n\tname(): string;\n\t/**\n\t * Empties the key-value store completely.\n\t */\n\tclear(): void;\n\t/**\n\t * Begins a new read-only transaction.\n\t */\n\tbeginTransaction(type: 'readonly'): SyncKeyValueROTransaction;\n\t/**\n\t * Begins a new read-write transaction.\n\t */\n\tbeginTransaction(type: 'readwrite'): SyncKeyValueRWTransaction;\n\tbeginTransaction(type: string): SyncKeyValueROTransaction;\n}\n\n/**\n * A read-only transaction for a synchronous key value store.\n */\nexport interface SyncKeyValueROTransaction {\n\t/**\n\t * Retrieves the data at the given key. Throws an ApiError if an error occurs\n\t * or if the key does not exist.\n\t * @param key The key to look under for data.\n\t * @return The data stored under the key, or undefined if not present.\n\t */\n\tget(key: string): Buffer | undefined;\n}\n\n/**\n * A read-write transaction for a synchronous key value store.\n */\nexport interface SyncKeyValueRWTransaction extends SyncKeyValueROTransaction {\n\t/**\n\t * Adds the data to the store under the given key.\n\t * @param key The key to add the data under.\n\t * @param data The data to add to the store.\n\t * @param overwrite If 'true', overwrite any existing data. If 'false',\n\t *   avoids storing the data if the key exists.\n\t * @return True if storage succeeded, false otherwise.\n\t */\n\tput(key: string, data: Buffer, overwrite: boolean): boolean;\n\t/**\n\t * Deletes the data at the given key.\n\t * @param key The key to delete from the store.\n\t */\n\tdel(key: string): void;\n\t/**\n\t * Commits the transaction.\n\t */\n\tcommit(): void;\n\t/**\n\t * Aborts and rolls back the transaction.\n\t */\n\tabort(): void;\n}\n\n/**\n * An interface for simple synchronous key-value stores that don't have special\n * support for transactions and such.\n */\nexport interface SimpleSyncStore {\n\tget(key: string): Buffer | undefined;\n\tput(key: string, data: Buffer, overwrite: boolean): boolean;\n\tdel(key: string): void;\n}\n\nclass LRUNode {\n\tpublic prev: LRUNode | null = null;\n\tpublic next: LRUNode | null = null;\n\tconstructor(public key: string, public value: string) {}\n}\n\n// Adapted from https://chrisrng.svbtle.com/lru-cache-in-javascript\nclass LRUCache {\n\tprivate size = 0;\n\tprivate map: { [id: string]: LRUNode } = {};\n\tprivate head: LRUNode | null = null;\n\tprivate tail: LRUNode | null = null;\n\tconstructor(public readonly limit: number) {}\n\n\t/**\n\t * Change or add a new value in the cache\n\t * We overwrite the entry if it already exists\n\t */\n\tpublic set(key: string, value: string): void {\n\t\tconst node = new LRUNode(key, value);\n\t\tif (this.map[key]) {\n\t\t\tthis.map[key].value = node.value;\n\t\t\tthis.remove(node.key);\n\t\t} else {\n\t\t\tif (this.size >= this.limit) {\n\t\t\t\tdelete this.map[this.tail!.key];\n\t\t\t\tthis.size--;\n\t\t\t\tthis.tail = this.tail!.prev;\n\t\t\t\tthis.tail!.next = null;\n\t\t\t}\n\t\t}\n\t\tthis.setHead(node);\n\t}\n\n\t/* Retrieve a single entry from the cache */\n\tpublic get(key: string): string | null {\n\t\tif (this.map[key]) {\n\t\t\tconst value = this.map[key].value;\n\t\t\tconst node = new LRUNode(key, value);\n\t\t\tthis.remove(key);\n\t\t\tthis.setHead(node);\n\t\t\treturn value;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/* Remove a single entry from the cache */\n\tpublic remove(key: string): void {\n\t\tconst node = this.map[key];\n\t\tif (!node) {\n\t\t\treturn;\n\t\t}\n\t\tif (node.prev !== null) {\n\t\t\tnode.prev.next = node.next;\n\t\t} else {\n\t\t\tthis.head = node.next;\n\t\t}\n\t\tif (node.next !== null) {\n\t\t\tnode.next.prev = node.prev;\n\t\t} else {\n\t\t\tthis.tail = node.prev;\n\t\t}\n\t\tdelete this.map[key];\n\t\tthis.size--;\n\t}\n\n\t/* Resets the entire cache - Argument limit is optional to be reset */\n\tpublic removeAll() {\n\t\tthis.size = 0;\n\t\tthis.map = {};\n\t\tthis.head = null;\n\t\tthis.tail = null;\n\t}\n\n\tprivate setHead(node: LRUNode): void {\n\t\tnode.next = this.head;\n\t\tnode.prev = null;\n\t\tif (this.head !== null) {\n\t\t\tthis.head.prev = node;\n\t\t}\n\t\tthis.head = node;\n\t\tif (this.tail === null) {\n\t\t\tthis.tail = node;\n\t\t}\n\t\tthis.size++;\n\t\tthis.map[node.key] = node;\n\t}\n}\n\n/**\n * A simple RW transaction for simple synchronous key-value stores.\n */\nexport class SimpleSyncRWTransaction implements SyncKeyValueRWTransaction {\n\t/**\n\t * Stores data in the keys we modify prior to modifying them.\n\t * Allows us to roll back commits.\n\t */\n\tprivate originalData: { [key: string]: Buffer | undefined } = {};\n\t/**\n\t * List of keys modified in this transaction, if any.\n\t */\n\tprivate modifiedKeys: string[] = [];\n\n\tconstructor(private store: SimpleSyncStore) {}\n\n\tpublic get(key: string): Buffer | undefined {\n\t\tconst val = this.store.get(key);\n\t\tthis.stashOldValue(key, val);\n\t\treturn val;\n\t}\n\n\tpublic put(key: string, data: Buffer, overwrite: boolean): boolean {\n\t\tthis.markModified(key);\n\t\treturn this.store.put(key, data, overwrite);\n\t}\n\n\tpublic del(key: string): void {\n\t\tthis.markModified(key);\n\t\tthis.store.del(key);\n\t}\n\n\tpublic commit(): void {\n\t\t/* NOP */\n\t}\n\n\tpublic abort(): void {\n\t\t// Rollback old values.\n\t\tfor (const key of this.modifiedKeys) {\n\t\t\tconst value = this.originalData[key];\n\t\t\tif (!value) {\n\t\t\t\t// Key didn't exist.\n\t\t\t\tthis.store.del(key);\n\t\t\t} else {\n\t\t\t\t// Key existed. Store old value.\n\t\t\t\tthis.store.put(key, value, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _has(key: string) {\n\t\treturn Object.prototype.hasOwnProperty.call(this.originalData, key);\n\t}\n\n\t/**\n\t * Stashes given key value pair into `originalData` if it doesn't already\n\t * exist. Allows us to stash values the program is requesting anyway to\n\t * prevent needless `get` requests if the program modifies the data later\n\t * on during the transaction.\n\t */\n\tprivate stashOldValue(key: string, value: Buffer | undefined) {\n\t\t// Keep only the earliest value in the transaction.\n\t\tif (!this._has(key)) {\n\t\t\tthis.originalData[key] = value;\n\t\t}\n\t}\n\n\t/**\n\t * Marks the given key as modified, and stashes its value if it has not been\n\t * stashed already.\n\t */\n\tprivate markModified(key: string) {\n\t\tif (this.modifiedKeys.indexOf(key) === -1) {\n\t\t\tthis.modifiedKeys.push(key);\n\t\t\tif (!this._has(key)) {\n\t\t\t\tthis.originalData[key] = this.store.get(key);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport interface SyncKeyValueFileSystemOptions {\n\t/**\n\t * The actual key-value store to read from/write to.\n\t */\n\tstore: SyncKeyValueStore;\n\t/**\n\t * Should the file system support properties (mtime/atime/ctime/chmod/etc)?\n\t * Enabling this slightly increases the storage space per file, and adds\n\t * atime updates every time a file is accessed, mtime updates every time\n\t * a file is modified, and permission checks on every operation.\n\t *\n\t * Defaults to *false*.\n\t */\n\tsupportProps?: boolean;\n\t/**\n\t * Should the file system support links?\n\t */\n\tsupportLinks?: boolean;\n}\n\nexport class SyncKeyValueFile extends PreloadFile<SyncKeyValueFileSystem> implements File {\n\tconstructor(_fs: SyncKeyValueFileSystem, _path: string, _flag: FileFlag, _stat: Stats, contents?: Buffer) {\n\t\tsuper(_fs, _path, _flag, _stat, contents);\n\t}\n\n\tpublic syncSync(): void {\n\t\tif (this.isDirty()) {\n\t\t\tthis._fs._syncSync(this.getPath(), this.getBuffer(), this.getStats());\n\t\t\tthis.resetDirty();\n\t\t}\n\t}\n\n\tpublic closeSync(): void {\n\t\tthis.syncSync();\n\t}\n}\n\n/**\n * A \"Synchronous key-value file system\". Stores data to/retrieves data from an\n * underlying key-value store.\n *\n * We use a unique ID for each node in the file system. The root node has a\n * fixed ID.\n * @todo Introduce Node ID caching.\n * @todo Check modes.\n */\nexport class SyncKeyValueFileSystem extends SynchronousFileSystem {\n\tpublic static isAvailable(): boolean {\n\t\treturn true;\n\t}\n\n\tprivate store: SyncKeyValueStore;\n\n\tconstructor(options: SyncKeyValueFileSystemOptions) {\n\t\tsuper();\n\t\tthis.store = options.store;\n\t\t// INVARIANT: Ensure that the root exists.\n\t\tthis.makeRootDirectory();\n\t}\n\n\tpublic getName(): string {\n\t\treturn this.store.name();\n\t}\n\tpublic isReadOnly(): boolean {\n\t\treturn false;\n\t}\n\tpublic supportsSymlinks(): boolean {\n\t\treturn false;\n\t}\n\tpublic supportsProps(): boolean {\n\t\treturn true;\n\t}\n\tpublic supportsSynch(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Delete all contents stored in the file system.\n\t */\n\tpublic empty(): void {\n\t\tthis.store.clear();\n\t\t// INVARIANT: Root always exists.\n\t\tthis.makeRootDirectory();\n\t}\n\n\tpublic accessSync(p: string, mode: number, cred: Cred): void {\n\t\tconst tx = this.store.beginTransaction('readonly'),\n\t\t\tnode = this.findINode(tx, p);\n\t\tif (!node.toStats().hasAccess(mode, cred)) {\n\t\t\tthrow ApiError.EACCES(p);\n\t\t}\n\t}\n\n\tpublic renameSync(oldPath: string, newPath: string, cred: Cred): void {\n\t\tconst tx = this.store.beginTransaction('readwrite'),\n\t\t\toldParent = path.dirname(oldPath),\n\t\t\toldName = path.basename(oldPath),\n\t\t\tnewParent = path.dirname(newPath),\n\t\t\tnewName = path.basename(newPath),\n\t\t\t// Remove oldPath from parent's directory listing.\n\t\t\toldDirNode = this.findINode(tx, oldParent),\n\t\t\toldDirList = this.getDirListing(tx, oldParent, oldDirNode);\n\n\t\tif (!oldDirNode.toStats().hasAccess(FilePerm.WRITE, cred)) {\n\t\t\tthrow ApiError.EACCES(oldPath);\n\t\t}\n\n\t\tif (!oldDirList[oldName]) {\n\t\t\tthrow ApiError.ENOENT(oldPath);\n\t\t}\n\t\tconst nodeId: string = oldDirList[oldName];\n\t\tdelete oldDirList[oldName];\n\n\t\t// Invariant: Can't move a folder inside itself.\n\t\t// This funny little hack ensures that the check passes only if oldPath\n\t\t// is a subpath of newParent. We append '/' to avoid matching folders that\n\t\t// are a substring of the bottom-most folder in the path.\n\t\tif ((newParent + '/').indexOf(oldPath + '/') === 0) {\n\t\t\tthrow new ApiError(ErrorCode.EBUSY, oldParent);\n\t\t}\n\n\t\t// Add newPath to parent's directory listing.\n\t\tlet newDirNode: Inode, newDirList: typeof oldDirList;\n\t\tif (newParent === oldParent) {\n\t\t\t// Prevent us from re-grabbing the same directory listing, which still\n\t\t\t// contains oldName.\n\t\t\tnewDirNode = oldDirNode;\n\t\t\tnewDirList = oldDirList;\n\t\t} else {\n\t\t\tnewDirNode = this.findINode(tx, newParent);\n\t\t\tnewDirList = this.getDirListing(tx, newParent, newDirNode);\n\t\t}\n\n\t\tif (newDirList[newName]) {\n\t\t\t// If it's a file, delete it.\n\t\t\tconst newNameNode = this.getINode(tx, newPath, newDirList[newName]);\n\t\t\tif (newNameNode.isFile()) {\n\t\t\t\ttry {\n\t\t\t\t\ttx.del(newNameNode.id);\n\t\t\t\t\ttx.del(newDirList[newName]);\n\t\t\t\t} catch (e) {\n\t\t\t\t\ttx.abort();\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If it's a directory, throw a permissions error.\n\t\t\t\tthrow ApiError.EPERM(newPath);\n\t\t\t}\n\t\t}\n\t\tnewDirList[newName] = nodeId;\n\n\t\t// Commit the two changed directory listings.\n\t\ttry {\n\t\t\ttx.put(oldDirNode.id, Buffer.from(JSON.stringify(oldDirList)), true);\n\t\t\ttx.put(newDirNode.id, Buffer.from(JSON.stringify(newDirList)), true);\n\t\t} catch (e) {\n\t\t\ttx.abort();\n\t\t\tthrow e;\n\t\t}\n\n\t\ttx.commit();\n\t}\n\n\tpublic statSync(p: string, isLstat: boolean, cred: Cred): Stats {\n\t\t// Get the inode to the item, convert it into a Stats object.\n\t\tconst stats = this.findINode(this.store.beginTransaction('readonly'), p).toStats();\n\t\tif (!stats.hasAccess(FilePerm.READ, cred)) {\n\t\t\tthrow ApiError.EACCES(p);\n\t\t}\n\t\treturn stats;\n\t}\n\n\tpublic createFileSync(p: string, flag: FileFlag, mode: number, cred: Cred): File {\n\t\tconst tx = this.store.beginTransaction('readwrite'),\n\t\t\tdata = emptyBuffer(),\n\t\t\tnewFile = this.commitNewFile(tx, p, FileType.FILE, mode, cred, data);\n\t\t// Open the file.\n\t\treturn new SyncKeyValueFile(this, p, flag, newFile.toStats(), data);\n\t}\n\n\tpublic openFileSync(p: string, flag: FileFlag, cred: Cred): File {\n\t\tconst tx = this.store.beginTransaction('readonly'),\n\t\t\tnode = this.findINode(tx, p),\n\t\t\tdata = tx.get(node.id);\n\t\tif (!node.toStats().hasAccess(flag.getMode(), cred)) {\n\t\t\tthrow ApiError.EACCES(p);\n\t\t}\n\t\tif (data === undefined) {\n\t\t\tthrow ApiError.ENOENT(p);\n\t\t}\n\t\treturn new SyncKeyValueFile(this, p, flag, node.toStats(), data);\n\t}\n\n\tpublic unlinkSync(p: string, cred: Cred): void {\n\t\tthis.removeEntry(p, false, cred);\n\t}\n\n\tpublic rmdirSync(p: string, cred: Cred): void {\n\t\t// Check first if directory is empty.\n\t\tif (this.readdirSync(p, cred).length > 0) {\n\t\t\tthrow ApiError.ENOTEMPTY(p);\n\t\t} else {\n\t\t\tthis.removeEntry(p, true, cred);\n\t\t}\n\t}\n\n\tpublic mkdirSync(p: string, mode: number, cred: Cred): void {\n\t\tconst tx = this.store.beginTransaction('readwrite'),\n\t\t\tdata = Buffer.from('{}');\n\t\tthis.commitNewFile(tx, p, FileType.DIRECTORY, mode, cred, data);\n\t}\n\n\tpublic readdirSync(p: string, cred: Cred): string[] {\n\t\tconst tx = this.store.beginTransaction('readonly');\n\t\tconst node = this.findINode(tx, p);\n\t\tif (!node.toStats().hasAccess(FilePerm.READ, cred)) {\n\t\t\tthrow ApiError.EACCES(p);\n\t\t}\n\t\treturn Object.keys(this.getDirListing(tx, p, node));\n\t}\n\n\tpublic chmodSync(p: string, isLchmod: boolean, mode: number, cred: Cred): void {\n\t\tconst path = isLchmod ? p : this.realpathSync(p, {}, cred);\n\t\tconst fd = this.openFileSync(path, FileFlag.getFileFlag('r+'), cred);\n\t\tfd.chmodSync(mode);\n\t}\n\n\tpublic chownSync(p: string, isLchown: boolean, new_uid: number, new_gid: number, cred: Cred): void {\n\t\tconst path = isLchown ? p : this.realpathSync(p, {}, cred);\n\t\tconst fd = this.openFileSync(path, FileFlag.getFileFlag('r+'), cred);\n\t\tfd.chownSync(cred.euid, cred.egid);\n\t}\n\n\tpublic _syncSync(p: string, data: Buffer, stats: Stats): void {\n\t\t// @todo Ensure mtime updates properly, and use that to determine if a data\n\t\t//       update is required.\n\t\tconst tx = this.store.beginTransaction('readwrite'),\n\t\t\t// We use the _findInode helper because we actually need the INode id.\n\t\t\tfileInodeId = this._findINode(tx, path.dirname(p), path.basename(p)),\n\t\t\tfileInode = this.getINode(tx, p, fileInodeId),\n\t\t\tinodeChanged = fileInode.update(stats);\n\n\t\ttry {\n\t\t\t// Sync data.\n\t\t\ttx.put(fileInode.id, data, true);\n\t\t\t// Sync metadata.\n\t\t\tif (inodeChanged) {\n\t\t\t\ttx.put(fileInodeId, fileInode.toBuffer(), true);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\ttx.abort();\n\t\t\tthrow e;\n\t\t}\n\t\ttx.commit();\n\t}\n\n\t/**\n\t * Checks if the root directory exists. Creates it if it doesn't.\n\t */\n\tprivate makeRootDirectory() {\n\t\tconst tx = this.store.beginTransaction('readwrite');\n\t\tif (tx.get(ROOT_NODE_ID) === undefined) {\n\t\t\t// Create new inode.\n\t\t\tconst currTime = new Date().getTime(),\n\t\t\t\t// Mode 0666, owned by root:root\n\t\t\t\tdirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime, 0, 0);\n\t\t\t// If the root doesn't exist, the first random ID shouldn't exist,\n\t\t\t// either.\n\t\t\ttx.put(dirInode.id, getEmptyDirNode(), false);\n\t\t\ttx.put(ROOT_NODE_ID, dirInode.toBuffer(), false);\n\t\t\ttx.commit();\n\t\t}\n\t}\n\n\t/**\n\t * Helper function for findINode.\n\t * @param parent The parent directory of the file we are attempting to find.\n\t * @param filename The filename of the inode we are attempting to find, minus\n\t *   the parent.\n\t * @return string The ID of the file's inode in the file system.\n\t */\n\tprivate _findINode(tx: SyncKeyValueROTransaction, parent: string, filename: string): string {\n\t\tconst readDirectory = (inode: Inode): string => {\n\t\t\t// Get the root's directory listing.\n\t\t\tconst dirList = this.getDirListing(tx, parent, inode);\n\t\t\t// Get the file's ID.\n\t\t\tif (dirList[filename]) {\n\t\t\t\treturn dirList[filename];\n\t\t\t} else {\n\t\t\t\tthrow ApiError.ENOENT(path.resolve(parent, filename));\n\t\t\t}\n\t\t};\n\t\tif (parent === '.') {\n\t\t\tparent = process.cwd();\n\t\t}\n\t\tif (parent === '/') {\n\t\t\tif (filename === '') {\n\t\t\t\t// BASE CASE #1: Return the root's ID.\n\t\t\t\treturn ROOT_NODE_ID;\n\t\t\t} else {\n\t\t\t\t// BASE CASE #2: Find the item in the root node.\n\t\t\t\treturn readDirectory(this.getINode(tx, parent, ROOT_NODE_ID));\n\t\t\t}\n\t\t} else {\n\t\t\treturn readDirectory(this.getINode(tx, parent + path.sep + filename, this._findINode(tx, path.dirname(parent), path.basename(parent))));\n\t\t}\n\t}\n\n\t/**\n\t * Finds the Inode of the given path.\n\t * @param p The path to look up.\n\t * @return The Inode of the path p.\n\t * @todo memoize/cache\n\t */\n\tprivate findINode(tx: SyncKeyValueROTransaction, p: string): Inode {\n\t\treturn this.getINode(tx, p, this._findINode(tx, path.dirname(p), path.basename(p)));\n\t}\n\n\t/**\n\t * Given the ID of a node, retrieves the corresponding Inode.\n\t * @param tx The transaction to use.\n\t * @param p The corresponding path to the file (used for error messages).\n\t * @param id The ID to look up.\n\t */\n\tprivate getINode(tx: SyncKeyValueROTransaction, p: string, id: string): Inode {\n\t\tconst inode = tx.get(id);\n\t\tif (inode === undefined) {\n\t\t\tthrow ApiError.ENOENT(p);\n\t\t}\n\t\treturn Inode.fromBuffer(inode);\n\t}\n\n\t/**\n\t * Given the Inode of a directory, retrieves the corresponding directory\n\t * listing.\n\t */\n\tprivate getDirListing(tx: SyncKeyValueROTransaction, p: string, inode: Inode): { [fileName: string]: string } {\n\t\tif (!inode.isDirectory()) {\n\t\t\tthrow ApiError.ENOTDIR(p);\n\t\t}\n\t\tconst data = tx.get(inode.id);\n\t\tif (data === undefined) {\n\t\t\tthrow ApiError.ENOENT(p);\n\t\t}\n\t\treturn JSON.parse(data.toString());\n\t}\n\n\t/**\n\t * Creates a new node under a random ID. Retries 5 times before giving up in\n\t * the exceedingly unlikely chance that we try to reuse a random GUID.\n\t * @return The GUID that the data was stored under.\n\t */\n\tprivate addNewNode(tx: SyncKeyValueRWTransaction, data: Buffer): string {\n\t\tconst retries = 0;\n\t\tlet currId: string;\n\t\twhile (retries < 5) {\n\t\t\ttry {\n\t\t\t\tcurrId = GenerateRandomID();\n\t\t\t\ttx.put(currId, data, false);\n\t\t\t\treturn currId;\n\t\t\t} catch (e) {\n\t\t\t\t// Ignore and reroll.\n\t\t\t}\n\t\t}\n\t\tthrow new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.');\n\t}\n\n\t/**\n\t * Commits a new file (well, a FILE or a DIRECTORY) to the file system with\n\t * the given mode.\n\t * Note: This will commit the transaction.\n\t * @param p The path to the new file.\n\t * @param type The type of the new file.\n\t * @param mode The mode to create the new file with.\n\t * @param data The data to store at the file's data node.\n\t * @return The Inode for the new file.\n\t */\n\tprivate commitNewFile(tx: SyncKeyValueRWTransaction, p: string, type: FileType, mode: number, cred: Cred, data: Buffer): Inode {\n\t\tconst parentDir = path.dirname(p),\n\t\t\tfname = path.basename(p),\n\t\t\tparentNode = this.findINode(tx, parentDir),\n\t\t\tdirListing = this.getDirListing(tx, parentDir, parentNode),\n\t\t\tcurrTime = new Date().getTime();\n\n\t\t//Check that the creater has correct access\n\t\tif (!parentNode.toStats().hasAccess(0b0100 /* Write */, cred)) {\n\t\t\tthrow ApiError.EACCES(p);\n\t\t}\n\n\t\t// Invariant: The root always exists.\n\t\t// If we don't check this prior to taking steps below, we will create a\n\t\t// file with name '' in root should p == '/'.\n\t\tif (p === '/') {\n\t\t\tthrow ApiError.EEXIST(p);\n\t\t}\n\n\t\t// Check if file already exists.\n\t\tif (dirListing[fname]) {\n\t\t\tthrow ApiError.EEXIST(p);\n\t\t}\n\n\t\tlet fileNode: Inode;\n\t\ttry {\n\t\t\t// Commit data.\n\t\t\tconst dataId = this.addNewNode(tx, data);\n\t\t\tfileNode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime, cred.uid, cred.gid);\n\t\t\t// Commit file node.\n\t\t\tconst fileNodeId = this.addNewNode(tx, fileNode.toBuffer());\n\t\t\t// Update and commit parent directory listing.\n\t\t\tdirListing[fname] = fileNodeId;\n\t\t\ttx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true);\n\t\t} catch (e) {\n\t\t\ttx.abort();\n\t\t\tthrow e;\n\t\t}\n\t\ttx.commit();\n\t\treturn fileNode;\n\t}\n\n\t/**\n\t * Remove all traces of the given path from the file system.\n\t * @param p The path to remove from the file system.\n\t * @param isDir Does the path belong to a directory, or a file?\n\t * @todo Update mtime.\n\t */\n\tprivate removeEntry(p: string, isDir: boolean, cred: Cred): void {\n\t\tconst tx = this.store.beginTransaction('readwrite'),\n\t\t\tparent: string = path.dirname(p),\n\t\t\tparentNode = this.findINode(tx, parent),\n\t\t\tparentListing = this.getDirListing(tx, parent, parentNode),\n\t\t\tfileName: string = path.basename(p);\n\n\t\tif (!parentListing[fileName]) {\n\t\t\tthrow ApiError.ENOENT(p);\n\t\t}\n\n\t\tconst fileNodeId = parentListing[fileName];\n\n\t\t// Get file inode.\n\t\tconst fileNode = this.getINode(tx, p, fileNodeId);\n\n\t\tif (!fileNode.toStats().hasAccess(FilePerm.WRITE, cred)) {\n\t\t\tthrow ApiError.EACCES(p);\n\t\t}\n\n\t\t// Remove from directory listing of parent.\n\t\tdelete parentListing[fileName];\n\n\t\tif (!isDir && fileNode.isDirectory()) {\n\t\t\tthrow ApiError.EISDIR(p);\n\t\t} else if (isDir && !fileNode.isDirectory()) {\n\t\t\tthrow ApiError.ENOTDIR(p);\n\t\t}\n\n\t\ttry {\n\t\t\t// Delete data.\n\t\t\ttx.del(fileNode.id);\n\t\t\t// Delete node.\n\t\t\ttx.del(fileNodeId);\n\t\t\t// Update directory listing.\n\t\t\ttx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true);\n\t\t} catch (e) {\n\t\t\ttx.abort();\n\t\t\tthrow e;\n\t\t}\n\t\t// Success.\n\t\ttx.commit();\n\t}\n}\n\n/**\n * Represents an *asynchronous* key-value store.\n */\nexport interface AsyncKeyValueStore {\n\t/**\n\t * The name of the key-value store.\n\t */\n\tname(): string;\n\t/**\n\t * Empties the key-value store completely.\n\t */\n\tclear(cb: BFSOneArgCallback): void;\n\t/**\n\t * Begins a read-write transaction.\n\t */\n\tbeginTransaction(type: 'readwrite'): AsyncKeyValueRWTransaction;\n\t/**\n\t * Begins a read-only transaction.\n\t */\n\tbeginTransaction(type: 'readonly'): AsyncKeyValueROTransaction;\n\tbeginTransaction(type: string): AsyncKeyValueROTransaction;\n}\n\n/**\n * Represents an asynchronous read-only transaction.\n */\nexport interface AsyncKeyValueROTransaction {\n\t/**\n\t * Retrieves the data at the given key.\n\t * @param key The key to look under for data.\n\t */\n\tget(key: string, cb: BFSCallback<Buffer>): void;\n}\n\n/**\n * Represents an asynchronous read-write transaction.\n */\nexport interface AsyncKeyValueRWTransaction extends AsyncKeyValueROTransaction {\n\t/**\n\t * Adds the data to the store under the given key. Overwrites any existing\n\t * data.\n\t * @param key The key to add the data under.\n\t * @param data The data to add to the store.\n\t * @param overwrite If 'true', overwrite any existing data. If 'false',\n\t *   avoids writing the data if the key exists.\n\t * @param cb Triggered with an error and whether or not the value was\n\t *   committed.\n\t */\n\tput(key: string, data: Buffer, overwrite: boolean, cb: BFSCallback<boolean>): void;\n\t/**\n\t * Deletes the data at the given key.\n\t * @param key The key to delete from the store.\n\t */\n\tdel(key: string, cb: BFSOneArgCallback): void;\n\t/**\n\t * Commits the transaction.\n\t */\n\tcommit(cb: BFSOneArgCallback): void;\n\t/**\n\t * Aborts and rolls back the transaction.\n\t */\n\tabort(cb: BFSOneArgCallback): void;\n}\n\nexport class AsyncKeyValueFile extends PreloadFile<AsyncKeyValueFileSystem> implements File {\n\tconstructor(_fs: AsyncKeyValueFileSystem, _path: string, _flag: FileFlag, _stat: Stats, contents?: Buffer) {\n\t\tsuper(_fs, _path, _flag, _stat, contents);\n\t}\n\n\tpublic sync(cb: BFSOneArgCallback): void {\n\t\tif (this.isDirty()) {\n\t\t\tthis._fs._sync(this.getPath(), this.getBuffer(), this.getStats(), (e?: ApiError) => {\n\t\t\t\tif (!e) {\n\t\t\t\t\tthis.resetDirty();\n\t\t\t\t}\n\t\t\t\tcb(e);\n\t\t\t});\n\t\t} else {\n\t\t\tcb();\n\t\t}\n\t}\n\n\tpublic close(cb: BFSOneArgCallback): void {\n\t\tthis.sync(cb);\n\t}\n}\n\n/**\n * An \"Asynchronous key-value file system\". Stores data to/retrieves data from\n * an underlying asynchronous key-value store.\n */\nexport class AsyncKeyValueFileSystem extends BaseFileSystem {\n\tpublic static isAvailable(): boolean {\n\t\treturn true;\n\t}\n\n\tprotected store: AsyncKeyValueStore;\n\tprivate _cache: LRUCache | null = null;\n\n\tconstructor(cacheSize: number) {\n\t\tsuper();\n\t\tif (cacheSize > 0) {\n\t\t\tthis._cache = new LRUCache(cacheSize);\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the file system. Typically called by subclasses' async\n\t * constructors.\n\t */\n\tpublic init(store: AsyncKeyValueStore, cb: BFSOneArgCallback) {\n\t\tthis.store = store;\n\t\t// INVARIANT: Ensure that the root exists.\n\t\tthis.makeRootDirectory(cb);\n\t}\n\tpublic getName(): string {\n\t\treturn this.store.name();\n\t}\n\tpublic isReadOnly(): boolean {\n\t\treturn false;\n\t}\n\tpublic supportsSymlinks(): boolean {\n\t\treturn false;\n\t}\n\tpublic supportsProps(): boolean {\n\t\treturn true;\n\t}\n\tpublic supportsSynch(): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Delete all contents stored in the file system.\n\t */\n\tpublic empty(cb: BFSOneArgCallback): void {\n\t\tif (this._cache) {\n\t\t\tthis._cache.removeAll();\n\t\t}\n\t\tthis.store.clear((e?) => {\n\t\t\tif (noError(e, cb)) {\n\t\t\t\t// INVARIANT: Root always exists.\n\t\t\t\tthis.makeRootDirectory(cb);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic access(p: string, mode: number, cred: Cred, cb: BFSOneArgCallback): void {\n\t\tconst tx = this.store.beginTransaction('readonly');\n\t\tthis.findINode(tx, p, inode => {\n\t\t\tif (inode instanceof Inode) {\n\t\t\t\tif (!inode!.toStats().hasAccess(mode, cred)) {\n\t\t\t\t\tcb(ApiError.EACCES(p));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcb(inode);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic rename(oldPath: string, newPath: string, cred: Cred, cb: BFSOneArgCallback): void {\n\t\t// TODO: Make rename compatible with the cache.\n\t\tif (this._cache) {\n\t\t\t// Clear and disable cache during renaming process.\n\t\t\tconst c = this._cache;\n\t\t\tthis._cache = null;\n\t\t\tc.removeAll();\n\t\t\tconst oldCb = cb;\n\t\t\tcb = (e?: ApiError | null) => {\n\t\t\t\t// Restore empty cache.\n\t\t\t\tthis._cache = c;\n\t\t\t\toldCb(e);\n\t\t\t};\n\t\t}\n\n\t\tconst tx = this.store.beginTransaction('readwrite');\n\t\tconst oldParent = path.dirname(oldPath),\n\t\t\toldName = path.basename(oldPath);\n\t\tconst newParent = path.dirname(newPath),\n\t\t\tnewName = path.basename(newPath);\n\t\tconst inodes: { [path: string]: Inode } = {};\n\t\tconst lists: {\n\t\t\t[path: string]: { [file: string]: string };\n\t\t} = {};\n\t\tlet errorOccurred: boolean = false;\n\n\t\t// Invariant: Can't move a folder inside itself.\n\t\t// This funny little hack ensures that the check passes only if oldPath\n\t\t// is a subpath of newParent. We append '/' to avoid matching folders that\n\t\t// are a substring of the bottom-most folder in the path.\n\t\tif ((newParent + '/').indexOf(oldPath + '/') === 0) {\n\t\t\treturn cb(new ApiError(ErrorCode.EBUSY, oldParent));\n\t\t}\n\n\t\t/**\n\t\t * Responsible for Phase 2 of the rename operation: Modifying and\n\t\t * committing the directory listings. Called once we have successfully\n\t\t * retrieved both the old and new parent's inodes and listings.\n\t\t */\n\t\tconst theOleSwitcharoo = (): void => {\n\t\t\t// Sanity check: Ensure both paths are present, and no error has occurred.\n\t\t\tif (errorOccurred || !Object.prototype.hasOwnProperty.call(lists, oldParent) || !Object.prototype.hasOwnProperty.call(lists, newParent)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst oldParentList = lists[oldParent],\n\t\t\t\toldParentINode = inodes[oldParent],\n\t\t\t\tnewParentList = lists[newParent],\n\t\t\t\tnewParentINode = inodes[newParent];\n\n\t\t\t// Delete file from old parent.\n\t\t\tif (!oldParentList[oldName]) {\n\t\t\t\tcb(ApiError.ENOENT(oldPath));\n\t\t\t} else {\n\t\t\t\tconst fileId = oldParentList[oldName];\n\t\t\t\tdelete oldParentList[oldName];\n\n\t\t\t\t// Finishes off the renaming process by adding the file to the new\n\t\t\t\t// parent.\n\t\t\t\tconst completeRename = () => {\n\t\t\t\t\tnewParentList[newName] = fileId;\n\t\t\t\t\t// Commit old parent's list.\n\t\t\t\t\ttx.put(oldParentINode.id, Buffer.from(JSON.stringify(oldParentList)), true, (e: ApiError) => {\n\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\tif (oldParent === newParent) {\n\t\t\t\t\t\t\t\t// DONE!\n\t\t\t\t\t\t\t\ttx.commit(cb);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Commit new parent's list.\n\t\t\t\t\t\t\t\ttx.put(newParentINode.id, Buffer.from(JSON.stringify(newParentList)), true, (e: ApiError) => {\n\t\t\t\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\t\t\t\ttx.commit(cb);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tif (newParentList[newName]) {\n\t\t\t\t\t// 'newPath' already exists. Check if it's a file or a directory, and\n\t\t\t\t\t// act accordingly.\n\t\t\t\t\tthis.getINode(tx, newPath, newParentList[newName], (e: ApiError, inode?: Inode) => {\n\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\tif (inode!.isFile()) {\n\t\t\t\t\t\t\t\t// Delete the file and continue.\n\t\t\t\t\t\t\t\ttx.del(inode!.id, (e?: ApiError) => {\n\t\t\t\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\t\t\t\ttx.del(newParentList[newName], (e?: ApiError) => {\n\t\t\t\t\t\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\t\t\t\t\t\tcompleteRename();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Can't overwrite a directory using rename.\n\t\t\t\t\t\t\t\ttx.abort((e?) => {\n\t\t\t\t\t\t\t\t\tcb(ApiError.EPERM(newPath));\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcompleteRename();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Grabs a path's inode and directory listing, and shoves it into the\n\t\t * inodes and lists hashes.\n\t\t */\n\t\tconst processInodeAndListings = (p: string): void => {\n\t\t\tthis.findINodeAndDirListing(tx, p, (e?: ApiError | null, node?: Inode, dirList?: { [name: string]: string }): void => {\n\t\t\t\tif (!node!.toStats().hasAccess(FilePerm.WRITE, cred)) {\n\t\t\t\t\tthrow ApiError.EACCES(p);\n\t\t\t\t}\n\t\t\t\tif (e) {\n\t\t\t\t\tif (!errorOccurred) {\n\t\t\t\t\t\terrorOccurred = true;\n\t\t\t\t\t\ttx.abort(() => {\n\t\t\t\t\t\t\tcb(e);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t// If error has occurred already, just stop here.\n\t\t\t\t} else {\n\t\t\t\t\tinodes[p] = node!;\n\t\t\t\t\tlists[p] = dirList!;\n\t\t\t\t\ttheOleSwitcharoo();\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tprocessInodeAndListings(oldParent);\n\t\tif (oldParent !== newParent) {\n\t\t\tprocessInodeAndListings(newParent);\n\t\t}\n\t}\n\n\tpublic stat(p: string, isLstat: boolean, cred: Cred, cb: BFSCallback<Stats>): void {\n\t\tconst tx = this.store.beginTransaction('readonly');\n\t\tthis.findINode(tx, p, (e: ApiError, inode?: Inode): void => {\n\t\t\tif (noError(e, cb)) {\n\t\t\t\tconst stats = inode!.toStats();\n\t\t\t\tif (!stats.hasAccess(FilePerm.READ, cred)) {\n\t\t\t\t\tcb(ApiError.EACCES(p));\n\t\t\t\t}\n\t\t\t\tcb(null, stats);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic createFile(p: string, flag: FileFlag, mode: number, cred: Cred, cb: BFSCallback<File>): void {\n\t\tconst tx = this.store.beginTransaction('readwrite'),\n\t\t\tdata = emptyBuffer();\n\n\t\tthis.commitNewFile(tx, p, FileType.FILE, mode, cred, data, (e: ApiError, newFile?: Inode): void => {\n\t\t\tif (noError(e, cb)) {\n\t\t\t\tcb(null, new AsyncKeyValueFile(this, p, flag, newFile!.toStats(), data));\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic openFile(p: string, flag: FileFlag, cred: Cred, cb: BFSCallback<File>): void {\n\t\tconst tx = this.store.beginTransaction('readonly');\n\t\t// Step 1: Grab the file's inode.\n\t\tthis.findINode(tx, p, (e: ApiError, inode?: Inode) => {\n\t\t\tif (noError(e, cb)) {\n\t\t\t\tconst stats = inode!.toStats();\n\t\t\t\tif (!stats.hasAccess(flag.getMode(), cred)) {\n\t\t\t\t\tcb(ApiError.EACCES(p));\n\t\t\t\t}\n\t\t\t\t// Step 2: Grab the file's data.\n\t\t\t\ttx.get(inode!.id, (e: ApiError, data?: Buffer): void => {\n\t\t\t\t\tif (noError(e, cb)) {\n\t\t\t\t\t\tif (data === undefined) {\n\t\t\t\t\t\t\tcb(ApiError.ENOENT(p));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcb(null, new AsyncKeyValueFile(this, p, flag, stats, data));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic unlink(p: string, cred: Cred, cb: BFSOneArgCallback): void {\n\t\tthis.removeEntry(p, false, cred, cb);\n\t}\n\n\tpublic rmdir(p: string, cred: Cred, cb: BFSOneArgCallback): void {\n\t\t// Check first if directory is empty.\n\t\tthis.readdir(p, cred, (err, files?) => {\n\t\t\tif (err) {\n\t\t\t\tcb(err);\n\t\t\t} else if (files!.length > 0) {\n\t\t\t\tcb(ApiError.ENOTEMPTY(p));\n\t\t\t} else {\n\t\t\t\tthis.removeEntry(p, true, cred, cb);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic mkdir(p: string, mode: number, cred: Cred, cb: BFSOneArgCallback): void {\n\t\tconst tx = this.store.beginTransaction('readwrite'),\n\t\t\tdata = Buffer.from('{}');\n\t\tthis.commitNewFile(tx, p, FileType.DIRECTORY, mode, cred, data, cb);\n\t}\n\n\tpublic readdir(p: string, cred: Cred, cb: BFSCallback<string[]>): void {\n\t\tconst tx = this.store.beginTransaction('readonly');\n\t\tthis.findINode(tx, p, (e: ApiError, inode?: Inode) => {\n\t\t\tif (noError(e, cb)) {\n\t\t\t\tif (!inode!.toStats().hasAccess(FilePerm.READ, cred)) {\n\t\t\t\t\tcb(ApiError.EACCES(p));\n\t\t\t\t}\n\t\t\t\tthis.getDirListing(tx, p, inode!, (e: ApiError, dirListing?: { [name: string]: string }) => {\n\t\t\t\t\tif (noError(e, cb)) {\n\t\t\t\t\t\tcb(null, Object.keys(dirListing!));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic _sync(p: string, data: Buffer, stats: Stats, cb: BFSOneArgCallback): void {\n\t\t// @todo Ensure mtime updates properly, and use that to determine if a data\n\t\t//       update is required.\n\t\tconst tx = this.store.beginTransaction('readwrite');\n\t\t// Step 1: Get the file node's ID.\n\t\tthis._findINode(tx, path.dirname(p), path.basename(p), (e: ApiError, fileInodeId?: string): void => {\n\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t// Step 2: Get the file inode.\n\t\t\t\tthis.getINode(tx, p, fileInodeId!, (e: ApiError, fileInode?: Inode): void => {\n\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\tconst inodeChanged: boolean = fileInode!.update(stats);\n\t\t\t\t\t\t// Step 3: Sync the data.\n\t\t\t\t\t\ttx.put(fileInode!.id, data, true, (e: ApiError): void => {\n\t\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\t\t// Step 4: Sync the metadata (if it changed)!\n\t\t\t\t\t\t\t\tif (inodeChanged) {\n\t\t\t\t\t\t\t\t\ttx.put(fileInodeId!, fileInode!.toBuffer(), true, (e: ApiError): void => {\n\t\t\t\t\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\t\t\t\t\ttx.commit(cb);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// No need to sync metadata; return.\n\t\t\t\t\t\t\t\t\ttx.commit(cb);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Checks if the root directory exists. Creates it if it doesn't.\n\t */\n\tprivate makeRootDirectory(cb: BFSOneArgCallback) {\n\t\tconst tx = this.store.beginTransaction('readwrite');\n\t\ttx.get(ROOT_NODE_ID, (e: ApiError, data?: Buffer) => {\n\t\t\tif (e || data === undefined) {\n\t\t\t\t// Create new inode.\n\t\t\t\tconst currTime = new Date().getTime(),\n\t\t\t\t\t// Mode 0666, owned by root:root\n\t\t\t\t\tdirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime, 0, 0);\n\t\t\t\t// If the root doesn't exist, the first random ID shouldn't exist,\n\t\t\t\t// either.\n\t\t\t\ttx.put(dirInode.id, getEmptyDirNode(), false, (e?: ApiError) => {\n\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\ttx.put(ROOT_NODE_ID, dirInode.toBuffer(), false, (e?: ApiError) => {\n\t\t\t\t\t\t\tif (e) {\n\t\t\t\t\t\t\t\ttx.abort(() => {\n\t\t\t\t\t\t\t\t\tcb(e);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttx.commit(cb);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// We're good.\n\t\t\t\ttx.commit(cb);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Helper function for findINode.\n\t * @param parent The parent directory of the file we are attempting to find.\n\t * @param filename The filename of the inode we are attempting to find, minus\n\t *   the parent.\n\t * @param cb Passed an error or the ID of the file's inode in the file system.\n\t */\n\tprivate _findINode(tx: AsyncKeyValueROTransaction, parent: string, filename: string, cb: BFSCallback<string>): void {\n\t\tif (this._cache) {\n\t\t\tconst id = this._cache.get(path.join(parent, filename));\n\t\t\tif (id) {\n\t\t\t\treturn cb(null, id);\n\t\t\t}\n\t\t}\n\t\tconst handleDirectoryListings = (e?: ApiError | null, inode?: Inode, dirList?: { [name: string]: string }): void => {\n\t\t\tif (e) {\n\t\t\t\tcb(e);\n\t\t\t} else if (dirList![filename]) {\n\t\t\t\tconst id = dirList![filename];\n\t\t\t\tif (this._cache) {\n\t\t\t\t\tthis._cache.set(path.join(parent, filename), id);\n\t\t\t\t}\n\t\t\t\tcb(null, id);\n\t\t\t} else {\n\t\t\t\tcb(ApiError.ENOENT(path.resolve(parent, filename)));\n\t\t\t}\n\t\t};\n\n\t\tif (parent === '/') {\n\t\t\tif (filename === '') {\n\t\t\t\t// BASE CASE #1: Return the root's ID.\n\t\t\t\tif (this._cache) {\n\t\t\t\t\tthis._cache.set(path.join(parent, filename), ROOT_NODE_ID);\n\t\t\t\t}\n\t\t\t\tcb(null, ROOT_NODE_ID);\n\t\t\t} else {\n\t\t\t\t// BASE CASE #2: Find the item in the root node.\n\t\t\t\tthis.getINode(tx, parent, ROOT_NODE_ID, (e: ApiError, inode?: Inode): void => {\n\t\t\t\t\tif (noError(e, cb)) {\n\t\t\t\t\t\tthis.getDirListing(tx, parent, inode!, (e: ApiError, dirList?: { [name: string]: string }): void => {\n\t\t\t\t\t\t\t// handle_directory_listings will handle e for us.\n\t\t\t\t\t\t\thandleDirectoryListings(e, inode, dirList);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\t// Get the parent directory's INode, and find the file in its directory\n\t\t\t// listing.\n\t\t\tthis.findINodeAndDirListing(tx, parent, handleDirectoryListings);\n\t\t}\n\t}\n\n\t/**\n\t * Finds the Inode of the given path.\n\t * @param p The path to look up.\n\t * @param cb Passed an error or the Inode of the path p.\n\t * @todo memoize/cache\n\t */\n\tprivate findINode(tx: AsyncKeyValueROTransaction, p: string, cb: BFSCallback<Inode>): void {\n\t\tthis._findINode(tx, path.dirname(p), path.basename(p), (e: ApiError, id?: string): void => {\n\t\t\tif (noError(e, cb)) {\n\t\t\t\tthis.getINode(tx, p, id!, cb);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Given the ID of a node, retrieves the corresponding Inode.\n\t * @param tx The transaction to use.\n\t * @param p The corresponding path to the file (used for error messages).\n\t * @param id The ID to look up.\n\t * @param cb Passed an error or the inode under the given id.\n\t */\n\tprivate getINode(tx: AsyncKeyValueROTransaction, p: string, id: string, cb: BFSCallback<Inode>): void {\n\t\ttx.get(id, (e: ApiError, data?: Buffer): void => {\n\t\t\tif (noError(e, cb)) {\n\t\t\t\tif (data === undefined) {\n\t\t\t\t\tcb(ApiError.ENOENT(p));\n\t\t\t\t} else {\n\t\t\t\t\tcb(null, Inode.fromBuffer(data));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Given the Inode of a directory, retrieves the corresponding directory\n\t * listing.\n\t */\n\tprivate getDirListing(tx: AsyncKeyValueROTransaction, p: string, inode: Inode, cb: BFSCallback<{ [fileName: string]: string }>): void {\n\t\tif (!inode.isDirectory()) {\n\t\t\tcb(ApiError.ENOTDIR(p));\n\t\t} else {\n\t\t\ttx.get(inode.id, (e: ApiError, data?: Buffer): void => {\n\t\t\t\tif (noError(e, cb)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcb(null, JSON.parse(data!.toString()));\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// Occurs when data is undefined, or corresponds to something other\n\t\t\t\t\t\t// than a directory listing. The latter should never occur unless\n\t\t\t\t\t\t// the file system is corrupted.\n\t\t\t\t\t\tcb(ApiError.ENOENT(p));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Given a path to a directory, retrieves the corresponding INode and\n\t * directory listing.\n\t */\n\tprivate findINodeAndDirListing(tx: AsyncKeyValueROTransaction, p: string, cb: BFSThreeArgCallback<Inode, { [fileName: string]: string }>): void {\n\t\tthis.findINode(tx, p, (e: ApiError, inode?: Inode): void => {\n\t\t\tif (noError(e, cb)) {\n\t\t\t\tthis.getDirListing(tx, p, inode!, (e, listing?) => {\n\t\t\t\t\tif (noError(e, cb)) {\n\t\t\t\t\t\tcb(null, inode!, listing!);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Adds a new node under a random ID. Retries 5 times before giving up in\n\t * the exceedingly unlikely chance that we try to reuse a random GUID.\n\t * @param cb Passed an error or the GUID that the data was stored under.\n\t */\n\tprivate addNewNode(tx: AsyncKeyValueRWTransaction, data: Buffer, cb: BFSCallback<string>): void {\n\t\tlet retries = 0,\n\t\t\tcurrId: string;\n\t\tconst reroll = () => {\n\t\t\tif (++retries === 5) {\n\t\t\t\t// Max retries hit. Return with an error.\n\t\t\t\tcb(new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.'));\n\t\t\t} else {\n\t\t\t\t// Try again.\n\t\t\t\tcurrId = GenerateRandomID();\n\t\t\t\ttx.put(currId, data, false, (e: ApiError, committed?: boolean) => {\n\t\t\t\t\tif (e || !committed) {\n\t\t\t\t\t\treroll();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Successfully stored under 'currId'.\n\t\t\t\t\t\tcb(null, currId);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\treroll();\n\t}\n\n\t/**\n\t * Commits a new file (well, a FILE or a DIRECTORY) to the file system with\n\t * the given mode.\n\t * Note: This will commit the transaction.\n\t * @param p The path to the new file.\n\t * @param type The type of the new file.\n\t * @param mode The mode to create the new file with.\n\t * @param uid The UID to create the file with\n\t * @param gid The GID to create the file with\n\t * @param data The data to store at the file's data node.\n\t * @param cb Passed an error or the Inode for the new file.\n\t */\n\tprivate commitNewFile(tx: AsyncKeyValueRWTransaction, p: string, type: FileType, mode: number, cred: Cred, data: Buffer, cb: BFSCallback<Inode>): void {\n\t\tconst parentDir = path.dirname(p),\n\t\t\tfname = path.basename(p),\n\t\t\tcurrTime = new Date().getTime();\n\n\t\t// Invariant: The root always exists.\n\t\t// If we don't check this prior to taking steps below, we will create a\n\t\t// file with name '' in root should p == '/'.\n\t\tif (p === '/') {\n\t\t\treturn cb(ApiError.EEXIST(p));\n\t\t}\n\n\t\t// Let's build a pyramid of code!\n\n\t\t// Step 1: Get the parent directory's inode and directory listing\n\t\tthis.findINodeAndDirListing(tx, parentDir, (e?: ApiError | null, parentNode?: Inode, dirListing?: { [name: string]: string }): void => {\n\t\t\tif (!parentNode!.toStats().hasAccess(FilePerm.WRITE, cred)) {\n\t\t\t\tcb(ApiError.EACCES(p));\n\t\t\t}\n\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\tif (dirListing![fname]) {\n\t\t\t\t\t// File already exists.\n\t\t\t\t\ttx.abort(() => {\n\t\t\t\t\t\tcb(ApiError.EEXIST(p));\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// Step 2: Commit data to store.\n\t\t\t\t\tthis.addNewNode(tx, data, (e: ApiError, dataId?: string): void => {\n\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\t// Step 3: Commit the file's inode to the store.\n\t\t\t\t\t\t\tconst fileInode = new Inode(dataId!, data.length, mode | type, currTime, currTime, currTime, cred.euid, cred.egid);\n\t\t\t\t\t\t\tthis.addNewNode(tx, fileInode.toBuffer(), (e: ApiError, fileInodeId?: string): void => {\n\t\t\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\t\t\t// Step 4: Update parent directory's listing.\n\t\t\t\t\t\t\t\t\tdirListing![fname] = fileInodeId!;\n\t\t\t\t\t\t\t\t\ttx.put(parentNode!.id, Buffer.from(JSON.stringify(dirListing)), true, (e: ApiError): void => {\n\t\t\t\t\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\t\t\t\t\t// Step 5: Commit and return the new inode.\n\t\t\t\t\t\t\t\t\t\t\ttx.commit((e?: ApiError): void => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcb(null, fileInode);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Remove all traces of the given path from the file system.\n\t * @param p The path to remove from the file system.\n\t * @param isDir Does the path belong to a directory, or a file?\n\t * @todo Update mtime.\n\t */\n\tprivate removeEntry(p: string, isDir: boolean, cred: Cred, cb: BFSOneArgCallback): void {\n\t\t// Eagerly delete from cache (harmless even if removal fails)\n\t\tif (this._cache) {\n\t\t\tthis._cache.remove(p);\n\t\t}\n\t\tconst tx = this.store.beginTransaction('readwrite'),\n\t\t\tparent: string = path.dirname(p),\n\t\t\tfileName: string = path.basename(p);\n\t\t// Step 1: Get parent directory's node and directory listing.\n\t\tthis.findINodeAndDirListing(tx, parent, (e?: ApiError | null, parentNode?: Inode, parentListing?: { [name: string]: string }): void => {\n\t\t\tif (!parentNode!.toStats().hasAccess(FilePerm.WRITE, cred)) {\n\t\t\t\tcb(ApiError.EACCES(p));\n\t\t\t}\n\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\tif (!parentListing![fileName]) {\n\t\t\t\t\ttx.abort(() => {\n\t\t\t\t\t\tcb(ApiError.ENOENT(p));\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// Remove from directory listing of parent.\n\t\t\t\t\tconst fileNodeId = parentListing![fileName];\n\t\t\t\t\tdelete parentListing![fileName];\n\t\t\t\t\t// Step 2: Get file inode.\n\t\t\t\t\tthis.getINode(tx, p, fileNodeId, (e: ApiError, fileNode?: Inode): void => {\n\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\tif (!isDir && fileNode!.isDirectory()) {\n\t\t\t\t\t\t\t\ttx.abort(() => {\n\t\t\t\t\t\t\t\t\tcb(ApiError.EISDIR(p));\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else if (isDir && !fileNode!.isDirectory()) {\n\t\t\t\t\t\t\t\ttx.abort(() => {\n\t\t\t\t\t\t\t\t\tcb(ApiError.ENOTDIR(p));\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Step 3: Delete data.\n\t\t\t\t\t\t\t\ttx.del(fileNode!.id, (e?: ApiError): void => {\n\t\t\t\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\t\t\t\t// Step 4: Delete node.\n\t\t\t\t\t\t\t\t\t\ttx.del(fileNodeId, (e?: ApiError): void => {\n\t\t\t\t\t\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\t\t\t\t\t\t// Step 5: Update directory listing.\n\t\t\t\t\t\t\t\t\t\t\t\ttx.put(parentNode!.id, Buffer.from(JSON.stringify(parentListing)), true, (e: ApiError): void => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (noErrorTx(e, tx, cb)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttx.commit(cb);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"]}